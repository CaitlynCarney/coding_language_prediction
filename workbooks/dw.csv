,repo,language,readme_contents
0,eccentricdevotion/TARDIS,Java,"# TARDIS

TARDIS is a Spigot / Paper plugin that allows you to create a TARDIS that lets you time travel (teleport) to random locations. It adds a Whovian twist to the typical /sethome and /home commands.

**As a player, you can:**

* Create a TARDIS that is bigger on the inside.
* Time travel to a random location.
* Time travel to saved destinations.
* Grow rooms in your TARDIS.
* Take companions with you when you time travel.
* Collect Artron Energy to power your TARDIS.
* And so much more...

Plugin documentation can be found here:
[http://eccentricdevotion.github.io/TARDIS/site-map.html](http://eccentricdevotion.github.io/TARDIS/site-map.html)

Jenkins CI builds can be found here: [http://tardisjenkins.duckdns.org:8080/job/TARDIS/](http://tardisjenkins.duckdns.org:8080/job/TARDIS/)
"
1,kuralabs/reactive-core-doctor-who-web,JavaScript,"==========================================================
Doctor Who? (Web App) - Reactive Core Architecture Demo
==========================================================

This application is the web app demo for the **""Reactive Core Architecture""**
explained in this article: https://goo.gl/uN3QPK


Architecture Overview
=====================

The **""Reactive Core Architecture""** allows to structure a project for both a
multi-platform mobile application and a web application, keeping the business
logic of the application in a single, self-contained, reusable and maintainable
submodule.

This architecture is composed by three modules:

1. **The core:** Includes the business logic and the state of the application. This component is implemented using the Redux framework. Code reuse is done via this module. It's added to the mobile app and to the web app as a git submodule.

    See: https://github.com/kuralabs/reactive-core-doctor-who-core


2. **The mobile app:** Implemented using the React Native framework.

    See: https://github.com/kuralabs/reactive-core-doctor-who-mobile


3. **The web application:** Implemented using the React framework. This application is in the repository you are seeing right now.


.. image:: docs/images/reactive-core-demo-img.jpg


Build and run
=============

Install npm modules::

    npm install

Run the app::

    npm start


Data source
===========

The data used for this example was taken from IGN article ""Doctor Who? A guide to all the
doctors"".

http://www.ign.com/articles/2015/08/26/doctor-who-a-guide-to-all-the-doctors


License
=======

::

   Copyright (C) 2017 Carolina Aguilar Segura

   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License."
2,fwallacephd/doctor-who,CSS,"Notes about open source Doctor Who Project:

This site was created as an open source project for beginners by Faith H. Wallace, aka Code Girl.

The blog post about this project can be read here: https://codeburst.io/open-source-doctor-who-a666e2ab2d06

To see what the final project should look like, go here:
https://fwallacephd.github.io/whoviangirl/#home

If you want to see the original code, a solution folder is included in this repository with the HTML and CSS codes (but try to write the code on your own first)

To get started:
1. First, click on the issues tab at the top of the repository.
2. Review the issues and choose something to work on.
3. Fork the respository (click the ""Fork"" at the top right corner).
4. Next, download the files and open the index.html and style.css in your text editor.
5. Make your changes!
6. Use the command line and Git to save your work and push to your repository.

** If you need more help using GitHub go here: https://www.youtube.com/watch?v=73I5dRucCds

7. If you want to publish this page and include it in your portfolio, follow the directions here: https://www.youtube.com/watch?v=FiOgz3nKpgk


If you have questions or need help, email Faith at:
whoviangirl09@gmail.com
"
3,kuralabs/reactive-core-doctor-who-core,JavaScript,"==========================================================
Doctor Who? (Reactive Core) - Reactive Core Architecture Demo
==========================================================

This is the core module demo for the **""Reactive Core Architecture""**
explained in this article: https://goo.gl/uN3QPK


Architecture Overview
=====================

The **""Reactive Core Architecture""** allows to structure a project for both a
multi-platform mobile application and a web application, keeping the business
logic of the application in a single, self-contained, reusable and maintainable
submodule.

This architecture is composed by three modules:

1. **The core:** Includes the business logic and the state of the application. This component is implemented using the Redux framework. Code reuse is done via this module. It's added to the mobile app and to the web app as a git submodule. This module is in the repository you are seeing right now.


2. **The mobile app:** Implemented using the React Native framework.

    See: https://github.com/kuralabs/reactive-core-doctor-who-mobile


3. **The web application:** Implemented using the React framework.

    See: https://github.com/kuralabs/reactive-core-doctor-who-web


.. image:: docs/images/reactive-core-demo-img.jpg


Core Module
=============

This module consists in the business logic implemented with Redux actions and
reducers.

This repository is added as submodule to the mobile app and to the web app.


Data source
===========

The data used for this example was taken from IGN article ""Doctor Who? A guide to all the
doctors"".

http://www.ign.com/articles/2015/08/26/doctor-who-a-guide-to-all-the-doctors


License
=======

::

   Copyright (C) 2017 Carolina Aguilar Segura

   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License."
4,kuralabs/reactive-core-doctor-who-mobile,JavaScript,"==========================================================
Doctor Who? (Mobile App) - Reactive Core Architecture Demo
==========================================================

This application is the mobile app demo for the **""Reactive Core Architecture""**
explained in this article: https://goo.gl/uN3QPK


Architecture Overview
=====================

The **""Reactive Core Architecture""** allows to structure a project for both a
multi-platform mobile application and a web application, keeping the business
logic of the application in a single, self-contained, reusable and maintainable
submodule.

This architecture is composed by three modules:

1. **The core:** Includes the business logic and the state of the application. This component is implemented using the Redux framework. Code reuse is done via this module. It's added to the mobile app and to the web app as a git submodule.

    See: https://github.com/kuralabs/reactive-core-doctor-who-core


2. **The mobile app:** Implemented using the React Native framework. This application is in the repository you are seeing right now.

3. **The web application:** Implemented using the React framework.

    See: https://github.com/kuralabs/reactive-core-doctor-who-web


.. image:: docs/images/reactive-core-demo-img.jpg



Build and run
=============

Install npm modules::

    npm install

Link assets and packages (Explained below)::

    react-native link


To run the iOS app::

    react-native run-ios


To run the Android app::

    react-native run-android



Dependencies and fonts
======================

This project uses React Native Vector Icons package and a custom font family
(Fira Sans). In order for both to work properly you need to execute the following
command to link them to the project::

    react-native link


The custom fonts files are in the `fonts` folder in the root of the project.

**Note:** In iOS you need to delete the contents of `ios/build` folder and rebuild
the application after executing the above command.


Data source
===========

The data used for this example was taken from IGN article ""Doctor Who? A guide to all the
doctors"".

http://www.ign.com/articles/2015/08/26/doctor-who-a-guide-to-all-the-doctors


License
=======

::

   Copyright (C) 2017 Carolina Aguilar Segura

   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License."
5,WhoCraft/Weeping-Angels,Java,"<p align=""center"" width=""100%"">
    <img width=""80%"" src=""https://i.imgur.com/m55XCNx.png""> 
</p>

Minecraft Mod || Weeping Angel || This is a mod that adds the terrifying Weeping Angels to the Game, Minecraft. Don't Blink!

[![](http://cf.way2muchnoise.eu/versions/weeping-angels-mod.svg#center)](https://www.curseforge.com/minecraft/mc-mods/weeping-angels-mod/files)
[![](http://cf.way2muchnoise.eu/weeping-angels-mod.svg#center)](https://www.curseforge.com/minecraft/mc-mods/weeping-angels-mod/files)
[![](https://repository-images.githubusercontent.com/127478439/76679180-df53-11ea-8d64-3fcc0c1a848b#center)](https://www.curseforge.com/minecraft/mc-mods/weeping-angels-mod/files)
"
6,GeekInTheClass/DoctorWho,Swift,"#닥터후 (Doctor Who)
영국 BBC에서 방영하는 세계에서 가장 오래된 공상과학 드라마. 시간여행물.

![](https://raw.githubusercontent.com/GeekInTheClass/DoctorWho/master/Intro.jpg)

##시즌제
올드(클래식) 시즌이 아쉬움을 남기고 끝났지만, 오랜 시간이 시나고 나서 뉴 시즌으로 돌아와 매년 한 시즌씩 방영하고 있다. 오래됐지만 여전히 매 시즌 인기있고 팬이 두텁다. 2016년 올해 하반기에 뉴 시즌 10이 방영할 예정

##등장인물
### <a href = ""./Doctors.md/""> 닥터 </a>
이 드라마의 주인공. 겉모습은 인간의 생김새와 크게 달라보이지는 않지만, 지구와 인간을 아끼는 사람보다 더 사람같은 외계인이다. 폭력과 무기를 매우 싫어한다. 몸이 재생성된다는 개념을 통해 같은 인물을 여러 배우가 연기해왔다.
### <a href = ""./Companions.md/""> 컴패니언 </a>
닥터를 따라 같이 여행을 하는 동반자. 닥터와 같이 시공간을 뛰어넘는 여행을 하며 닥터를 만나기 전과 후의 인생이 완전히 달라진다. 닥터에게 의존하는 것이 아니라 서로 도움이 되고 의지가 되는 동반자이다. 재생성 하는 것은 아니지만, 이런저런 이유로 닥터와 헤어지게 되 닥터와 비슷한 주기로 인물이 바뀌는 편이다.
### 악당
역사가 깊은 드라마이기 때문에 악당 또한 굉장히 많이 등장해왔다. 드라마를 통틀어서 꾸준히 나오는 악당도 있다. 가장 인기 많은 악당은 역시 달렉(Dalek).

##상징적인 특징과 소품
### 재생성
닥터는 생명력이 다하면 재생성하게 되는데, 이때 얼굴을 포함한 신체 전체가 전혀 다른 모습으로 바뀐다. 이 개념으로 닥터후는 이제 주인공을 연기하는 사람이 바뀌더라도 꾸준히 닥터를 보여줄 수 있게 되었다. 닥터가 바뀔 때마다 주인공 연기자가 바뀌는 격이기 때문에 시청자들의 관심이 대단하다. 굉장히 나이가 많기 때문에 예전 기억은 잘 기억 못하는 편. 자신의 실제 나이도 잘 모른다.
### 타디스(TARDIS)
Time And Relative Dimension In Space. 시간과 공간을 여행하는 닥터의 개인 우주선. 인격을 가지고 있다. 위장기술인 '카멜레온 서킷'으로 파란색 전화박스 모양을 하고 있다. 겉은 사람 한 사람이 겨우 들어갈 정도로 작아보이지만, 타디스 안에는 거의 무한하다고 할 정도로 넓은 공간이 있다. 타디스 안에서 길을 모든 등장인물들이 헤메는 에피소드가 있을 정도.
### 시공간여행
타디스를 통해 시공간 여행을 하는데, 이러한 시간 여행중에 일어나는 다양한 에피소드가 이 드라마의 스토리가 된다. 그동안 나온 에피소드가 어마어마하고 복잡하니, 에피소드를 시간대별로 정리한 타임라인도 있다. 과거와 미래의 닥터들이 서로 만나게 되는 '멀티닥터 에피소드'도 이 시공간여행 덕분에 가능한 에피소드. 

![](https://raw.githubusercontent.com/GeekInTheClass/DoctorWho/master/Timeline.png)

### 소닉 스크류 드라이버
무기를 절대 사용하지 않는 평화주의자 닥터가 자주 사용하는 도구. 굉장히 광범위하게 다양한 물질을 조작하는 기능을 가지고 있다. 문을 열거나 기계를 조작하는데 주로 사용된다. 다양한 방면의 해킹이 가능하다. 
### 사이킥 페이퍼
보고 싶어하는 것을 보여주는 종이. 닥터가 위장으로 다른 곳에 잠입할 때 종종 사용한다. 

##이야기의 특징
### 타이미와이미
시간 여행을 통해 미래와 과거를 오가면서 모순이 발생하는 경우를 말한다. 어떤 에피소드에서는 문제의 근간이 되기도 하며, 어떤 에피소드에서는 문제의 해결책이 되기도 한다.
### 공간 왜곡
공간이 왜곡되면서 생기는 에피소드도 가끔씩 등장하는데, 왜냐하면 닥터가 항상 타고 다니는 '타디스'가 바로 안과 바깥이 다른 공간 왜곡을 이용한 우주선이기 때문이다.
### 역사적 인물/사건
시간 여행을 하기 때문에 우리가 흔히 알고 있는 역사적인 사건이나 인물을 찾아가는 에피소드가 자주 등장한다. 그렇다고 역사적 사실을 그대로 보여주는 것이 아니라, 항상 외계 종족이 개입하는 형식이다. 영국 드라마이기 때문에 주로 영국 중세와 근대를 배경으로 나오는 편이다. 
### 미스터리 탐정물
닥터는 문제를 거의 몸보다는 머리를 써서 해결한다. 그래서 탐정의 역할을 하는 에피소드가 많은데, 어차피 외계 종족이나 미래 기술을 알아야 하므로 닥터의 추리를 이해 혹은 예측하려고 애쓰진 말자.
### 모험
우주의 시초, 시간의 끝, 아름다운 우주선 등 다양한 공간과 시간을 이동하며 아름다운 경관과 문화를 경험한다. 닥터는 당연히 잘 알고 있지만, 처음 가보는 컴패니언의 입장에서 감상하면 된다. 이 엄청난 모험을 겪은 컴패니언은 보통 이 짜릿한 모험에 매료된다.

***
시즌9 눈물의 마지막 장면
![](https://raw.githubusercontent.com/GeekInTheClass/DoctorWho/master/Present.jpg)
[닥터후 공식 홈페이지로 이동](http://www.doctorwho.tv/)
"
7,dana-ross/doctor-who-episodes,,"# Doctor Who Episode Database
SQL database of Doctor Who episodes and related data. Currently used by the [Catalogopolis API](https://github.com/daveross/catalogopolis-api).

## License
Public domain. *Collections of facts* can't be copywritten. But since licensing may be an issue for some people attempting to use this data, I've made it available under CC0.

<p xmlns:dct=""http://purl.org/dc/terms/"" xmlns:vcard=""http://www.w3.org/2001/vcard-rdf/3.0#"">
  <a rel=""license""
     href=""http://creativecommons.org/publicdomain/zero/1.0/"">
    <img src=""http://i.creativecommons.org/p/zero/1.0/88x31.png"" style=""border-style: none;"" alt=""CC0"" />
  </a>
  <br />
  To the extent possible under law,
  <a rel=""dct:publisher""
     href=""https://github.com/dana-ross/doctor-who-episodes"">
    <span property=""dct:title"">Dana Ross</span></a>
  has waived all copyright and related or neighboring rights to
  <span property=""dct:title"">Doctor Who Episode Database</span>.
This work is published from:
<span property=""vcard:Country"" datatype=""dct:ISO3166""
      content=""US"" about=""https://github.com/dana-ross/doctor-who-episodes"">
  United States</span>.
</p>

## Tables

### actors
* **id** : a sequentially assigned database ID
* **uuid** : a unique ID to identify records outside the database
* **name**
* **gender**

### doctors
* **id**
* **incarnation**
* **primary_actor**

### serials
* **id**
* **season_id**
* **story**
* **serial**
* **title**
* **production_code**

### episodes
* **id**
* **title**
* **serial_id**
* **story**
* **episode_order**
* **original_air_date**
* **runtime**
* **uk_viewers_mm**
* **appreciation_index**
* **missing**
* **recreated**

### seasons
* **id**
* **name**

### companions
* **id**
* **name**
* **actor**

### directors
* **id**
* **name**

### writers
* **id**
* **name**

### serials_doctors
* **serial_id**
* **doctor_id**

### serials_companions
* **serial_id**
* **companion_id**

### serials_directors
* **serial_id**
* **director_id**

### serials_writers
* **serial_id**
* **writer_id**

## UUIDs
Use this tool to generate decimal UUIDs when creating or updating records: https://onlinerandomtools.com/generate-random-uuid?chain=remove-string-punctuation%2Cconvert-hex-to-decimal&count=100
"
8,WhoCraft/Regeneration,Java,"[![](https://i.imgur.com/GcUuiUW.png#center)](https://www.curseforge.com/minecraft/mc-mods/regeneration/files)

<p align=""center"">
  <img src=""http://cf.way2muchnoise.eu/versions/regeneration.svg"">
  <img src=""http://cf.way2muchnoise.eu/regeneration.svg""> <br>
</p>
<p align=""center"">
  <b>Links:</b><br>
  <a href=""https://discord.gg/SRsBsDp"">Discord</a> |
  <a href=""https://www.curseforge.com/minecraft/mc-mods/regeneration"">Download</a> 
  <br><br>
</p>


  | Credit | Contribution |
  | --- | --- |
  <a href=""https://twitter.com/Suff1999"">Suff</a> | Code
  <a href=""#"">HoldYourWaffle</a> | Code
  <a href=""https://twitter.com/nictogen"">Nictogen</a> | Code
  <a href=""https://twitter.com/50ap5ud5"">50ap5ud5</a> | Code
  <a href=""https://twitter.com/TheConnorDawn"">Connor Dawn</a> | Ideas & Sounds
  <a href=""https://twitter.com/DisasterGaye"">Angela</a> | Ideas & Voices & Models/Textures
  <a href=""https://twitter.com/MagicMrmann"">Magic Man</a> | Models/Textures
  <a href=""https://twitter.com/Phoenix26947026"">End Phoenix</a> | Models/Textures
  <a href=""https://twitter.com/Asher_Enterprix"">Asher</a> | Timelord Voices
  <a href=""https://www.fiverr.com/share/5AE3dQ"">aaliceh</a> | Timelord Voices
  <a href=""https://www.youtube.com/channel/UC0VxtmdbDvJO21xTqHD9S1w"">Wodaman</a> | Timelord Voices
  <a href=""https://www.youtube.com/channel/UCYFRnwIqr7Ps8FD_qDoWhIQ"">TommyPie</a> | Timelord Voices
  <a href=""https://twitter.com/TopNotchRamen"">TopNotchRamen</a> | Timelord Voices
  <a href=""https://twitter.com/AlotOfSpareTime"">GasMaskVA</a> | Timelord Voices
  <a href=""https://twitter.com/holo_modeller"">Dhi</a> | Models & Textures
  <a href=""https://twitter.com/LocalViolet"">Violet</a> | Logo & Doctor Who Skins

<p align=""center"">
  <img src=""https://www.bisecthosting.com/partners/custom-banners/dd651da3-657d-4154-9e2b-3df1d135c635.png"">
</p>"
9,maz/blinking-angel,C,"USAGE: run the blink binary and the ruby server and go to http://localhost:4567/

The images were found on the internet. I wrote the ruby code and the HTML file.

The entirety of the C code is licensed under the GPL.
The ruby and html files are licensed under the MIT license. A copy of the license is included with both files.

All the difficult C code was written by another author. The original contents of the file are below.

Real Time Eye Tracking and Blink Detection
==========================================

This project implements the algorithm (with small modifications) described in paper:

Real Time Eye Tracking and Blink Detection
Michael Chau and Margrit Betke
http://www.cs.bu.edu/techreports/pdf/2005-012-blink-detection.pdf

Overview
========

This system is the enhancement of my previous Eye Tracking system, where this system 
automatically locate the user's eye by detecting eye blinks. Motion analysis 
techniques are used in this stage, followed by online creation of the open eye template. 
The open eye template is used to locate the user's eye in the subsequent frames with 
template matching. Blink detection is performed using motion analysis techniques. 

Since the operation requires extensive amount of computation, the search region is 
restricted in a small search window around the user's eye. This method will drastically 
reduces the computation needed thus making the system running smoothly in real time.

Author:  Nashruddin Amin <me@nashruddin.com>
License: GPL
Website: http://nashruddin.com

See the complete tutorial at:
http://nashruddin.com/Real_Time_Eye_Tracking_and_Blink_Detection

Requirement
===========

This package requires the OpenCV library, freely available at:
http://sourceforge.net/projects/opencvlibrary

Compiling
=========

Compile as usual. See the OpenCV wiki (http://opencv.willowgarage.com) for info on how
to use various IDE with OpenCV.

Usage
=====
1. Run the program.
2. Blink your eyes. You will see 2 rectangles. The green rectangle labels
   the object being tracked (your eye) and the red rectangle is the search window.
3. Move your head to see the eye tracking.
4. If you blink, the program will display the text 'blink!' in the window.
5. Press 'r' to repeat eye detection.
6. Press 'q' to quit.

Contact the author
==================
Feel free to contact me@nashruddin.com.

"
10,markduwe/doctorwho,,"Doctor Who Data
=========

(hopefully) a comprehensive Doctor Who data archive in JSON format.

I'm aiming to go Doctor by Doctor, covering years, actors, companions, serials, serial titles, TARDIS details per Doctor, costumes, descriptions, Sonic, and so on...

If someone wants to add in extra details like UK audience figures, AI, etc, feel free.

Also, I'm not decided on if this should reflect purely the TV series, or also include books and audio adventures. Perhaps if you wanted to add this in, create a branch with that info.
"
11,ju-moulin/HTML_Projet-1_DoctorWhoCV,HTML,"# CV_Doctor_Who
Projet 1 de la session Mars 2020 de la Wild Code School

## DEMO

[voir la démo](https://tobe-continued.github.io/orleans-php-2003-project-doctorwho/)

## Wilders ayants participé au Projet : 

- [Emanuelle Mendels](https://github.com/Melusine45)
- [Olivier Monsire](https://github.com/OlivierMonsire)
- [Monya Razoki](https://github.com/MonyaMya)
- [Julien MOULIN](https://github.com/Tobe-Continued)
"
12,pratush07/DoctorWho,Java,"# DoctorWho

Helps you find the doctors nearby and book appointments as well.The application is written in Java for Android Platform(Android Lolipop).The Backend APIs are written in python using Django Framework.  

The rating of the doctors is based on an average score of ratings given be the user as well as the comments received. The score of the comment is evaluated by doing sentiment analysis of the text.

Rating = ((rating by users) + (sentiment score of comments)) / 2


Click on link below to see a demo of the application  
https://youtu.be/BwRZqaF-1Q0
or
https://drive.google.com/file/d/1O2zS9dRAizWvdlvH_leYvEw6iWukJsvz/view
"
13,generalbrus/Generalbrus.github.io,JavaScript,"<h1>2048.dw</h1>
<h3>The Gallifreyan version of 2048!</h3>
<strong>Play it here (online via browser): http://generalbrus.github.io/2048.dw/</strong><br/>
Merge the Doctors and get to the 12th! (There are actually 13 Doctors as the War Doctor has been included).
Comparing this game to the official version of 2048, to win you have to reach 8192 (<strong>2^13</strong>)

<strong>NOTE: </strong>The game is available also offline for Android devices (Android 2.3.3 or higher required), download here: http://bit.ly/1i6Mt42. 

<img src=""http://i.imgur.com/bjRJhKq.png"">

The screenshot above is genuine, I really wanted to get to the 10th Doctor, alias David Tennant, and after many attemps in the end I did it <3 

=======
<strong>Created by Generalbrus (https://github.com/Generalbrus)</strong><br/>
This is a custom version of the game 2048 created by Gabriele Cirulli (http://git.io/2048), which was also based on 1024 by Veewo Studio and conceptually similar to Threes by Asher Vollmer.
The Doctor Who series and characters appearing in this game are copyrighted by the BBC.
"
14,Schlenges/doctor-who-quote-api,JavaScript,"# Doctor Who Quotes API
A Node.js + Express app. Request single or multiple quotes, randomized or sorted by character or the timeline of a certain Doctor.

https://dw-quote-api.herokuapp.com/
"
15,alicescfernandes/random-who,JavaScript,"![](https://alicescfernandes.github.io/random-who/images/banner.jpg)
![](https://www.google-analytics.com/collect?v=1&t=event&tid=UA-100869248-2&cid=555&ec=github&ea=pageview&el=random-who&ev=1)
Random Who
----------

### A random doctor who episode sorter

###### Table of Contents  

*   [New Features](#n1)
*   [Minimum Requirements](#c1)
*   [To be implemented](#c2)
*   [Known Issues](#c3)

What episode you are going to watch when there is no Doctor Who on the telly? Now, you don't have to decide, let the computer do that for you!

This is already the 4th version of this tool, and this time, i decided to release it to the public. Is perhaps, one of the most useless project i've ever done.

My name is Alice, and i am a not-so-professional web developer. I like to do silly projects on my free time, because is fun and sometimes i just want to pass the time.  
Me and my sister, we are both fans of Doctor Who, and we started to watch the modern season with David Tennant, and ever since, we have been following the adventures of the Doctor across all the time and space. But we often were facing the same issue: there's no Doctor Who on the telly, and is hard to pick an episode, they are all good! So, what are we going to watch? Voilà, that's how this ""thing"" started.

Since the original concept to the first demo, there have been several versions of this sorter: with images, with no images, with music and without music, and even Wikipedia integration. But really, all i wanted was to randomly pick an episode to watch.

All of the previous versions were ""ugly"" and not presentable, so i decided to take on a 4th version of the sorter, and this time, make it suitable for web.

If you are wondering why, check out the [FAQ](FAQ.md)

### New Features

#### New Episodes
And ... here we go again! When a new season begins, so does begin the updates. The generator will be updated weekly, with new episodes, and if available, new music, new graphics and quotes! Make sure to comeback every week to see what episodes were added. 

#### Jodie Withaker is HERE!
Unless you have been living under a rock, the new doctor is now a women (and Chibnall has taken over the show).  This means new logo, new artwork and also new music and a NEW DOCTOR!. So the generator as also updated it's looks, to make it look more 13th.

#### Regenerate Button
The most requested feature is now available!. No more reloading the page, you can now ask for a new random episode whitin the website. IS CALLED A...REGENERATION!

#### Mute Button
If you are tired of hearing the music, you can now mute the sound without having to do it on your computer. The generator now provides you with a mute button, so you can mute within on the website

#### New Music and quotes
New music as been added and quotes have been added to some episodes

#### Updated episodes
""Twice Upon A Time"" is now part of the generator. Have fun!

### Minimum Requirements
You are going to need a computer with a screen that is at least bigger or equal to 1366x768.

**This web page is not optimized for mobile devices, please do not access it on your devices, it will consume data and will be slow.**

Also, make sure that you have the latest browser version possible, as some features will only work on updated versions

**Internet Explorer users: You will be not be able to hear any type of music. This website uses cutting-edge API's that are not implemented on Internet Explorer. _Sorry about that, but i want to garantee the safety of the material that doesn't belong to me_**

### To be implemented
No new features are being developed

### Known Issues
- Some images are missing, i'm still trying to figure out which
- Still trying to fix the mobile presentation of this website
- SEO still needs improving
"
16,oojas/flutter-doctor,Dart,"# Flutter Doctor

App for Developers
## Getting Started

This project is made for the people who are initial to programming in flutter and want to dive me

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://flutter.dev/docs/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://flutter.dev/docs/cookbook)

For help getting started with Flutter, view our
[online documentation](https://flutter.dev/docs), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
"
17,slastonm/Doctor_who,CSS,
18,codeforpakistan/Doctor-Finder,Java,"# Doctor-Finder
This application targets wide range of Islamabad residents including people new to Islamabad, working mothers, people who really go to hospital. It helps you find the nearby doctors and specialists based on the selection and find the route for that doctor.
"
19,onur-kaplan/Clickable-human-body-drawn-with-SVG,HTML,"# Clickable-human-body-drawn-with-SVG
An alternative web application for doctors who want to record the condition of the troubled parts of the body.

- Main Features of the Illustration
- Works perfectly on desktop along with mobile devices including Smartphones: iPhone, iPad, Tablets, etc.
- Responsive and fully resizable. 
- Each organ or spot can be activated or deactivated individually.
- SVG (Scalable Vector Graphics) based, so it can be enlarged to any size up to preserving the quality.

![](https://raw.githubusercontent.com/tr36/Clickable-human-body-drawn-with-SVG/master/human-body.gif)

Live Demo: https://codepen.io/tr36/pen/XaWeNK"
20,pyropeter/K-9,JavaScript,"K-9
=========

	node main.js

Features
--------

* Monitors TPB for torrents that seem to contain the newest Doctor Who episode
* ....?


"
21,jhabarsingh/DOCMED,JavaScript,"# DOCMED  ⚡️ [![GitHub](https://img.shields.io/github/license/jhabarsingh/DOCMED?color=blue)](https://github.com/jhabarsingh/DOCMED/blob/master/LICENSE) [![GitHub stars](https://img.shields.io/github/stars/jhabarsingh/DOCMED)](https://github.com/jhabarsingh/DDOCMED/stargazers)  [![GitHub contributors](https://img.shields.io/github/contributors/jhabarsingh/DOCMED.svg)](https://github.com/jhabarsingh/DOCMED/graphs/contributors)  [![GitHub issues](https://img.shields.io/github/issues/jhabarsingh/DOCMED.svg)](https://github.com/jhabarsingh/DOCMED/issues) [![GitHub forks](https://img.shields.io/github/forks/jhabarsingh/DOCMED.svg?style=social&label=Fork)](https://GitHub.com/jhabarsingh/DOCMED/network/)

<p align=""center"">
  <img src=""https://github.com/jhabarsingh/DOCMED/blob/main/docs/animations/docmed.png?raw=true"" />
</p>
<details>
  <summary>:zap: TECH STACK</summary>
  <br/>
  <div style=""display:flex;justify-content:space-around"">
  <img titlt=""Dialog Flow"" src=""https://pbs.twimg.com/profile_images/880147119528476672/S7C-2C6t.jpg"" width=""50px"" height=""50px""  style=""margin-right:5px;""/>
  <img  title=""Django"" src=""https://icon-library.com/images/django-icon/django-icon-0.jpg"" width=""50px"" height=""50px"" style=""margin-right:5px;"" />
<!--   <img  title=""Kommunicate"" src=""https://ps.w.org/kommunicate-live-chat/assets/icon-256x256.png?rev=2291443"" height=""50px""  style=""margin-right:5px;""/> -->
  <img title=""Heroku""  src=""https://www.thedevcoach.co.uk/wp-content/uploads/2020/04/heroku.png"" height=""50px""  style=""margin-right:5px;""/> 
  <img  title=""Tensorflow"" src=""https://www.altoros.com/blog/wp-content/uploads/2016/01/tensorflow-logo-cropped.png"" height=""50px"" style=""margin-right:5px;"" />
  <img  title=""Postgresql"" src=""https://pbs.twimg.com/media/EGc7jg4XoAA0bez.png"" height=""50px"" style=""margin-right:5px;"" />
  <img  title=""Scikit Learn"" src=""https://www.analyticsvidhya.com/wp-content/uploads/2015/01/scikit-learn-logo.png"" height=""50px"" style=""margin-right:5px;"" />
  <img title=""Reactjs"" src=""https://icons-for-free.com/iconfiles/png/512/design+development+facebook+framework+mobile+react+icon-1320165723839064798.png"" width=""50px"" height=""50px""  style=""margin-right:5px;""/>
  <img  title=""Docker"" src=""https://pbs.twimg.com/profile_images/1273307847103635465/lfVWBmiW_400x400.png"" height=""50px"" style=""margin-right:5px;"" />
</div>
</details>

## Abstract
To improve the conventional diagnostic procedures as they are prone to human
mistakes and these are slow, expensive and not equally accessible to everyone therefore 
we developed an efficient ML model for predicting the possibility of various
diseases like covid, viral fever, dengue etc and integrate it with an interactive web
based dashboard which will also provide some additional insights and
recommendations over the user’s medical data.
[Read More](https://docs.google.com/document/d/1q19CVPYDygCHwYQ6YYb1oWLqrlC6ymcc14U_EjeX64w/edit?usp=sharing)


![HOME PAGE](https://github.com/jhabarsingh/Covid-Assistant/blob/main/docs/animations/chatbot.gif)

## Features
Features Provided By the **DOCMED**
  1. CHATBOT **COVAT** TO RESOLVE YOUR QUERIES
  2. ML MODEL TO PREDICT COVID FROM **SYMTOMS**
  3. ML MODEL TO PREDICT COVID FROM [**CHEST XRAY REPORT**](https://github.com/jhabarsingh/XRAY-COVID-PREDICTION)
  4. ML MODEL TO PREDICT COVID FROM **CHEST CTSCAN REPORT**
  6. CONSULT WITH A **DOCTORS** IN YOUR CITY
  7. [**TRACK COVID CASES**](https://github.com/jhabarsingh/COTRACK) WORLD WIDE OR COUNTRY WISE

![MACHINE LEARNING](https://github.com/jhabarsingh/DOCMED/blob/main/docs/animations/ml_new.gif)

## Project Setup

### Using venv
```bash
git clone https://github.com/jhabarsingh/DOCMED.git  
cd DOCMED
python3 -m venv env # Python 3.6.9 or 3.7.0 version 
source env/bin/activate
python3 -m pip install --upgrade pip
pip install -r requirements.txt
python manage.py runserver
```

### Using conda
```bash
git clone https://github.com/jhabarsingh/DOCMED.git  
cd DOCMED
conda create -n docmed python==3.7 
conda activate docmed
python3 -m pip install --upgrade pip
pip install -r requirements.txt
python manage.py runserver
```

### Using Docker

```bash
sudo apt-get install docker docker-compose # Install docker, docker-compose on linux
git clone https://github.com/jhabarsingh/DOCMED.git  
cd DOCMED
sudo docker-compose up
```

## [Want To Contribute](https://medium.com/mindsdb/contributing-to-an-open-source-project-how-to-get-started-6ba812301738)
### You can contribute to this project in many ways
 1. You can create an issue if you find any bug.
 2. You can work on an existing issue and Send PR.
 3. You can make changes in the design if it is needed.
 4. Even if you find any grammatical or spelling mistakes then also you can create an issue.

> *I would be glad to see a notification saying `User {xyz} created a Pull Request`.
I promise to review it.*
"
22,margaretkroll/Who,Jupyter Notebook,"# Who
Neural network trained to recognize the Doctor from Doctor Who (reboot only!). 

You can also upload your own photo and see which Doctor you look most like.

https://mybinder.org/v2/gh/margaretkroll/Who/master?urlpath=%2Fapps%2FdocClassifier.ipynb


Used the following tools:<br>
Web scraper for Google Images: https://github.com/ultralytics/google-images-download<br>
FastAI for model training: https://github.com/fastai/fastai2<br>
AppMode for Jupyter notebooks: https://github.com/oschuett/appmode<br>
Binder for online hosting: https://mybinder.org/<br>
"
23,andreas0607/Doctorwho,HTML,"# Doctor Who Quote engine
### Made with:
* PHP for form-posting
* Jquery for simplified Ajax-calls
* SVG images

##What it looks like:
_Go here for a demo: [Amolle](http://amolle.com/who)_

###### By Andreas ""Molle"" Moldskred

"
24,MCS-Kaijin/WhoScript,Python,"# WhoScript
Doctor Who-themed esoteric programming language interpreter. Documentation at http://www.esolangs.org/wiki/WhoScript. Installation instructions at http://meta.codegolf.stackexchange.com/a/7841/48457.
"
25,jiminycricket/doctor-who-ghost-blog,JavaScript,"<a href=""https://github.com/TryGhost/Ghost""><img src=""https://cloud.githubusercontent.com/assets/120485/6622822/c4c639fe-c8e7-11e4-9e64-5bec06c8b4c3.png"" alt=""Ghost"" /></a>
<a href=""https://travis-ci.org/TryGhost/Ghost""><img align=""right"" src=""https://travis-ci.org/TryGhost/Ghost.svg?branch=master"" alt=""Build status"" /></a>

![Ghost Screenshot](https://cloud.githubusercontent.com/assets/120485/6626466/6dae46b2-c8ff-11e4-8c7c-8dd63b215f7b.jpg)

![Ghost is a simple, powerful publishing platform that allows you to share your stories with the world.](https://cloud.githubusercontent.com/assets/120485/6626501/b2bb072c-c8ff-11e4-8e1a-2e78e68fd5c3.png)

The project is maintained by a non-profit organisation called the **Ghost Foundation**, along with an amazing group of independent [contributors](https://github.com/TryGhost/Ghost/contributors). We're trying to make publishing software that changes the shape of online journalism.

- [Ghost.org](https://ghost.org)
- [Latest Release](https://ghost.org/download/)
- [Support](http://support.ghost.org/)
- [Theme Docs](http://themes.ghost.org)
- [Contributing Guide](https://github.com/TryGhost/Ghost/blob/master/CONTRIBUTING.md)
- [Feature Requests](http://ideas.ghost.org/)
- [Dev Blog](http://dev.ghost.org)

**NOTE: If you’re stuck, can’t get something working or need some help, please head on over and join our [Slack community](https://ghost.org/slack/) rather than opening an issue.**


# Quick Start Install

Make sure you've installed Node.js - We recommend the latest **Node v0.10.x** release.

Ghost is also compatible with **Node v0.12** and **io.js v1.2**, but please note that these versions are more likely to run into installation problems. May contain nuts. Please use the [forum](https://ghost.org/forum/installation/) for help.

1. Download the [latest release](https://ghost.org/download/) of Ghost
1. Unzip in the location you want to install
1. Fire up a terminal
1. `npm install --production`
1. Start Ghost!
    - Local environment: `npm start`
    - On a server: `npm start --production`
1. `http://localhost:2368/ghost` :tada:

More [install docs](http://support.ghost.org/installation/) here in case you got stuck.

<a name=""getting-started""></a>
# Developer Install (from git)

Install Node.js.

```bash
# Node v0.10.x - full support
# Node v0.12.x and io.js v1.2 - partial support
#
# Choose wisely
```

Clone :ghost:

```bash
git clone git://github.com/tryghost/ghost.git
cd ghost
```

Install grunt. No prizes here.

```bash
npm install -g grunt-cli
```

Install Ghost. If you're running locally, use [master](https://github.com/TryGhost/Ghost/tree/master). For production, use [stable](https://github.com/TryGhost/Ghost/tree/stable). :no_entry_sign::rocket::microscope:

```bash
npm install
```

Build the things!

```bash
grunt init
```

Minify that shit for production?

```bash
grunt prod
```

Start your engines.

```bash
npm start

## running production? Add --production
```

Congrats! You made it. BTW you can also just `npm install ghost` if you're into that sort of thing. NPM afficionados can also read up on using [Ghost as an NPM module](https://github.com/TryGhost/Ghost/wiki/Using-Ghost-as-an-npm-module).

More general [install docs](http://support.ghost.org/installation/) here in case you got stuck.


# Deploying Ghost

![Ghost(Pro) + DigitalOcean](https://cloud.githubusercontent.com/assets/120485/8180331/d6674e32-1414-11e5-8ce4-2250e9994906.png)

Save yourself time and headaches with our fully managed **[Ghost(Pro)](https://ghost.org/pricing/)** service. Deploy a new instance of Ghost in a couple of clicks running on [DigitalOcean](https://digitalocean.com)’s rock solid infrastructure, with a worldwide CDN thrown in at no extra charge.

All revenue from **Ghost(Pro)** goes to the Ghost Foundation, the non-profit org which funds the maintenance and further development of Ghost.

[Other options](http://support.ghost.org/deploying-ghost/) are also available if you prefer playing around with servers by yourself.


# Staying Up to Date

When a new version of Ghost comes out, you'll want to look over these [upgrade instructions](http://support.ghost.org/how-to-upgrade/) for what to do next.

You can talk to other Ghost users on [our forums](https://ghost.org/forum) or chat with Ghost developers in our [public Slack team](https://ghost.org/slack/) (it's pretty awesome). We have a public meeting every Tuesday at 5:30pm London time.

New releases are announced on the [dev blog](http://dev.ghost.org/tag/releases/). You can subscribe by email or follow [@TryGhost_Dev](https://twitter.com/tryghost_dev) on Twitter, if you prefer your updates bite-sized and facetious.

:saxophone::turtle:


# Copyright & License

Copyright (c) 2013-2015 Ghost Foundation - Released under the [MIT license](LICENSE).
"
26,slychika/csci3155Paper,,"csci3155Paper
=============

Doctor Who adventures in code (Principals of Programming Language Paper)

Topic: JSR 14: Add Generic Types To The JavaTM Programming Language
Partners: Heather L. Dykstra, Caitlin E. Hickey, Michael D. Williams

Group Paper To Do List

- [x] Find Topic (JSR 14)
- [x] Get Sources
- [x] Write Paper (1000-1500 words)
- [x] First Draft (April 22)
- [x] Final Draft (May 2)
- [x] Make Presentation (20 slides, 5 minutes)
- [x] Practice Presentation (Google+)

"
27,cecilmillerioux/who,Java,"# who
Doctor Who Quest
"
28,23carnies/doctor-who-api,JavaScript,
29,CorentinTh/doctor-who,JavaScript,"<p align=""center"">
    <img src="".github/logo.png"" alt=""logo"" width=""600"">
    <h1 align=""center"">Doctor Who companions</h1>
</p>

<p align=""center"">
    <a href=""https://www.npmjs.com/package/doctor-who""><img src=""https://img.shields.io/npm/dw/doctor-who.svg"" alt=""Weekly Downloads"" /></a>
    <a href=""https://travis-ci.com/CorentinTh/doctor-who""><img src=""https://travis-ci.com/CorentinTh/doctor-who.svg?branch=master"" alt=""Build Status"" /></a>
    <a href='https://coveralls.io/github/CorentinTh/doctor-who?branch=master'><img src='https://coveralls.io/repos/github/CorentinTh/doctor-who/badge.svg?branch=master' alt='Coverage Status' /></a>
    <a href=""https://www.npmjs.com/package/doctor-who""><img src=""https://img.shields.io/bundlephobia/minzip/doctor-who.svg"" alt=""npm bundle size"" /></a>
    <a href=""https://www.npmjs.com/package/doctor-who""><img src=""https://img.shields.io/github/package-json/v/CorentinTh/doctor-who.svg"" alt=""GitHub package.json version"" /></a>
    <a href='LICENCE'><img src=""https://img.shields.io/github/license/CorentinTh/doctor-who.svg"" alt=""Licence Badge"" /></a>
</p>

Doctor Who names: a simple and small npm package to get Doctor Who characters names. Can be useful for data anonymization or username placeholder.


```javascript
const Generator = require('doctor-who');
const gen = new Generator();

gen.random(); // 'Rory Williams'
gen.all(); // ['Amy Pond', 'Rose Tyler', ... ]
gen.get(2); // ['River Song', 'Clara Oswald']
```

## Installation

Use `yarn` or `npm` to install this package:

```shell
npm install --global doctor-who
# or
yarn global add doctor-who
```

## API

### constructor(doctors = 'all', language = 'en')

Create a new generator instance. You could choose the language in parameter and which Doctor companions to choose.

```javascript
const Generator = require('doctor-who');

const gen = new Generator();
// Same as:
const gen = new Generator('all', 'en');
```

```javascript
const Generator = require('doctor-who');

// Will generate names from only the companions of the 10th and 11th Doctor.
const gen = new Generator([11, 10]);

// Will generate names from the companions of all Doctors.
const gen = new Generator('all');

// Will generate names from the companions of only the 12th doctor.
const gen = new Generator([12]);
```

### random()

Return a random name of a character in Doctor Who.

```javascript
const Generator = require('doctor-who');
const gen = new Generator();

gen.random(); // Amy Pond
```

### all()

Return an array containing all names.

```javascript
const Generator = require('doctor-who');
const gen = new Generator();

gen.all(); // ['Amy Pond', 'Rose Tyler', ... ]
```

### get(count = 1)

Return an array containing `count` names.

```javascript
const Generator = require('doctor-who');
const gen = new Generator();

gen.get(2); // ['Amy Pond', 'Rose Tyler']
```

## Cli

This tool can also be used from the command line.

```shell
$ doctor-who
Amy pond
```

### Usage

```shell
$ doctor-who -h
Usage: datamanager [options]

get a random value

Options:
  -V, --version              output the version number
  -a, --all                  get all values
  -l, --language <language>  specify language. Available languages are: en (default: ""en"")
  -c, --count <n>            get n values
  -r, --random               get a random value. Same as without options
  -h, --help                 output usage information
```

## Languages

The currently available languages for the names are:

* [en](data/en.json)

Add yours !

## Contribute

**Pull requests are welcome !** Feel free to contribute. 

## Credit

MIT Licensing. Coded by [Corentin Thomasset](//corentin-thomasset.fr) 
"
30,Emanuelpna/doctor-who-quiz,TypeScript,"# Doctor Who Quiz

![Print da tela inicial do Projeto](./cover.jpg)

Projeto de um Quiz sobre Doctor Who desenvolvido durante a ""Imersão Alura React e Next.js""

## 💻 Como iniciar o projeto 💻

 - [x] Clone o projeto. `git clone https://github.com/Emanuelpna/doctor-who-quiz.git`
 - [x] Instale as dependências. `npm install` ou `yarn`
 - [x] Altere o db.json, se quiser ou precisar
 - [x] Inicie o servidor de desenvolvimento. `npm run dev` ou `yarn dev`

## 🔮 Links úteis 🔮

Cores baseadas nesta paleta gerada no [Coolors](https://coolors.co/5e2bff-171123-fc6dab-f3fae1)

Imagem de fundo por: [Juliana Plechkova](https://www.artstation.com/artwork/yGryn)
"
31,MoeRayo/Doctor-who-s-Quiz-App,CSS,"# Doctor-Who's Quiz App

![Design preview for the Doctor Who Quiz App](./images/FrontendQuizPreview.png)

## Welcome! 👋

Thank you for checking out my quiz app developed for start.ng internship.

**This task was completed with HTML CSS and Javascript.**

It is a completely responsive application.
"
32,hexagon-software/Akhaten,Java,"# Akhaten
A Minecraft mod centered arround Doctor Who

## About Akhaten
Akhaten is a Minecraft mod based arround Doctor Who and is Developed by Linesix Studios. 
It implements features such as:
* The TARDIS
* Sonic Screwdrivers
* Daleks, Cyberman & More
* Different planets from Doctor Who
* Weapons & Tools.

## Versions 
Current Version: 0.6.1 (PUBLIC BETA)<br/>
Under Development: 1.0.0 (1ST FULL RELEASE)<br/>

## Links
The official curse-forge page: https://minecraft.curseforge.com/projects/akhaten<br/>
The official Linesix Studios Discord server: https://discord.gg/awHNvQd

## Credits
### Authors
* Felix Eckert / Bertrahm - Lead Developer, Creator of Akhaten
* inferno4you - Developer
* Syorito Hatsuki - Developer

### Artists
* [{Jay}] / Peter Brachaki - Textures & Models
* MoonlitLamps - Textures & Models
* GhanoucCraftHD - Models
* TheOfficialTimeGeezer - Mod Logo
* Felix Eckert / Bertrahm - Textures

### Translators
* Syorito Hatsuki - Finnish, Russian
* Felix Eckert - German

### Special Thanks to
* McJTY
* All Beta Testers
* Minecraft Forge team
* Mojang
* The BBC

## License
Copyright 2019 Linesix Studios

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, 
provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, 
DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, 
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
33,Joh316/doctor-who2,Java,
34,dana-ross/catalogopolis-api,TypeScript,"# catalogopolis-api
[![Build Status](https://travis-ci.org/daveross/catalogopolis-api.svg?branch=master)](https://travis-ci.org/daveross/catalogopolis-api)
Source code for the [Doctor Who Episodes API](https://api.catalogopolis.xyz)

## License

[MIT](https://opensource.org/licenses/MIT/)
"
35,franciscomemoli/medicalOffice,PHP,
36,mcandre/who,JavaScript,
37,eccentricdevotion/TARDISWeepingAngels,Java,"# TARDISWeepingAngels

Inspired by: [TARDIS Ticket #530 - Weeping Angels](http://dev.bukkit.org/bukkit-plugins/tardis/tickets/530-weeping-angels/)

This plugin tranforms skeletons into terrifying Weeping Angels (as seen on  [Doctor Who](http://www.bbc.co.uk/programmes/p00wqr12/profiles/weeping-angels)).

![Weeping Angel](https://dl.dropboxusercontent.com/s/iulxdqis25j5fen/weepingangel1.jpg?dl=1)

JAR available here: [http://dev.bukkit.org/bukkit-plugins/tardisweepingangels/files/](http://dev.bukkit.org/bukkit-plugins/tardisweepingangels/files/)

## Features
* Configurable spawn rate
* Configurable drop on death
* Configurable killing item
* Only spawn them in the worlds you want
* Can be frozen in place for a configurable time
* Configurable TARDIS Key stealing

## Information
Weeping Angels only spawn at night in loaded chunks. They spawn with grey leather armour and a water lily helmet (their wings).

Weeping Angels can only be killed with the configured weapon - by default a DIAMOND_PICKAXE - hitting them with anything else has no effect. When they die they drop a random (1-3) amount of STONE.

The angels move pretty fast, but you can freeze them in place by looking at them and quickly pressing the sneak key. Better arm yourself or flee quickly though, as they'll be after you again in a snap - and if they touch you, you'll be teleported away to a random location. If the TARDIS plugin is also installed (if it isn't WHY NOT?), your TARDIS Key will be stolen.

## Configuration
The default config is shown below:

```
spawn_rate:
    how_many: 5
    how_often: 400
    max_per_world: 50
worlds:
    - world
freeze_time: 100
weapon: DIAMOND_PICKAXE
drops:
    - STONE
    - COBBLESTONE
angels_can_steal: true
```
The `spawn_rate` section sets Angel spawning options.

* `how_many` sets how many Angels to spawn each time.
* `how_often` is the time period (in server ticks - _20 ticks = 1 second_) between spawn attempts.
* `max_per_world` is the maximum number of Weeping Angels can be alive at one time.

The `worlds` section allows you to list the worlds you want the angels to spawn in.

`freeze_time` is the length of time (in server ticks) that the Angels remain motionless for.

`weapon` sets the item that will kill a Weeping Angel.

`drops` sets a list of items that drop when the Angel is killed.

`angels_can_steal` sets whether the Angels can steal your TARDIS Key - requires the TARDIS plugin to be installed.
"
38,jofelipe/css3-tardis,,"Doctor Who Tardis created using CSS3, only CSS3 ;)"
39,Virag007/DoctorData,Python,"# DoctorData
![Image of DoctorData](http://medical3danimationcompany.com/wp-content/uploads/surgical-3d-medical-animation-doctor-rendering-character-mascot-san-antonio-healthcare-3d-visualization-284x300.png)

This project focuses on the prediction of doctor details along with their location who are perfect for the user inputted disease. It is a software application (written on python) intended to be used by user for doctor prediction along with disease information, booking the appointment with respective doctors and medicine substitute finder. User will get the graphical interface that will ease the mechanism.


To run this software into your system you need to do following things:------

1. First of all install the latest version of python into your system (suitable Anaconda(spyder) for python developmnet).
2. You need to install some libraries to run this software which are as follows----(in anaconda command prompt pip --install <library name>)
	> webbrowser
	> wikipedia
	> urllib.request
	> geopy
	> geocoder
3. After installing the required libraries, you need to run the frontend.py file as----
	> In windows, open cmd and run program as python frontend.py or simply run it into gui based editor like atom or in anaconda(spyder).
	> In Linux, you donot need to install python because it is already built in. Howsoever, If it is not installed into the system you need to explicitly install into the system and run same (python frontend.py) command to execute the program.
	> In Macos, Same thing to do as in Linux.
4. Now enjoy our work	
"
40,ecmoore/doctor-who,CSS,
41,dracos/who-said,PHP,
42,bernie-haxx/Doctor-Patient,JavaScript,"# Doctor-Patient
"
43,Joh316/doctor-who,Java,
44,Zaqweli/DoctorWho,Java,
45,Kirashi0052/doctor-who,,
46,Rahul-Lal/whoisthedoctor,JavaScript,"# A starter webpack project for React

This is a starter project that uses webpack to transpile and bundle ES6 React code. To use, consider these steps:

* Fork this repo
* Rename your repo according to the app you're building

```sh
git clone https://github.com/[your-account]/[your-app].git
cd [your-app] && npm i
```

To start the development server with a watcher that rebuilds your code, run `npm run dev`. The assets built by webpack are placed in `server/public`. This folder is defined as a static folder in an Express.js server that can be started with `npm run server`.

Additional components should be placed in `client/components`.

## Separate client/server

The boilerplate is also set up to host the client using `webpack-dev-server` with hot module reloading etc. To use this method, in one terminal run:
```sh
npm run client
```
and in the other:
```sh
npm run server
```
The client will be available on http://localhost:8080 and the server on http://localhost:3000. Note that you will still need to manage CORS between the two, as they are on different ports.

"
47,priera85/DoctorWho,HTML,
48,omiq/arduino_sd_wav,Arduino,"# Arduino Playing Doctor Who Theme for 3D Printed Tardis using WAV Sound Samples off 4GB SD memory card
Playing Doctor Who theme on Arduino ( wav audio sound samples ) using SD memory card and speaker for my 3D printed Doctor Who Tardis (printed with Printrbot Simple Metal and Cube 3D)

**See it in action here:** 
Final 3D Printed Tardis in action:

![2015-08-12 19 05 35 mov-1](https://cloud.githubusercontent.com/assets/3143825/9259154/9630a52c-41bc-11e5-8fd7-30fc99dbd621.png)

**Video**
https://youtu.be/mt196EviHGM

**Breadboard:**
https://www.youtube.com/watch?v=qhXSU2_4724

![breadboard](https://github.com/omiq/arduino_sd_wav/blob/master/sd-audio_breadboard.png)

Optional: Add your LED to pin 3

Above is Arduino Uno - View the code for smaller Arduino pins

Requires https://github.com/TMRh20/TMRpcm/archive/master.zip

Get sound files from around the web but start here: http://www.bbc.co.uk/schools/teachers/doctorwhocompetition/sounds.shtml

Files must be WAV, 8-bit, 8-32khz Sample Rate, mono. Using iTunes:

> Click _> Edit > Preferences > Import Settings_
> Change the dropdown to _WAV Encoder_ and Setting: _Custom > 16.000kHz to 32kHz, 8-bit, Mono_
> Right click any file in iTunes, and select _""Create WAV Version""_


**3D Model** http://www.thingiverse.com/thing:124033


## Comments / Suggestions?

Chris Garrett
Twitter: http://twitter.com/makerhacks http://twitter.com/chrisgarrett
HTTP://MAKERHACKS.COM
"
49,anonymous033/DoctorWho,,"# DoctorWho
**DoctorWho** -  seminarski rad iz predmeta programske paradigme, na trecoj godini R smera, na Matematickom fakultetu.

Program ucenjem iz iskustva modeluje zakonitosti u podacima i na osnovu toga dijagnostikuje neke vrste malignih oboljenja.

Neophodne tehnologije:
1. Python
2. Biopython
3. Prolog

Autori:
* Maja Nesovic
* Kristina Todorovic
"
50,Didarrius/DoctorWho,,"# DoctorWho
"
51,RomanMiniv/DoctorWho,HTML,
52,eddidu/doctorWho,JavaScript,"doctorWho
=========

Interactive visualization of where doctors are located, geographically

### Requirements

- MongoDB filled with [Npi data ](http://download.cms.gov/nppes/NPI_Files.html)

### Todo

- Deal with overlapping markers
- Extend the search function(by name, by street address)
- Group similar specialties
- Use user location
- Update markers when map browsing
- New marker tooltip design
- Change alert to bootstrap modal
- Add dev mode, Watchify and Nodemon
- Improve accuracy of geolocation data

### Bugs

- Map resize failure(top menu gone)
- Screen refreshes when search is initiated by the enter key
"
53,fireaxil/DoctorWho,Java,
54,maxxfly/DoctorWho,Ruby,"# DoctorWho
Demo RoR
"
55,King-Pin/DoctorWho,,"DoctorWho
=========

A fun, fast-paced minigame based of the Doctor-Who TV series for Minecraft servers.
"
56,abduljama/DoctorWho,Java,
57,Nin1963/DoctorWho,Java,"# DoctorWho
"
58,EthanWGerard/DoctorWho,C#,"# DoctorWho
the purpose of this program is to open a txt file and parse information  about Doctor Who . you can select what doctor you want and it will display information about the doctor, and all the companion that were with them
"
59,nan0jingxuan/DoctorWho,JavaScript,
60,nikgaru/doctorWho,,
61,kaxuna1/doctorWho,Java,"---
tags: [spring-data, jpa, rest, hateoas]
projects: [spring-data-rest]
---
:spring_version: current
:spring_data_rest: current
:spring_data_jpa: current
:spring_data_commons: current
:spring_boot_version: 1.3.0.RELEASE
:Controller: http://docs.spring.io/spring/docs/{spring_version}/javadoc-api/org/springframework/stereotype/Controller.html
:DispatcherServlet: http://docs.spring.io/spring/docs/{spring_version}/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html
:SpringApplication: http://docs.spring.io/spring-boot/docs/{spring_boot_version}/api/org/springframework/boot/SpringApplication.html
:ResponseBody: http://docs.spring.io/spring/docs/{spring_version}/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html
:toc:
:icons: font
:source-highlighter: prettify
:project_id: gs-accessing-data-rest

This guide walks you through the process of creating an application that accesses relational JPA data through a link:/guides/gs/rest-hateoas[hypermedia-based] link:/understanding/REST[RESTful] front end.

== What you'll build

You'll build a Spring application that let's you create and retrieve `Person` objects stored in a database using Spring Data REST. Spring Data REST takes the features of http://projects.spring.io/spring-hateoas[Spring HATEOAS] and http://projects.spring.io/spring-data-jpa[Spring Data JPA] and combines them together automatically.

NOTE: Spring Data REST also supports link:/guides/gs/accessing-neo4j-data-rest[Spring Data Neo4j], link:/guides/gs/accessing-gemfire-data-rest[Spring Data Gemfire] and link:/guides/gs/accessing-mongodb-data-rest[Spring Data MongoDB] as backend data stores, but those are not part of this guide.

== What you'll need

:java_version: 1.8
include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/prereq_editor_jdk_buildtools.adoc[]

include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/how_to_complete_this_guide.adoc[]


include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/hide-show-gradle.adoc[]

include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/hide-show-maven.adoc[]

include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/hide-show-sts.adoc[]



[[initial]]
== Create a domain object

Create a new domain object to present a person.

`src/main/java/hello/Person.java`
[source,java]
----
include::complete/src/main/java/hello/Person.java[]
----

The `Person` has a first name and a last name. There is also an id object that is configured to be automatically generated so you don't have to deal with that.

== Create a Person repository

Next you need to create a simple repository.

`src/main/java/hello/PersonRepository.java`
[source,java]
----
include::complete/src/main/java/hello/PersonRepository.java[]
----

This repository is an interface and will allow you to perform various operations involving `Person` objects. It gets these operations by extending the http://docs.spring.io/spring-data/commons/docs/{spring_data_commons}/api/org/springframework/data/repository/PagingAndSortingRepository.html[PagingAndSortingRepository] interface defined in Spring Data Commons.

At runtime, Spring Data REST will create an implementation of this interface automatically. Then it will use the http://docs.spring.io/spring-data/rest/docs/{spring_data_rest}/api/org/springframework/data/rest/core/annotation/RepositoryRestResource.html[@RepositoryRestResource] annotation to direct Spring MVC to create RESTful endpoints at `/people`.

NOTE: `@RepositoryRestResource` is not required for a repository to be exported. It is only used to change the export details, such as using `/people` instead of the default value of `/persons`.

Here you have also defined a custom query to retrieve a list of `Person` objects based on the lastName. You'll see how to invoke it further down in this guide.

== Make the application executable

Although it is possible to package this service as a traditional link:/understanding/WAR[WAR] file for deployment to an external application server, the simpler approach demonstrated below creates a standalone application. You package everything in a single, executable JAR file, driven by a good old Java `main()` method. Along the way, you use Spring's support for embedding the link:/understanding/Tomcat[Tomcat] servlet container as the HTTP runtime, instead of deploying to an external instance.


`src/main/java/hello/Application.java`
[source,java]
----
include::complete/src/main/java/hello/Application.java[]
----

`@SpringBootApplication` is a convenience annotation that adds all of the following:
    
- `@Configuration` tags the class as a source of bean definitions for the application context.
- `@EnableAutoConfiguration` tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
- Normally you would add `@EnableWebMvc` for a Spring MVC app, but Spring Boot adds it automatically when it sees **spring-webmvc** on the classpath. This flags the application as a web application and activates key behaviors such as setting up a `DispatcherServlet`.
- `@ComponentScan` tells Spring to look for other components, configurations, and services in the the `hello` package, allowing it to find the `HelloController`.

The `main()` method uses Spring Boot's `SpringApplication.run()` method to launch an application. Did you notice that there wasn't a single line of XML? No **web.xml** file either. This web application is 100% pure Java and you didn't have to deal with configuring any plumbing or infrastructure.

Spring Boot automatically spins up Spring Data JPA to create a concrete implementation of the `PersonRepository` and configure it to talk to a back end in-memory database using JPA.

Spring Data REST is a Spring MVC application. The `@Import(RepositoryRestMvcConfiguration.class)` annotation imports a collection of Spring MVC controllers, JSON converters, and other beans needed to provide a RESTful front end. These components link up to the Spring Data JPA backend.


include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/build_an_executable_jar_subhead.adoc[]

include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/build_an_executable_jar_with_both.adoc[]


Logging output is displayed. The service should be up and running within a few seconds.


== Test the application

Now that the application is running, you can test it. You can use any REST client you wish. The following examples use the *nix tool `curl`.

First you want to see the top level service.

```
$ curl http://localhost:8080
{
  ""_links"" : {
    ""people"" : {
      ""href"" : ""http://localhost:8080/people{?page,size,sort}"",
      ""templated"" : true
    }
  }
}
```

Here you get a first glimpse of what this server has to offer. There is a **people** link located at http://localhost:8080/people. It has some options such as `?page`, `?size`, and `?sort`.

NOTE: Spring Data REST uses the http://stateless.co/hal_specification.html[HAL format] for JSON output. It is flexible and offers a convenient way to supply links adjacent to the data that is served.

```
$ curl http://localhost:8080/people
{
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/people{?page,size,sort}"",
      ""templated"" : true
    },
    ""search"" : {
      ""href"" : ""http://localhost:8080/people/search""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 0,
    ""totalPages"" : 0,
    ""number"" : 0
  }
}
```

There are currently no elements and hence no pages. Time to create a new `Person`!

```
$ curl -i -X POST -H ""Content-Type:application/json"" -d '{  ""firstName"" : ""Frodo"",  ""lastName"" : ""Baggins"" }' http://localhost:8080/people
HTTP/1.1 201 Created
Server: Apache-Coyote/1.1
Location: http://localhost:8080/people/1
Content-Length: 0
Date: Wed, 26 Feb 2014 20:26:55 GMT
```

- `-i` ensures you can see the response message including the headers. The URI of the newly created `Person` is shown
- `-X POST` signals this a POST used to create a new entry
- `-H ""Content-Type:application/json""` sets the content type so the application knows the payload contains a JSON object
- `-d '{  ""firstName"" : ""Frodo"",  ""lastName"" : ""Baggins"" }'` is the data being sent

NOTE: Notice how the previous `POST` operation includes a `Location` header. This contains the URI of the newly created resource. Spring Data REST also has two methods on `RepositoryRestConfiguration.setReturnBodyOnCreate(…)` and `setReturnBodyOnCreate(…)` which you can use to configure the framework to immediately return the representation of the resource just created.

From this you can query against for all people:

```
$ curl http://localhost:8080/people
{
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/people{?page,size,sort}"",
      ""templated"" : true
    },
    ""search"" : {
      ""href"" : ""http://localhost:8080/people/search""
    }
  },
  ""_embedded"" : {
    ""persons"" : [ {
      ""firstName"" : ""Frodo"",
      ""lastName"" : ""Baggins"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/people/1""
        }
      }
    } ]
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 1,
    ""totalPages"" : 1,
    ""number"" : 0
  }
}
```

The **persons** object contains a list with Frodo. Notice how it includes a **self** link. Spring Data REST also uses http://www.atteo.org/2011/12/12/Evo-Inflector.html[Evo Inflector] to pluralize the name of the entity for groupings.

You can query directly for the individual record:

```
$ curl http://localhost:8080/people/1
{
  ""firstName"" : ""Frodo"",
  ""lastName"" : ""Baggins"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/people/1""
    }
  }
}
```

NOTE: This might appear to be purely web based, but behind the scenes, there is an H2 relational database. In production, you would probably use a real one, like PostgreSQL.

In this guide, there is only one domain object. With a more complex system where domain objects are related to each other, Spring Data REST will render additional links to help navigate to connected records.

Find all the custom queries:

```
$ curl http://localhost:8080/people/search
{
  ""_links"" : {
    ""findByLastName"" : {
      ""href"" : ""http://localhost:8080/people/search/findByLastName{?name}"",
      ""templated"" : true
    }
  }
}
```

You can see the URL for the query including the HTTP query parameter `name`. If you'll notice, this matches the `@Param(""name"")` annotation embedded in the interface.

To use the `findByLastName` query, do this:

```
$ curl http://localhost:8080/people/search/findByLastName?name=Baggins
{
  ""_embedded"" : {
    ""persons"" : [ {
      ""firstName"" : ""Frodo"",
      ""lastName"" : ""Baggins"",
      ""_links"" : {
        ""self"" : {
          ""href"" : ""http://localhost:8080/people/1""
        }
      }
    } ]
  }
}
```

Because you defined it to return `List<Person` in the code, it will return all of the results. If you had defined it only return `Person`, it will pick one of the Person objects to return. Since this can be unpredictable, you probably don't want to do that for queries that can return multiple entries.

You can also issue PUT, PATCH, and DELETE REST calls to either replace, update, or delete existing records.

```
$ curl -X PUT -H ""Content-Type:application/json"" -d '{ ""firstName"": ""Bilbo"", ""lastName"": ""Baggins"" }' http://localhost:8080/people/1
$ curl http://localhost:8080/people/1
{
  ""firstName"" : ""Bilbo"",
  ""lastName"" : ""Baggins"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/people/1""
    }
  }
}
```

```
$ curl -X PATCH -H ""Content-Type:application/json"" -d '{ ""firstName"": ""Bilbo Jr."" }' http://localhost:8080/people/1
$ curl http://localhost:8080/people/1
{
  ""firstName"" : ""Bilbo Jr."",
  ""lastName"" : ""Baggins"",
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/people/1""
    }
  }
}
```

NOTE: PUT replaces an entire record. Fields not supplied will be replaced with null. PATCH can be used to update a subset of items.

You can delete records:

```
$ curl -X DELETE http://localhost:8080/people/1
$ curl http://localhost:8080/people
{
  ""_links"" : {
    ""self"" : {
      ""href"" : ""http://localhost:8080/people{?page,size,sort}"",
      ""templated"" : true
    },
    ""search"" : {
      ""href"" : ""http://localhost:8080/people/search""
    }
  },
  ""page"" : {
    ""size"" : 20,
    ""totalElements"" : 0,
    ""totalPages"" : 0,
    ""number"" : 0
  }
}
```

A very convenient aspect of this link:/understanding/HATEOAS[hypermedia-driven interface] is how you can discover all the RESTful endpoints using curl (or whatever REST client you are using). There is no need to exchange a formal contract or interface document with your customers.

== Summary

Congratulations! You've just developed an application with a link:/guides/gs/rest-hateoas[hypermedia-based] link:/understanding/REST[RESTful] front end and a JPA-based back end.



include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/master/footer.adoc[]

"
62,Tamer-Assaliya/DoctorWho,TSQL,# DoctorWho
63,guimaraeskellen/DoctorWho,Kotlin,"# DoctorWho
"
64,areejimair/DoctorWho_,C#,
65,rocketboy376/DoctorWho,Java,
66,jesstoh/DoctorWho,JavaScript,"# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
"
67,DanNimara/DoctorWho,HTML,
68,MichelleBindel/WhoIsWhoOnDoctorWho,R,"# WhoIsWhoOnDoctorWho
DHProject Doctor Who Social Network Analysis

**Project idea:** 
Take a look on characters spanning different doctors, finding the most important/popular characters based on episode ratings and number of occurances/talks to the corresponding doctor. 

**Dataset:**
https://www.kaggle.com/jeanmidev/doctor-who
"
69,dzenjadu/DoctorWho,JavaScript,"# DoctorWho
yarn -> yarn start
"
70,pokojt/doctorWho,HTML,
71,mywebsites-aj/mywebsites-aj.github.io,HTML,"### Hi there 👋

<!--
**mywebsites-aj/mywebsites-aj** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile.

Here are some ideas to get you started:

- 🔭 I’m currently working on ...
- 🌱 I’m currently learning ...
- 👯 I’m looking to collaborate on ...
- 🤔 I’m looking for help with ...
- 💬 Ask me about ...
- 📫 How to reach me: ...
- 😄 Pronouns: ...
- ⚡ Fun fact: ...
-->
"
72,doctor11/doc,,"doc
===

Doctor Who
"
73,elena1905/DoctorWho,C#,"DoctorWho
=========

Games Engines 2 Assignment: 3D Steering Behaviours, Particle Effects, Simple CG etc."
74,EddyAtPessac/DoctorWho,Java,"# DoctorWho
"
75,faboo/whogame,JavaScript,
76,ShkSalmanAhmad/DoctorWho,C#,"# DoctorWho
Doctor Who is a long-running BBC television show that is unique in that the main character of The Doctor is periodically replaced by a different actor. In the show's 50+ years of history, there have been twelve (soon to be thirteen) actors to have played the title role. Over the years, The Doctor has taken on many companions who accompany him on his journeys through time and space.
 
Write a Windows Form App (.NET Framework) that:


    Makes use of a GUI interface that has menu options
    The File=>Open menu option displays an OpenFileDialog to allow the user to select a valid txt file
    Makes use of the OpenFileDialog.Filter property to allow only txt files to be selected
    Reads this data file containing three different record types, preceeded by a ""D"", ""C"", or ""E""
        A ""D"" record refers to information about one of the Doctors
        A ""C"" record refers to information about one of the Companions
        An ""E"" record refers to information about one of the Episodes
    Uses three generic List<T> collections to store each of the three record types, using the Doctor, Companion, or Episode classes
    The left GroupBox contains a ComboBox that is loaded when the file is read
    The left GroupBox contains information pertaining to whichever Doctor has been selected in the ComboBox
    The right GroupBox contains a ListBox with each of the companions that has traveled with the selected Doctor
    The Doctor, Companion and Episode classes only need to have properties and a constructor, but you will need to analyze the data file to determine which fields each requires
    Notice that the Doctor and Companion records only have a StoryID, so you will need to use the appropriate LINQ statements to be able to match up the appropriate story Title
    You may NOT alter the provided data file in any way
"
77,JuliBilto/doctor-who-css-2,,
78,Smurfe/Doctor-Who,,"# Doctor-Who
"
79,Cloudash/Doctor-Who,HTML,
80,BridgetVioletAvila/Doctor-Who,HTML,
81,dxa4481/theDoctorWithoutBoardersIsIn,Python,"theDoctorWithoutBoardersIsIn
============================

This application is intended to use a wifi module to sniff for mac addresses. It takes this data as well as user input of who is nearby to use machine learning to determine which mac address belongs to which user, and eventually just tell you who is near you at any given time.
"
82,WhoCraft/WhoCosmetics,Java,
83,Bunnbuns/Doctor-Who,HTML,"# Doctor-Who
Browser for Doctor Who (2005+)
"
84,cerita/doctor-who,HTML,
85,2048online/Doctor-Who,HTML,
86,haseren4/DoctorWhoInvasionoftheDaleks,Batchfile,
87,Stefanmikulic/DoctorWhoTestMod,,"# DoctorWhoTestMod
"
88,trevorKirkby/doctorWhoGame,,"doctorWhoGame
=============

This is a doctor who themed pygame based program. Most of the rules are explained by the program itself. There are currently only two map setups. These include detonating objects, falling crates, gates that open and close, teleporters, daleks, weeping angels, silence and members of their order, and cybermen.
"
89,charlottebrf/DoctorsWhoCode,JavaScript,
90,RunYouCleverBoy/DoctorWhoEpisodePicker,HTML,"# DoctorWhoEpisodePicker
This project is there for educational reasons. It is an exercise for teaching HTML/JS fundaments in a fun way.
Also, when teaching how to code, it is most important to emphasize the value of order. That is, using source control, to begin with.
The roadmap should include tags and branches for every stage of learning.
"
91,aurelieclavier/doctorWhoRoot,Java,
92,matthewmmorrow/DoctorWhoLARP,Lua,"[![CC BY-SA 4.0][cc-by-sa-shield]][cc-by-sa]
# Introduction

Welcome! This is a Doctor Who themed LARP that was put on for a birthday party. One special person is ""The Doctor"" and the others are ""The Companions"". It challenges the participants to solve some tricky puzzles, work together, fix the TARDIS and pilot a spacheship. Wow, that's just like in the show!

# Overview
## Setting
The Doctor and Companions gather in TARDIS. After a brief introduction, they land on the interior cargo bay of a recently abandoned spaceship in the year 2719. The TARDIS, detecting danger, dematerializes away. They must find out what happened, and find a way to get the TARDIS back.

## Puzzles
### Water Jug Puzzle
A classic make-X-amount-of-water puzzle.

### Security Access Panel
A timed excercise in communication.

### Combination Lock Code
Find the combination. The answer was with you all along.

### Wiring Problem
Can you arrange different lengths of wires and plugs to get the TARDIS working again?

## Space Ship Simulator
The middle scene of the game is a space ship simulator, using a custom written mission for the bridge simulator EmptyEpsilon. This can be performed with 3-8 players and needs computers for each. 

# Contents
* [Script](SCRIPT.md) ([PDF](Script.pdf)) - The best description of the LARP, what to say and do
* [Setup](SETUP.md) - How to set up each room and the materials needed
* [Printables](Printables.pdf) - A few things to print to add to the setting
* [Sounds](Sounds) - Sound files to play

# Software
This is the software used during this project. Not all of it is needed to run the LARP. Feel free to use newer versions but the EmptyEpsilon mission was specifically designed for version `2019.01.19` and may not run on new versions.

* **[EmptyEpsilon 2019.01.19](https://github.com/daid/EmptyEpsilon/releases/download/EE-2019.11.01/Win32_EmptyEpsilon_EE-2019.11.01.zip)** - The only necessary software to install. Used for playing a custom mission on the bridge. *Android versions don't work well*
* [SciFiCode](https://github.com/matthewmmorrow/SciFiCode) - A custom website for the access panels.
* [Inkscape 0.92.4](https://inkscape.org/release/0.92.4/windows/) - Used for editing the invitation SVG files.
* [Reaper v5978](https://www.reaper.fm/download.php) - Used for a Dalek voice effect for video call. *The software has a 60 day trial so plan accordingly*
* [VBCABLE Driver Pack 43](https://download.vb-audio.com/Download_CABLE/VBCABLE_Driver_Pack43.zip) - Allows Reaper to be used in a video call.
* [Webcamoid 8.6.1](https://webcamoid.github.io/#downloads) - Used for a Dalek video call. Allows a video to be played as a webcam.
* [Skype](https://www.skype.com/en/get-skype/) - Used for the Dalek video call. Use whatever video software you are comfortable with.
* [Blender 2.79b](https://www.blender.org/download/releases/2-79/) - Used for editing the models for the mission. Not typically needed.


# License
All original content in this work is licensed under a
[Creative Commons Attribution-ShareAlike 4.0 International License][cc-by-sa]. Derived content is subject to it's source license.

[![CC BY-SA 4.0][cc-by-sa-image]][cc-by-sa]

[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/
[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png
[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg
"
93,MatthewaHamlet/doctorWhoDiceGame,JavaScript,"# doctorWhoDiceGame
Dice game with Doctor who theme
"
94,Stefanmikulic/DoctorWhoTestMod,,"# DoctorWhoTestMod
"
95,DoctorWhoFR/DoctorWhoFR,,"# 😎 4Azgin
<img src=""https://media.giphy.com/media/4A1ySuQE9tfFIv2bEY/giphy.gif"">

<a href=""https://www.codewars.com/users/DoctorWhoFR/""><img src=""https://www.codewars.com/users/DoctorWhoFR/badges/large""></a>

Welcome to my GitHub profile, my name is Maxime but you can call me Dr.azgin. 
I'm a programmer who likes to make computer programs, algorithms and also websites and backends, including API programming.

I also have many projects in cloud structures, powered by linode and aws.
I am also a first user of Amazon WebService and also GoogleCloud and FireBase.

I'm a big fan of a Native Application coded in JS NodeJS. 
I love the fact that NodeJS is an international language and you can see it with my web and mobile applications.

I'm an independent R&D user, which is great, I love my computer skills and I've also taken steps to improve myself.          
I am very open about my work, I often post updates in the comments and also on LinkedIn.         

I am open to suggestions for new projects to start.     


# FOR HIRING:

- I'm currently the creator of a small team of great tech dev, we are currently open to any discussion at my custom email: contact@spincorps.com

# Me:

""We all change, when you think about it. We’re all different people all through our lives. And that’s OK, that’s good, you gotta keep moving, so long as you remember all the people that you used to be."" (11th Doctor)

  - NodeJS [🟢🟢🟢🟢🟢] | Certification WebMaster NodeJS - (Université du Michigan)
  - Python [🟢🟢🟢🟢🟢] | Certification PythonMaster - (Université du Michigan)
  - Java, C#  [🟢🟢🟢🟢] 
  - Django [🟢🟢🟢]
  - React/ReactJs, Angular, VueJS [🟢🟢🟢🟢] 
  - HTML, CSS, JS, JQUERY [🟢🟢🟢🟢] 
  - SQL, POSTEGRE, MYSQL [🟢🟢🟢🟢🟢] 
  - DevOps [🟢🟢🟢🟢🟢]
  - Cloud management 🟢🟢🟢🟢🟢
  - Linux and System 🟢🟢🟢🟢🟢

# 🥰 Good to now:

  - I'm a big fan of DoctorWho
  - I love talking about tech and space !
  - I'm a good speaker 

## Contact: 

**Discord:** Docteur#5670

**Email Perso:** max.benamara@gmail.com

**Email Pro:** maxime_benamara@spincorps.com

"
96,staygolder/doctor-who-css,,
97,charlottebrf/DoctorsWhoCode,JavaScript,
98,Hiba-alkurd/DoctorWhoCore,C#,
99,chaos2007/doctorWhoTime,C,"# doctorWhoTime
"
100,Quacky2200/DoctorWho-AdventureGame,Python,
101,vincentGuegan/DoctorWhoProject,Java,"# DoctorWhoProject

**SPRING Démarrage**

Créer quelques routes à l'aide d'un contrôleur :

Crée un projet Spring, et transforme l'application en contrôleur.
Choisis 4 personnes qui ont incarné le personnage du Docteur (voir ici pour la liste complète).
Pour chacune des 4 incarnations que tu as choisies, crée une route /doctor/<numéro> qui retourne le nom correspondant au numéro.

**Par exemple :**

pour l'url /doctor/1 : la méthode retourne ""William Hartnell"".
pour l'url /doctor/10 : la méthode retourne ""David Tennant"".
pour l'url /doctor/13 : la méthode retourne ""Jodie Whittaker"".
la racine / renvoie une liste des urls pour lesquelles tu as fourni des mappings, sous forme de liens HTML -- pense aux balises <ul> et <li> pour contenir tes balises <a>.
Pousse le contenu de ton projet dans un dépôt GitHub et poste le lien de ton dépôt en guise de solution.

**Critères de validation**

Le contrôleur contient 5 routes.
Les 4 premières routes retournent le nom d'une incarnation mappé sur son numéro.
La racine retourne les liens vers les autres mappings.
"
102,FireShootSK/DoctorWhoSound,,"DoctorWhoSound
==============
"
103,MatthewaHamlet/doctorWhoDiceGame,JavaScript,"# doctorWhoDiceGame
Dice game with Doctor who theme
"
104,romulobr/doctor-who-guide-android,Java,"doctor-who-guide-android
========================

To compile the project, you need to install android jars on your local mvn repository, I use use this little thing to help me do that in an easy fashion:

https://github.com/mosabua/maven-android-sdk-deployer

To run the unit tests:
mvn clean install test -Dandroid.sdk.path=$ANDROID_HOME

Doctor who guide is an android-app to help me learn android development with TDD and some other good practices.

I love doctor who, and I love coding, so why not put these things together."
105,ChristineMOBrien/Doctor-Who-Website,,
106,dabdulmyanov-zz/doctor-who-css,,
107,alysekassa/doctor-who-css,,
108,Maurice8750/Witch-Doctor,,"# Witch-Doctor
who?
"
109,Yalonso522/Doctor-Who-Session-02,,
110,Yalonso522/doctor-who-css,,
111,i4mthorish/Doctor-Who-Comic,,
112,giorgi616/doctor-who-fan,HTML,
113,sandra023/Doctor-Who-Pacman,JavaScript,"# Game1
Doctor Who Pacman 
"
114,mollytb/DoctorWhoNoDoubleClick,JavaScript,"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).

Below you will find some information on how to perform common tasks.<br>
You can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).

## Table of Contents

- [Updating to New Releases](#updating-to-new-releases)
- [Sending Feedback](#sending-feedback)
- [Folder Structure](#folder-structure)
- [Available Scripts](#available-scripts)
  - [npm start](#npm-start)
  - [npm test](#npm-test)
  - [npm run build](#npm-run-build)
  - [npm run eject](#npm-run-eject)
- [Supported Browsers](#supported-browsers)
- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)
- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)
- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)
- [Debugging in the Editor](#debugging-in-the-editor)
- [Formatting Code Automatically](#formatting-code-automatically)
- [Changing the Page `<title>`](#changing-the-page-title)
- [Installing a Dependency](#installing-a-dependency)
- [Importing a Component](#importing-a-component)
- [Code Splitting](#code-splitting)
- [Adding a Stylesheet](#adding-a-stylesheet)
- [Post-Processing CSS](#post-processing-css)
- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)
- [Adding Images, Fonts, and Files](#adding-images-fonts-and-files)
- [Using the `public` Folder](#using-the-public-folder)
  - [Changing the HTML](#changing-the-html)
  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)
  - [When to Use the `public` Folder](#when-to-use-the-public-folder)
- [Using Global Variables](#using-global-variables)
- [Adding Bootstrap](#adding-bootstrap)
  - [Using a Custom Theme](#using-a-custom-theme)
- [Adding Flow](#adding-flow)
- [Adding a Router](#adding-a-router)
- [Adding Custom Environment Variables](#adding-custom-environment-variables)
  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)
  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)
  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)
- [Can I Use Decorators?](#can-i-use-decorators)
- [Fetching Data with AJAX Requests](#fetching-data-with-ajax-requests)
- [Integrating with an API Backend](#integrating-with-an-api-backend)
  - [Node](#node)
  - [Ruby on Rails](#ruby-on-rails)
- [Proxying API Requests in Development](#proxying-api-requests-in-development)
  - [""Invalid Host Header"" Errors After Configuring Proxy](#invalid-host-header-errors-after-configuring-proxy)
  - [Configuring the Proxy Manually](#configuring-the-proxy-manually)
  - [Configuring a WebSocket Proxy](#configuring-a-websocket-proxy)
- [Using HTTPS in Development](#using-https-in-development)
- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)
- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)
- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)
- [Running Tests](#running-tests)
  - [Filename Conventions](#filename-conventions)
  - [Command Line Interface](#command-line-interface)
  - [Version Control Integration](#version-control-integration)
  - [Writing Tests](#writing-tests)
  - [Testing Components](#testing-components)
  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)
  - [Initializing Test Environment](#initializing-test-environment)
  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)
  - [Coverage Reporting](#coverage-reporting)
  - [Continuous Integration](#continuous-integration)
  - [Disabling jsdom](#disabling-jsdom)
  - [Snapshot Testing](#snapshot-testing)
  - [Editor Integration](#editor-integration)
- [Debugging Tests](#debugging-tests)
  - [Debugging Tests in Chrome](#debugging-tests-in-chrome)
  - [Debugging Tests in Visual Studio Code](#debugging-tests-in-visual-studio-code)
- [Developing Components in Isolation](#developing-components-in-isolation)
  - [Getting Started with Storybook](#getting-started-with-storybook)
  - [Getting Started with Styleguidist](#getting-started-with-styleguidist)
- [Publishing Components to npm](#publishing-components-to-npm)
- [Making a Progressive Web App](#making-a-progressive-web-app)
  - [Opting Out of Caching](#opting-out-of-caching)
  - [Offline-First Considerations](#offline-first-considerations)
  - [Progressive Web App Metadata](#progressive-web-app-metadata)
- [Analyzing the Bundle Size](#analyzing-the-bundle-size)
- [Deployment](#deployment)
  - [Static Server](#static-server)
  - [Other Solutions](#other-solutions)
  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)
  - [Building for Relative Paths](#building-for-relative-paths)
  - [Azure](#azure)
  - [Firebase](#firebase)
  - [GitHub Pages](#github-pages)
  - [Heroku](#heroku)
  - [Netlify](#netlify)
  - [Now](#now)
  - [S3 and CloudFront](#s3-and-cloudfront)
  - [Surge](#surge)
- [Advanced Configuration](#advanced-configuration)
- [Troubleshooting](#troubleshooting)
  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)
  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)
  - [`npm run build` exits too early](#npm-run-build-exits-too-early)
  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)
  - [`npm run build` fails to minify](#npm-run-build-fails-to-minify)
  - [Moment.js locales are missing](#momentjs-locales-are-missing)
- [Alternatives to Ejecting](#alternatives-to-ejecting)
- [Something Missing?](#something-missing)

## Updating to New Releases

Create React App is divided into two packages:

* `create-react-app` is a global command-line utility that you use to create new projects.
* `react-scripts` is a development dependency in the generated projects (including this one).

You almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.

When you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.

To update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.

In most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.

We commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.

## Sending Feedback

We are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).

## Folder Structure

After creation, your project should look like this:

```
my-app/
  README.md
  node_modules/
  package.json
  public/
    index.html
    favicon.ico
  src/
    App.css
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
```

For the project to build, **these files must exist with exact filenames**:

* `public/index.html` is the page template;
* `src/index.js` is the JavaScript entry point.

You can delete or rename the other files.

You may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>
You need to **put any JS and CSS files inside `src`**, otherwise Webpack won’t see them.

Only files inside `public` can be used from `public/index.html`.<br>
Read instructions below for using assets from JavaScript and HTML.

You can, however, create more top-level directories.<br>
They will not be included in the production build so you can use them for things like documentation.

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br>
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br>
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br>
See the section about [running tests](#running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br>
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br>
Your app is ready to be deployed!

See the section about [deployment](#deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Supported Browsers

By default, the generated project uses the latest version of React.

You can refer [to the React documentation](https://reactjs.org/docs/react-dom.html#browser-support) for more information about supported browsers.

## Supported Language Features and Polyfills

This project supports a superset of the latest JavaScript standard.<br>
In addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:

* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).
* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).
* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).
* [Dynamic import()](https://github.com/tc39/proposal-dynamic-import) (stage 3 proposal)
* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (part of stage 3 proposal).
* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.

Learn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).

While we recommend using experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.

Note that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:

* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).
* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).
* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).

If you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.

Also note that using some newer syntax features like `for...of` or `[...nonArrayValue]` causes Babel to emit code that depends on ES6 runtime features and might not work without a polyfill. When in doubt, use [Babel REPL](https://babeljs.io/repl/) to see what any specific syntax compiles down to.

## Syntax Highlighting in the Editor

To configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.

## Displaying Lint Output in the Editor

>Note: this feature is available with `react-scripts@0.2.0` and higher.<br>
>It also only works with npm 3 or higher.

Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.

They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.

You would need to install an ESLint plugin for your editor first. Then, add a file called `.eslintrc` to the project root:

```js
{
  ""extends"": ""react-app""
}
```

Now your editor should report the linting warnings.

Note that even if you edit your `.eslintrc` file further, these changes will **only affect the editor integration**. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes.

If you want to enforce a coding style for your project, consider using [Prettier](https://github.com/jlongster/prettier) instead of ESLint style rules.

## Debugging in the Editor

**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) and [WebStorm](https://www.jetbrains.com/webstorm/).**

Visual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.

### Visual Studio Code

You would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.

Then add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.

```json
{
  ""version"": ""0.2.0"",
  ""configurations"": [{
    ""name"": ""Chrome"",
    ""type"": ""chrome"",
    ""request"": ""launch"",
    ""url"": ""http://localhost:3000"",
    ""webRoot"": ""${workspaceRoot}/src"",
    ""sourceMapPathOverrides"": {
      ""webpack:///src/*"": ""${webRoot}/*""
    }
  }]
}
```
>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).

Start your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.

Having problems with VS Code Debugging? Please see their [troubleshooting guide](https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md#troubleshooting).

### WebStorm

You would need to have [WebStorm](https://www.jetbrains.com/webstorm/) and [JetBrains IDE Support](https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji) Chrome extension installed.

In the WebStorm menu `Run` select `Edit Configurations...`. Then click `+` and select `JavaScript Debug`. Paste `http://localhost:3000` into the URL field and save the configuration.

>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).

Start your app by running `npm start`, then press `^D` on macOS or `F9` on Windows and Linux or click the green debug icon to start debugging in WebStorm.

The same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine. 

## Formatting Code Automatically

Prettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the [Prettier's GitHub page](https://github.com/prettier/prettier) for more information, and look at this [page to see it in action](https://prettier.github.io/prettier/).

To format our code whenever we make a commit in git, we need to install the following dependencies:

```sh
npm install --save husky lint-staged prettier
```

Alternatively you may use `yarn`:

```sh
yarn add husky lint-staged prettier
```

* `husky` makes it easy to use githooks as if they are npm scripts.
* `lint-staged` allows us to run scripts on staged files in git. See this [blog post about lint-staged to learn more about it](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8).
* `prettier` is the JavaScript formatter we will run before commits.

Now we can make sure every file is formatted correctly by adding a few lines to the `package.json` in the project root.

Add the following line to `scripts` section:

```diff
  ""scripts"": {
+   ""precommit"": ""lint-staged"",
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
```

Next we add a 'lint-staged' field to the `package.json`, for example:

```diff
  ""dependencies"": {
    // ...
  },
+ ""lint-staged"": {
+   ""src/**/*.{js,jsx,json,css}"": [
+     ""prettier --single-quote --write"",
+     ""git add""
+   ]
+ },
  ""scripts"": {
```

Now, whenever you make a commit, Prettier will format the changed files automatically. You can also run `./node_modules/.bin/prettier --single-quote --write ""src/**/*.{js,jsx,json,css}""` to format your entire project for the first time.

Next you might want to integrate Prettier in your favorite editor. Read the section on [Editor Integration](https://prettier.io/docs/en/editors.html) on the Prettier GitHub page.

## Changing the Page `<title>`

You can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.

Note that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.

If you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.

If you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).

## Installing a Dependency

The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:

```sh
npm install --save react-router
```

Alternatively you may use `yarn`:

```sh
yarn add react-router
```

This works for any library, not just `react-router`.

## Importing a Component

This project setup supports ES6 modules thanks to Babel.<br>
While you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.

For example:

### `Button.js`

```js
import React, { Component } from 'react';

class Button extends Component {
  render() {
    // ...
  }
}

export default Button; // Don’t forget to use export default!
```

### `DangerButton.js`


```js
import React, { Component } from 'react';
import Button from './Button'; // Import a component from another file

class DangerButton extends Component {
  render() {
    return <Button color=""red"" />;
  }
}

export default DangerButton;
```

Be aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.

We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.

Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.

Learn more about ES6 modules:

* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)
* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)
* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)

## Code Splitting

Instead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand.

This project setup supports code splitting via [dynamic `import()`](http://2ality.com/2017/01/import-operator.html#loading-code-on-demand). Its [proposal](https://github.com/tc39/proposal-dynamic-import) is in stage 3. The `import()` function-like form takes the module name as an argument and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which always resolves to the namespace object of the module.

Here is an example:

### `moduleA.js`

```js
const moduleA = 'Hello';

export { moduleA };
```
### `App.js`

```js
import React, { Component } from 'react';

class App extends Component {
  handleClick = () => {
    import('./moduleA')
      .then(({ moduleA }) => {
        // Use moduleA
      })
      .catch(err => {
        // Handle failure
      });
  };

  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Load</button>
      </div>
    );
  }
}

export default App;
```

This will make `moduleA.js` and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button.

You can also use it with `async` / `await` syntax if you prefer it.

### With React Router

If you are using React Router check out [this tutorial](http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html) on how to use code splitting with it. You can find the companion GitHub repository [here](https://github.com/AnomalyInnovations/serverless-stack-demo-client/tree/code-splitting-in-create-react-app).

Also check out the [Code Splitting](https://reactjs.org/docs/code-splitting.html) section in React documentation.

## Adding a Stylesheet

This project setup uses [Webpack](https://webpack.js.org/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:

### `Button.css`

```css
.Button {
  padding: 20px;
}
```

### `Button.js`

```js
import React, { Component } from 'react';
import './Button.css'; // Tell Webpack that Button.js uses these styles

class Button extends Component {
  render() {
    // You can use them as regular CSS styles
    return <div className=""Button"" />;
  }
}
```

**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.

In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.

If you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.

## Post-Processing CSS

This project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.

For example, this:

```css
.App {
  display: flex;
  flex-direction: row;
  align-items: center;
}
```

becomes this:

```css
.App {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}
```

If you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).

## Adding a CSS Preprocessor (Sass, Less etc.)

Generally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).

Following this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.

First, let’s install the command-line interface for Sass:

```sh
npm install --save node-sass-chokidar
```

Alternatively you may use `yarn`:

```sh
yarn add node-sass-chokidar
```

Then in `package.json`, add the following lines to `scripts`:

```diff
   ""scripts"": {
+    ""build-css"": ""node-sass-chokidar src/ -o src/"",
+    ""watch-css"": ""npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive"",
     ""start"": ""react-scripts start"",
     ""build"": ""react-scripts build"",
     ""test"": ""react-scripts test --env=jsdom"",
```

>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.

Now you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.

To share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import ""./shared.scss"";` with variable definitions.

To enable importing files without using relative paths, you can add the  `--include-path` option to the command in `package.json`.

```
""build-css"": ""node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/"",
""watch-css"": ""npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive"",
```

This will allow you to do imports like

```scss
@import 'styles/_colors.scss'; // assuming a styles directory under src/
@import 'nprogress/nprogress'; // importing a css file from the nprogress node module
```

At this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.

As a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:

```sh
npm install --save npm-run-all
```

Alternatively you may use `yarn`:

```sh
yarn add npm-run-all
```

Then we can change `start` and `build` scripts to include the CSS preprocessor commands:

```diff
   ""scripts"": {
     ""build-css"": ""node-sass-chokidar src/ -o src/"",
     ""watch-css"": ""npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive"",
-    ""start"": ""react-scripts start"",
-    ""build"": ""react-scripts build"",
+    ""start-js"": ""react-scripts start"",
+    ""start"": ""npm-run-all -p watch-css start-js"",
+    ""build-js"": ""react-scripts build"",
+    ""build"": ""npm-run-all build-css build-js"",
     ""test"": ""react-scripts test --env=jsdom"",
     ""eject"": ""react-scripts eject""
   }
```

Now running `npm start` and `npm run build` also builds Sass files.

**Why `node-sass-chokidar`?**

`node-sass` has been reported as having the following issues:

- `node-sass --watch` has been reported to have *performance issues* in certain conditions when used in a virtual machine or with docker.

- Infinite styles compiling [#1939](https://github.com/facebookincubator/create-react-app/issues/1939)

- `node-sass` has been reported as having issues with detecting new files in a directory [#1891](https://github.com/sass/node-sass/issues/1891)

 `node-sass-chokidar` is used here as it addresses these issues.

## Adding Images, Fonts, and Files

With Webpack, using static assets like images and fonts works similarly to CSS.

You can **`import` a file right in a JavaScript module**. This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the `src` attribute of an image or the `href` of a link to a PDF.

To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a [data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to [#1153](https://github.com/facebookincubator/create-react-app/issues/1153).

Here is an example:

```js
import React from 'react';
import logo from './logo.png'; // Tell Webpack this JS file uses this image

console.log(logo); // /logo.84287d09.png

function Header() {
  // Import result is the URL of your image
  return <img src={logo} alt=""Logo"" />;
}

export default Header;
```

This ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.

This works in CSS too:

```css
.Logo {
  background-image: url(./logo.png);
}
```

Webpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.

Please be advised that this is also a custom feature of Webpack.

**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>
An alternative way of handling static assets is described in the next section.

## Using the `public` Folder

>Note: this feature is available with `react-scripts@0.5.0` and higher.

### Changing the HTML

The `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).
The `<script>` tag with the compiled code will be added to it automatically during the build process.

### Adding Assets Outside of the Module System

You can also add other assets to the `public` folder.

Note that we normally encourage you to `import` assets in JavaScript files instead.
For example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-fonts-and-files).
This mechanism provides a number of benefits:

* Scripts and stylesheets get minified and bundled together to avoid extra network requests.
* Missing files cause compilation errors instead of 404 errors for your users.
* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.

However there is an **escape hatch** that you can use to add an asset outside of the module system.

If you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.

Inside `index.html`, you can use it like this:

```html
<link rel=""shortcut icon"" href=""%PUBLIC_URL%/favicon.ico"">
```

Only files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.

When you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.

In JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:

```js
render() {
  // Note: this is an escape hatch and should be used sparingly!
  // Normally we recommend using `import` for getting asset URLs
  // as described in “Adding Images and Fonts” above this section.
  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;
}
```

Keep in mind the downsides of this approach:

* None of the files in `public` folder get post-processed or minified.
* Missing files will not be called at compilation time, and will cause 404 errors for your users.
* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.

### When to Use the `public` Folder

Normally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-fonts-and-files) from JavaScript.
The `public` folder is useful as a workaround for a number of less common cases:

* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).
* You have thousands of images and need to dynamically reference their paths.
* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.
* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.

Note that if you add a `<script>` that declares global variables, you also need to read the next section on using them.

## Using Global Variables

When you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.

You can avoid this by reading the global variable explicitly from the `window` object, for example:

```js
const $ = window.$;
```

This makes it obvious you are using a global variable intentionally rather than because of a typo.

Alternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.

## Adding Bootstrap

You don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:

Install React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:

```sh
npm install --save react-bootstrap bootstrap@3
```

Alternatively you may use `yarn`:

```sh
yarn add react-bootstrap bootstrap@3
```

Import Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:

```js
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap/dist/css/bootstrap-theme.css';
// Put any other imports below so that CSS from your
// components takes precedence over default styles.
```

Import required React Bootstrap components within ```src/App.js``` file or your custom component files:

```js
import { Navbar, Jumbotron, Button } from 'react-bootstrap';
```

Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.

### Using a Custom Theme

Sometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>
We suggest the following approach:

* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.
* Add the necessary build steps to tweak the theme, and publish your package on npm.
* Install your own theme npm package as a dependency of your app.

Here is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.

## Adding Flow

Flow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.

Recent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.

To add Flow to a Create React App project, follow these steps:

1. Run `npm install --save flow-bin` (or `yarn add flow-bin`).
2. Add `""flow"": ""flow""` to the `scripts` section of your `package.json`.
3. Run `npm run flow init` (or `yarn flow init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.
4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).

Now you can run `npm run flow` (or `yarn flow`) to check the files for type errors.
You can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.
In the future we plan to integrate it into Create React App even more closely.

To learn more about Flow, check out [its documentation](https://flowtype.org/).

## Adding a Router

Create React App doesn't prescribe a specific routing solution, but [React Router](https://reacttraining.com/react-router/) is the most popular one.

To add it, run:

```sh
npm install --save react-router-dom
```

Alternatively you may use `yarn`:

```sh
yarn add react-router-dom
```

To try it, delete all the code in `src/App.js` and replace it with any of the examples on its website. The [Basic Example](https://reacttraining.com/react-router/web/example/basic) is a good place to get started.

Note that [you may need to configure your production server to support client-side routing](#serving-apps-with-client-side-routing) before deploying your app.

## Adding Custom Environment Variables

>Note: this feature is available with `react-scripts@0.2.3` and higher.

Your project can consume variables declared in your environment as if they were declared locally in your JS files. By
default you will have `NODE_ENV` defined for you, and any other environment variables starting with
`REACT_APP_`.

**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.

>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.

These environment variables will be defined for you on `process.env`. For example, having an environment
variable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.

There is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.

These environment variables can be useful for displaying information conditionally based on where the project is
deployed or consuming sensitive data that lives outside of version control.

First, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined
in the environment inside a `<form>`:

```jsx
render() {
  return (
    <div>
      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>
      <form>
        <input type=""hidden"" defaultValue={process.env.REACT_APP_SECRET_CODE} />
      </form>
    </div>
  );
}
```

During the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.

When you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:

```html
<div>
  <small>You are running this application in <b>development</b> mode.</small>
  <form>
    <input type=""hidden"" value=""abcdef"" />
  </form>
</div>
```

The above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this
value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in
a `.env` file. Both of these ways are described in the next few sections.

Having access to the `NODE_ENV` is also useful for performing actions conditionally:

```js
if (process.env.NODE_ENV !== 'production') {
  analytics.disable();
}
```

When you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.

### Referencing Environment Variables in the HTML

>Note: this feature is available with `react-scripts@0.9.0` and higher.

You can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:

```html
<title>%REACT_APP_WEBSITE_NAME%</title>
```

Note that the caveats from the above section apply:

* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.
* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).

### Adding Temporary Environment Variables In Your Shell

Defining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the
life of the shell session.

#### Windows (cmd.exe)

```cmd
set ""REACT_APP_SECRET_CODE=abcdef"" && npm start
```

(Note: Quotes around the variable assignment are required to avoid a trailing whitespace.)

#### Windows (Powershell)

```Powershell
($env:REACT_APP_SECRET_CODE = ""abcdef"") -and (npm start)
```

#### Linux, macOS (Bash)

```bash
REACT_APP_SECRET_CODE=abcdef npm start
```

### Adding Development Environment Variables In `.env`

>Note: this feature is available with `react-scripts@0.5.0` and higher.

To define permanent environment variables, create a file called `.env` in the root of your project:

```
REACT_APP_SECRET_CODE=abcdef
```
>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid [accidentally exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.

`.env` files **should be** checked into source control (with the exclusion of `.env*.local`).

#### What other `.env` files can be used?

>Note: this feature is **available with `react-scripts@1.0.0` and higher**.

* `.env`: Default.
* `.env.local`: Local overrides. **This file is loaded for all environments except test.**
* `.env.development`, `.env.test`, `.env.production`: Environment-specific settings.
* `.env.development.local`, `.env.test.local`, `.env.production.local`: Local overrides of environment-specific settings.

Files on the left have more priority than files on the right:

* `npm start`: `.env.development.local`, `.env.development`, `.env.local`, `.env`
* `npm run build`: `.env.production.local`, `.env.production`, `.env.local`, `.env`
* `npm test`: `.env.test.local`, `.env.test`, `.env` (note `.env.local` is missing)

These variables will act as the defaults if the machine does not explicitly set them.<br>
Please refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.

>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need
these defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).

#### Expanding Environment Variables In `.env`

>Note: this feature is available with `react-scripts@1.1.0` and higher.

Expand variables already on your machine for use in your `.env` file (using [dotenv-expand](https://github.com/motdotla/dotenv-expand)).

For example, to get the environment variable `npm_package_version`:

```
REACT_APP_VERSION=$npm_package_version
# also works:
# REACT_APP_VERSION=${npm_package_version}
```

Or expand variables local to the current `.env` file:

```
DOMAIN=www.example.com
REACT_APP_FOO=$DOMAIN/foo
REACT_APP_BAR=$DOMAIN/bar
```

## Can I Use Decorators?

Many popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>
Create React App doesn’t support decorator syntax at the moment because:

* It is an experimental proposal and is subject to change.
* The current specification version is not officially supported by Babel.
* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.

However in many cases you can rewrite decorator-based code without decorators just as fine.<br>
Please refer to these two threads for reference:

* [#214](https://github.com/facebookincubator/create-react-app/issues/214)
* [#411](https://github.com/facebookincubator/create-react-app/issues/411)

Create React App will add decorator support when the specification advances to a stable stage.

## Fetching Data with AJAX Requests

React doesn't prescribe a specific approach to data fetching, but people commonly use either a library like [axios](https://github.com/axios/axios) or the [`fetch()` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) provided by the browser. Conveniently, Create React App includes a polyfill for `fetch()` so you can use it without worrying about the browser support.

The global `fetch` function allows to easily makes AJAX requests. It takes in a URL as an input and returns a `Promise` that resolves to a `Response` object. You can find more information about `fetch` [here](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).

This project also includes a [Promise polyfill](https://github.com/then/promise) which provides a full implementation of Promises/A+. A Promise represents the eventual result of an asynchronous operation, you can find more information about Promises [here](https://www.promisejs.org/) and [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). Both axios and `fetch()` use Promises under the hood. You can also use the [`async / await`](https://davidwalsh.name/async-await) syntax to reduce the callback nesting.

You can learn more about making AJAX requests from React components in [the FAQ entry on the React website](https://reactjs.org/docs/faq-ajax.html).

## Integrating with an API Backend

These tutorials will help you to integrate your app with an API backend running on another port,
using `fetch()` to access it.

### Node
Check out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).
You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).

### Ruby on Rails

Check out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).
You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).

## Proxying API Requests in Development

>Note: this feature is available with `react-scripts@0.2.3` and higher.

People often serve the front-end React app from the same host and port as their backend implementation.<br>
For example, a production setup might look like this after the app is deployed:

```
/             - static server returns index.html with React app
/todos        - static server returns index.html with React app
/api/todos    - server handles any /api/* requests using the backend implementation
```

Such setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.

To tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:

```js
  ""proxy"": ""http://localhost:4000"",
```

This way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will **only** attempt to send requests without `text/html` in its `Accept` header to the proxy.

Conveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:

```
Fetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
```

Keep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.

The `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>
If the `proxy` option is **not** flexible enough for you, alternatively you can:

* [Configure the proxy yourself](#configuring-the-proxy-manually)
* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).
* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.

### ""Invalid Host Header"" Errors After Configuring Proxy

When you enable the `proxy` option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in [this article](https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a) and [this issue](https://github.com/webpack/webpack-dev-server/issues/887).

This shouldn’t affect you when developing on `localhost`, but if you develop remotely like [described here](https://github.com/facebookincubator/create-react-app/issues/2271), you will see this error in the browser after enabling the `proxy` option:

>Invalid Host header

To work around it, you can specify your public development host in a file called `.env.development` in the root of your project:

```
HOST=mypublicdevhost.com
```

If you restart the development server now and load the app from the specified host, it should work.

If you are still having issues or if you’re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to `.env.development.local`. **Note that this is dangerous and exposes your machine to remote code execution from malicious websites:**

```
# NOTE: THIS IS DANGEROUS!
# It exposes your machine to attacks from the websites you visit.
DANGEROUSLY_DISABLE_HOST_CHECK=true
```

We don’t recommend this approach.

### Configuring the Proxy Manually

>Note: this feature is available with `react-scripts@1.0.0` and higher.

If the `proxy` option is **not** flexible enough for you, you can specify an object in the following form (in `package.json`).<br>
You may also specify any configuration value [`http-proxy-middleware`](https://github.com/chimurai/http-proxy-middleware#options) or [`http-proxy`](https://github.com/nodejitsu/node-http-proxy#options) supports.
```js
{
  // ...
  ""proxy"": {
    ""/api"": {
      ""target"": ""<url>"",
      ""ws"": true
      // ...
    }
  }
  // ...
}
```

All requests matching this path will be proxies, no exceptions. This includes requests for `text/html`, which the standard `proxy` option does not proxy.

If you need to specify multiple proxies, you may do so by specifying additional entries.
Matches are regular expressions, so that you can use a regexp to match multiple paths.
```js
{
  // ...
  ""proxy"": {
    // Matches any request starting with /api
    ""/api"": {
      ""target"": ""<url_1>"",
      ""ws"": true
      // ...
    },
    // Matches any request starting with /foo
    ""/foo"": {
      ""target"": ""<url_2>"",
      ""ssl"": true,
      ""pathRewrite"": {
        ""^/foo"": ""/foo/beta""
      }
      // ...
    },
    // Matches /bar/abc.html but not /bar/sub/def.html
    ""/bar/[^/]*[.]html"": {
      ""target"": ""<url_3>"",
      // ...
    },
    // Matches /baz/abc.html and /baz/sub/def.html
    ""/baz/.*/.*[.]html"": {
      ""target"": ""<url_4>""
      // ...
    }
  }
  // ...
}
```

### Configuring a WebSocket Proxy

When setting up a WebSocket proxy, there are a some extra considerations to be aware of.

If you’re using a WebSocket engine like [Socket.io](https://socket.io/), you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don't expect Socket.io to work with [the websocket.org echo test](http://websocket.org/echo.html).

There’s some good documentation available for [setting up a Socket.io server](https://socket.io/docs/).

Standard WebSockets **will** work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like [ws](https://github.com/websockets/ws) for the server, with [native WebSockets in the browser](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).

Either way, you can proxy WebSocket requests manually in `package.json`:

```js
{
  // ...
  ""proxy"": {
    ""/socket"": {
      // Your compatible WebSocket server
      ""target"": ""ws://<socket_url>"",
      // Tell http-proxy-middleware that this is a WebSocket proxy.
      // Also allows you to proxy WebSocket requests without an additional HTTP request
      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade
      ""ws"": true
      // ...
    }
  }
  // ...
}
```

## Using HTTPS in Development

>Note: this feature is available with `react-scripts@0.4.0` and higher.

You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the ""proxy"" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.

To do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:

#### Windows (cmd.exe)

```cmd
set HTTPS=true&&npm start
```

#### Windows (Powershell)

```Powershell
($env:HTTPS = $true) -and (npm start)
```

(Note: the lack of whitespace is intentional.)

#### Linux, macOS (Bash)

```bash
HTTPS=true npm start
```

Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.

## Generating Dynamic `<meta>` Tags on the Server

Since Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:

```html
<!doctype html>
<html lang=""en"">
  <head>
    <meta property=""og:title"" content=""__OG_TITLE__"">
    <meta property=""og:description"" content=""__OG_DESCRIPTION__"">
```

Then, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!

If you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.

## Pre-Rendering into Static HTML Files

If you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) or [react-snap](https://github.com/stereobooster/react-snap) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.

There are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.

The primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.

You can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).

## Injecting Data from the Server into the Page

Similarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:

```js
<!doctype html>
<html lang=""en"">
  <head>
    <script>
      window.SERVER_DATA = __SERVER_DATA__;
    </script>
```

Then, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**

## Running Tests

>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>
>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)

Create React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.

Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.

While Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.

We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.

### Filename Conventions

Jest will look for test files with any of the following popular naming conventions:

* Files with `.js` suffix in `__tests__` folders.
* Files with `.test.js` suffix.
* Files with `.spec.js` suffix.

The `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.

We recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.

### Command Line Interface

When you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.

The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:

![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)

### Version Control Integration

By default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.

Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.

Jest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.

### Writing Tests

To create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.

Jest provides a built-in `expect()` global function for making assertions. A basic test could look like this:

```js
import sum from './sum';

it('sums numbers', () => {
  expect(sum(1, 2)).toEqual(3);
  expect(sum(2, 2)).toEqual(4);
});
```

All `expect()` matchers supported by Jest are [extensively documented here](https://facebook.github.io/jest/docs/en/expect.html#content).<br>
You can also use [`jest.fn()` and `expect(fn).toBeCalled()`](https://facebook.github.io/jest/docs/en/expect.html#tohavebeencalled) to create “spies” or mock functions.

### Testing Components

There is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.

Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:

```js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

it('renders without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<App />, div);
});
```

This test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot of value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.

When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.

If you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). To install it, run:

```sh
npm install --save enzyme enzyme-adapter-react-16 react-test-renderer
```

Alternatively you may use `yarn`:

```sh
yarn add enzyme enzyme-adapter-react-16 react-test-renderer
```

As of Enzyme 3, you will need to install Enzyme along with an Adapter corresponding to the version of React you are using. (The examples above use the adapter for React 16.)

The adapter will also need to be configured in your [global setup file](#initializing-test-environment):

#### `src/setupTests.js`
```js
import { configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

configure({ adapter: new Adapter() });
```

>Note: Keep in mind that if you decide to ""eject"" before creating `src/setupTests.js`, the resulting `package.json` file won't contain any reference to it. [Read here](#initializing-test-environment) to learn how to add this after ejecting.

Now you can write a smoke test with it:

```js
import React from 'react';
import { shallow } from 'enzyme';
import App from './App';

it('renders without crashing', () => {
  shallow(<App />);
});
```

Unlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.

You can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.

Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:

```js
import React from 'react';
import { shallow } from 'enzyme';
import App from './App';

it('renders welcome message', () => {
  const wrapper = shallow(<App />);
  const welcome = <h2>Welcome to React</h2>;
  // expect(wrapper.contains(welcome)).to.equal(true);
  expect(wrapper.contains(welcome)).toEqual(true);
});
```

All Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/en/expect.html).<br>
Nevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.

Additionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written more simply with jest-enzyme.

```js
expect(wrapper).toContainReact(welcome)
```

To enable this, install `jest-enzyme`:

```sh
npm install --save jest-enzyme
```

Alternatively you may use `yarn`:

```sh
yarn add jest-enzyme
```

Import it in [`src/setupTests.js`](#initializing-test-environment) to make its matchers available in every test:

```js
import 'jest-enzyme';
```

### Using Third Party Assertion Libraries

We recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).

However, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:

```js
import sinon from 'sinon';
import { expect } from 'chai';
```

and then use them in your tests like you normally do.

### Initializing Test Environment

>Note: this feature is available with `react-scripts@0.4.0` and higher.

If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.

For example:

#### `src/setupTests.js`
```js
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock
```

>Note: Keep in mind that if you decide to ""eject"" before creating `src/setupTests.js`, the resulting `package.json` file won't contain any reference to it, so you should manually create the property `setupTestFrameworkScriptFile` in the configuration for Jest, something like the following:

>```js
>""jest"": {
>   // ...
>   ""setupTestFrameworkScriptFile"": ""<rootDir>/src/setupTests.js""
>  }
>  ```

### Focusing and Excluding Tests

You can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>
Similarly, `fit()` lets you focus on a specific test without running any other tests.

### Coverage Reporting

Jest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>
Run `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:

![coverage report](http://i.imgur.com/5bFhnTS.png)

Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.

#### Configuration

The default Jest coverage configuration can be overriden by adding any of the following supported keys to a Jest config in your package.json.

Supported overrides:
 - [`collectCoverageFrom`](https://facebook.github.io/jest/docs/en/configuration.html#collectcoveragefrom-array)
 - [`coverageReporters`](https://facebook.github.io/jest/docs/en/configuration.html#coveragereporters-array-string)
 - [`coverageThreshold`](https://facebook.github.io/jest/docs/en/configuration.html#coveragethreshold-object)
 - [`snapshotSerializers`](https://facebook.github.io/jest/docs/en/configuration.html#snapshotserializers-array-string)

Example package.json:

```json
{
  ""name"": ""your-package"",
  ""jest"": {
    ""collectCoverageFrom"" : [
      ""src/**/*.{js,jsx}"",
      ""!<rootDir>/node_modules/"",
      ""!<rootDir>/path/to/dir/""
    ],
    ""coverageThreshold"": {
      ""global"": {
        ""branches"": 90,
        ""functions"": 90,
        ""lines"": 90,
        ""statements"": 90
      }
    },
    ""coverageReporters"": [""text""],
    ""snapshotSerializers"": [""my-serializer-module""]
  }
}
```

### Continuous Integration

By default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.

When creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.

Popular CI servers already set the environment variable `CI` by default but you can do this yourself too:

### On CI servers
#### Travis CI

1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.
1. Add a `.travis.yml` file to your git repository.
```
language: node_js
node_js:
  - 6
cache:
  directories:
    - node_modules
script:
  - npm run build
  - npm test
```
1. Trigger your first build with a git push.
1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.

#### CircleCI

Follow [this article](https://medium.com/@knowbody/circleci-and-zeits-now-sh-c9b7eebcd3c1) to set up CircleCI with a Create React App project.

### On your own environment
##### Windows (cmd.exe)

```cmd
set CI=true&&npm test
```

```cmd
set CI=true&&npm run build
```

(Note: the lack of whitespace is intentional.)

##### Windows (Powershell)

```Powershell
($env:CI = $true) -and (npm test)
```

```Powershell
($env:CI = $true) -and (npm run build)
```

##### Linux, macOS (Bash)

```bash
CI=true npm test
```

```bash
CI=true npm run build
```

The test command will force Jest to run tests once instead of launching the watcher.

>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.

The build command will check for linter warnings and fail if any are found.

### Disabling jsdom

By default, the `package.json` of the generated project looks like this:

```js
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
    ""test"": ""react-scripts test --env=jsdom""
```

If you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster:

```diff
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
-   ""test"": ""react-scripts test --env=jsdom""
+   ""test"": ""react-scripts test""
```

To help you make up your mind, here is a list of APIs that **need jsdom**:

* Any browser globals like `window` and `document`
* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)
* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)
* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)

In contrast, **jsdom is not needed** for the following APIs:

* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)
* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)

Finally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).

### Snapshot Testing

Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)

### Editor Integration

If you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.

![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)

## Debugging Tests

There are various ways to setup a debugger for your Jest tests. We cover debugging in Chrome and [Visual Studio Code](https://code.visualstudio.com/).

>Note: debugging tests requires Node 8 or higher.

### Debugging Tests in Chrome

Add the following to the `scripts` section in your project's `package.json`
```json
""scripts"": {
    ""test:debug"": ""react-scripts --inspect-brk test --runInBand --env=jsdom""
  }
```
Place `debugger;` statements in any test and run:
```bash
$ npm run test:debug
```

This will start running your Jest tests, but pause before executing to allow a debugger to attach to the process.

Open the following in Chrome
```
about:inspect
```

After opening that link, the Chrome Developer Tools will be displayed. Select `inspect` on your process and a breakpoint will be set at the first line of the react script (this is done simply to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a ""play"" button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the debugger statement, execution will pause and you can examine the current scope and call stack.

>Note: the --runInBand cli option makes sure Jest runs test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time.

### Debugging Tests in Visual Studio Code

Debugging Jest tests is supported out of the box for [Visual Studio Code](https://code.visualstudio.com).

Use the following [`launch.json`](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) configuration file:
```
{
  ""version"": ""0.2.0"",
  ""configurations"": [
    {
      ""name"": ""Debug CRA Tests"",
      ""type"": ""node"",
      ""request"": ""launch"",
      ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/react-scripts"",      
      ""args"": [
        ""test"",
        ""--runInBand"",
        ""--no-cache"",
        ""--env=jsdom""
      ],
      ""cwd"": ""${workspaceRoot}"",
      ""protocol"": ""inspector"",
      ""console"": ""integratedTerminal"",
      ""internalConsoleOptions"": ""neverOpen""
    }
  ]
}
```

## Developing Components in Isolation

Usually, in an app, you have a lot of UI components, and each of them has many different states.
For an example, a simple button component could have following states:

* In a regular state, with a text label.
* In the disabled mode.
* In a loading state.

Usually, it’s hard to see these states without running a sample app or some examples.

Create React App doesn’t include any tools for this by default, but you can easily add [Storybook for React](https://storybook.js.org) ([source](https://github.com/storybooks/storybook)) or [React Styleguidist](https://react-styleguidist.js.org/) ([source](https://github.com/styleguidist/react-styleguidist)) to your project. **These are third-party tools that let you develop components and see all their states in isolation from your app**.

![Storybook for React Demo](http://i.imgur.com/7CIAWpB.gif)

You can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.

### Getting Started with Storybook

Storybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.

First, install the following npm package globally:

```sh
npm install -g @storybook/cli
```

Then, run the following command inside your app’s directory:

```sh
getstorybook
```

After that, follow the instructions on the screen.

Learn more about React Storybook:

* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)
* [GitHub Repo](https://github.com/storybooks/storybook)
* [Documentation](https://storybook.js.org/basics/introduction/)
* [Snapshot Testing UI](https://github.com/storybooks/storybook/tree/master/addons/storyshots) with Storybook + addon/storyshot

### Getting Started with Styleguidist

Styleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground.

First, install Styleguidist:

```sh
npm install --save react-styleguidist
```

Alternatively you may use `yarn`:

```sh
yarn add react-styleguidist
```

Then, add these scripts to your `package.json`:

```diff
   ""scripts"": {
+    ""styleguide"": ""styleguidist server"",
+    ""styleguide:build"": ""styleguidist build"",
     ""start"": ""react-scripts start"",
```

Then, run the following command inside your app’s directory:

```sh
npm run styleguide
```

After that, follow the instructions on the screen.

Learn more about React Styleguidist:

* [GitHub Repo](https://github.com/styleguidist/react-styleguidist)
* [Documentation](https://react-styleguidist.js.org/docs/getting-started.html)

## Publishing Components to npm

Create React App doesn't provide any built-in functionality to publish a component to npm. If you're ready to extract a component from your project so other people can use it, we recommend moving it to a separate directory outside of your project and then using a tool like [nwb](https://github.com/insin/nwb#react-components-and-libraries) to prepare it for publishing.

## Making a Progressive Web App

By default, the production build is a fully functional, offline-first
[Progressive Web App](https://developers.google.com/web/progressive-web-apps/).

Progressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:

 * All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.
 * Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.
 * On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web **push notifications**. This eliminates the need for the app store.

The [`sw-precache-webpack-plugin`](https://github.com/goldhand/sw-precache-webpack-plugin)
is integrated into production configuration,
and it will take care of generating a service worker file that will automatically
precache all of your local assets and keep them up to date as you deploy updates.
The service worker will use a [cache-first strategy](https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network)
for handling all requests for local assets, including the initial HTML, ensuring
that your web app is reliably fast, even on a slow or unreliable network.

### Opting Out of Caching

If you would prefer not to enable service workers prior to your initial
production deployment, then remove the call to `registerServiceWorker()`
from [`src/index.js`](src/index.js).

If you had previously enabled service workers in your production deployment and
have decided that you would like to disable them for all your existing users,
you can swap out the call to `registerServiceWorker()` in
[`src/index.js`](src/index.js) first by modifying the service worker import:
```javascript
import { unregister } from './registerServiceWorker';
```
and then call `unregister()` instead.
After the user visits a page that has `unregister()`,
the service worker will be uninstalled. Note that depending on how `/service-worker.js` is served,
it may take up to 24 hours for the cache to be invalidated.

### Offline-First Considerations

1. Service workers [require HTTPS](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers#you_need_https),
although to facilitate local testing, that policy
[does not apply to `localhost`](http://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http/34161385#34161385).
If your production web server does not support HTTPS, then the service worker
registration will fail, but the rest of your web app will remain functional.

1. Service workers are [not currently supported](https://jakearchibald.github.io/isserviceworkerready/)
in all web browsers. Service worker registration [won't be attempted](src/registerServiceWorker.js)
on browsers that lack support.

1. The service worker is only enabled in the [production environment](#deployment),
e.g. the output of `npm run build`. It's recommended that you do not enable an
offline-first service worker in a development environment, as it can lead to
frustration when previously cached assets are used and do not include the latest
changes you've made locally.

1. If you *need* to test your offline-first service worker locally, build
the application (using `npm run build`) and run a simple http server from your
build directory. After running the build script, `create-react-app` will give
instructions for one way to test your production build locally and the [deployment instructions](#deployment) have
instructions for using other methods. *Be sure to always use an
incognito window to avoid complications with your browser cache.*

1. If possible, configure your production environment to serve the generated
`service-worker.js` [with HTTP caching disabled](http://stackoverflow.com/questions/38843970/service-worker-javascript-update-frequency-every-24-hours).
If that's not possible—[GitHub Pages](#github-pages), for instance, does not
allow you to change the default 10 minute HTTP cache lifetime—then be aware
that if you visit your production site, and then revisit again before
`service-worker.js` has expired from your HTTP cache, you'll continue to get
the previously cached assets from the service worker. If you have an immediate
need to view your updated production deployment, performing a shift-refresh
will temporarily disable the service worker and retrieve all assets from the
network.

1. Users aren't always familiar with offline-first web apps. It can be useful to
[let the user know](https://developers.google.com/web/fundamentals/instant-and-offline/offline-ux#inform_the_user_when_the_app_is_ready_for_offline_consumption)
when the service worker has finished populating your caches (showing a ""This web
app works offline!"" message) and also let them know when the service worker has
fetched the latest updates that will be available the next time they load the
page (showing a ""New content is available; please refresh."" message). Showing
this messages is currently left as an exercise to the developer, but as a
starting point, you can make use of the logic included in [`src/registerServiceWorker.js`](src/registerServiceWorker.js), which
demonstrates which service worker lifecycle events to listen for to detect each
scenario, and which as a default, just logs appropriate messages to the
JavaScript console.

1. By default, the generated service worker file will not intercept or cache any
cross-origin traffic, like HTTP [API requests](#integrating-with-an-api-backend),
images, or embeds loaded from a different domain. If you would like to use a
runtime caching strategy for those requests, you can [`eject`](#npm-run-eject)
and then configure the
[`runtimeCaching`](https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject)
option in the `SWPrecacheWebpackPlugin` section of
[`webpack.config.prod.js`](../config/webpack.config.prod.js).

### Progressive Web App Metadata

The default configuration includes a web app manifest located at
[`public/manifest.json`](public/manifest.json), that you can customize with
details specific to your web application.

When a user adds a web app to their homescreen using Chrome or Firefox on
Android, the metadata in [`manifest.json`](public/manifest.json) determines what
icons, names, and branding colors to use when the web app is displayed.
[The Web App Manifest guide](https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/)
provides more context about what each field means, and how your customizations
will affect your users' experience.

## Analyzing the Bundle Size

[Source map explorer](https://www.npmjs.com/package/source-map-explorer) analyzes
JavaScript bundles using the source maps. This helps you understand where code
bloat is coming from.

To add Source map explorer to a Create React App project, follow these steps:

```sh
npm install --save source-map-explorer
```

Alternatively you may use `yarn`:

```sh
yarn add source-map-explorer
```

Then in `package.json`, add the following line to `scripts`:

```diff
   ""scripts"": {
+    ""analyze"": ""source-map-explorer build/static/js/main.*"",
     ""start"": ""react-scripts start"",
     ""build"": ""react-scripts build"",
     ""test"": ""react-scripts test --env=jsdom"",
```

Then to analyze the bundle run the production build then run the analyze
script.

```
npm run build
npm run analyze
```

## Deployment

`npm run build` creates a `build` directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.

### Static Server

For environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:

```sh
npm install -g serve
serve -s build
```

The last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.

Run this command to get a full list of the options available:

```sh
serve -h
```

### Other Solutions

You don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.

Here’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):

```javascript
const express = require('express');
const path = require('path');
const app = express();

app.use(express.static(path.join(__dirname, 'build')));

app.get('/', function (req, res) {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

app.listen(9000);
```

The choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.

The `build` folder with static assets is the only output produced by Create React App.

However this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.

### Serving Apps with Client-Side Routing

If you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.

This is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:

```diff
 app.use(express.static(path.join(__dirname, 'build')));

-app.get('/', function (req, res) {
+app.get('/*', function (req, res) {
   res.sendFile(path.join(__dirname, 'build', 'index.html'));
 });
```

If you’re using [Apache HTTP Server](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:

```
    Options -MultiViews
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.html [QSA,L]
```

It will get copied to the `build` folder when you run `npm run build`. 

If you’re using [Apache Tomcat](http://tomcat.apache.org/), you need to follow [this Stack Overflow answer](https://stackoverflow.com/a/41249464/4878474).

Now requests to `/todos/42` will be handled correctly both in development and in production.

On a production build, and in a browser that supports [service workers](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers),
the service worker will automatically handle all navigation requests, like for
`/todos/42`, by serving the cached copy of your `index.html`. This
service worker navigation routing can be configured or disabled by
[`eject`ing](#npm-run-eject) and then modifying the
[`navigateFallback`](https://github.com/GoogleChrome/sw-precache#navigatefallback-string)
and [`navigateFallbackWhitelist`](https://github.com/GoogleChrome/sw-precache#navigatefallbackwhitelist-arrayregexp)
options of the `SWPreachePlugin` [configuration](../config/webpack.config.prod.js).

When users install your app to the homescreen of their device the default configuration will make a shortcut to `/index.html`. This may not work for client-side routers which expect the app to be served from `/`. Edit the web app manifest at [`public/manifest.json`](public/manifest.json) and change `start_url` to match the required URL scheme, for example:

```js
  ""start_url"": ""."",
```

### Building for Relative Paths

By default, Create React App produces a build assuming your app is hosted at the server root.<br>
To override this, specify the `homepage` in your `package.json`, for example:

```js
  ""homepage"": ""http://mywebsite.com/relativepath"",
```

This will let Create React App correctly infer the root path to use in the generated HTML file.

**Note**: If you are using `react-router@^4`, you can root `<Link>`s using the `basename` prop on any `<Router>`.<br>
More information [here](https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string).<br>
<br>
For example:
```js
<BrowserRouter basename=""/calendar""/>
<Link to=""/today""/> // renders <a href=""/calendar/today"">
```

#### Serving the Same Build from Different Paths

>Note: this feature is available with `react-scripts@0.9.0` and higher.

If you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:

```js
  ""homepage"": ""."",
```

This will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.

### [Azure](https://azure.microsoft.com/)

See [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to Microsoft Azure.

See [this](https://medium.com/@strid/host-create-react-app-on-azure-986bc40d5bf2#.pycfnafbg) blog post or [this](https://github.com/ulrikaugustsson/azure-appservice-static) repo for a way to use automatic deployment to Azure App Service.

### [Firebase](https://firebase.google.com/)

Install the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.

Then run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.

```sh
    === Project Setup

    First, let's associate this project directory with a Firebase project.
    You can create multiple project aliases by running firebase use --add,
    but for now we'll just set up a default project.

    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)

    === Database Setup

    Firebase Realtime Database Rules allow you to define how your data should be
    structured and when your data can be read from and written to.

    ? What file should be used for Database Rules? database.rules.json
    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.
    Future modifications to database.rules.json will update Database Rules when you run
    firebase deploy.

    === Hosting Setup

    Your public directory is the folder (relative to your project directory) that
    will contain Hosting assets to uploaded with firebase deploy. If you
    have a build process for your assets, use your build's output directory.

    ? What do you want to use as your public directory? build
    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes
    ✔  Wrote build/index.html

    i  Writing configuration info to firebase.json...
    i  Writing project information to .firebaserc...

    ✔  Firebase initialization complete!
```

IMPORTANT: you need to set proper HTTP caching headers for `service-worker.js` file in `firebase.json` file or you will not be able to see changes after first deployment ([issue #2440](https://github.com/facebookincubator/create-react-app/issues/2440)). It should be added inside `""hosting""` key like next:

```
{
  ""hosting"": {
    ...
    ""headers"": [
      {""source"": ""/service-worker.js"", ""headers"": [{""key"": ""Cache-Control"", ""value"": ""no-cache""}]}
    ]
    ...
```

Now, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.

```sh
    === Deploying to 'example-app-fd690'...

    i  deploying database, hosting
    ✔  database: rules ready to deploy.
    i  hosting: preparing build directory for upload...
    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully
    ✔  hosting: 8 files uploaded successfully
    i  starting release process (may take several minutes)...

    ✔  Deploy complete!

    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview
    Hosting URL: https://example-app-fd690.firebaseapp.com
```

For more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).

### [GitHub Pages](https://pages.github.com/)

>Note: this feature is available with `react-scripts@0.2.0` and higher.

#### Step 1: Add `homepage` to `package.json`

**The step below is important!**<br>
**If you skip it, your app will not deploy correctly.**

Open your `package.json` and add a `homepage` field for your project:

```json
  ""homepage"": ""https://myusername.github.io/my-app"",
```

or for a GitHub user page:

```json
  ""homepage"": ""https://myusername.github.io"",
```

Create React App uses the `homepage` field to determine the root URL in the built HTML file.

#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`

Now, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.

To publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:

```sh
npm install --save gh-pages
```

Alternatively you may use `yarn`:

```sh
yarn add gh-pages
```

Add the following scripts in your `package.json`:

```diff
  ""scripts"": {
+   ""predeploy"": ""npm run build"",
+   ""deploy"": ""gh-pages -d build"",
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
```

The `predeploy` script will run automatically before `deploy` is run.

If you are deploying to a GitHub user page instead of a project page you'll need to make two
additional modifications:

1. First, change your repository's source branch to be any branch other than **master**.
1. Additionally, tweak your `package.json` scripts to push deployments to **master**:
```diff
  ""scripts"": {
    ""predeploy"": ""npm run build"",
-   ""deploy"": ""gh-pages -d build"",
+   ""deploy"": ""gh-pages -b master -d build"",
```

#### Step 3: Deploy the site by running `npm run deploy`

Then run:

```sh
npm run deploy
```

#### Step 4: Ensure your project’s settings use `gh-pages`

Finally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:

<img src=""http://i.imgur.com/HUjEr9l.png"" width=""500"" alt=""gh-pages branch setting"">

#### Step 5: Optionally, configure the domain

You can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.

#### Notes on client-side routing

GitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:

* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://reacttraining.com/react-router/web/api/Router) about different history implementations in React Router.
* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).

#### Troubleshooting

##### ""/dev/tty: No such a device or address""

If, when deploying, you get `/dev/tty: No such a device or address` or a similar error, try the follwing:

1. Create a new [Personal Access Token](https://github.com/settings/tokens)
2. `git remote set-url origin https://<user>:<token>@github.com/<user>/<repo>` .
3. Try `npm run deploy again`

### [Heroku](https://www.heroku.com/)

Use the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>
You can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).

#### Resolving Heroku Deployment Errors

Sometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.

##### ""Module not found: Error: Cannot resolve 'file' or 'directory'""

If you get something like this:

```
remote: Failed to create a production build. Reason:
remote: Module not found: Error: Cannot resolve 'file' or 'directory'
MyDirectory in /tmp/build_1234/src
```

It means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.

This is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.

##### ""Could not find a required file.""

If you exclude or ignore necessary files from the package you will see a error similar this one:

```
remote: Could not find a required file.
remote:   Name: `index.html`
remote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public
remote:
remote: npm ERR! Linux 3.13.0-105-generic
remote: npm ERR! argv ""/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node"" ""/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm"" ""run"" ""build""
```

In this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.

### [Netlify](https://www.netlify.com/)

**To do a manual deploy to Netlify’s CDN:**

```sh
npm install netlify-cli -g
netlify deploy
```

Choose `build` as the path to deploy.

**To setup continuous delivery:**

With this setup Netlify will build and deploy when you push to git or open a pull request:

1. [Start a new netlify project](https://app.netlify.com/signup)
2. Pick your Git hosting service and select your repository
3. Set `yarn build` as the build command and `build` as the publish directory
4. Click `Deploy site`

**Support for client-side routing:**

To support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:

```
/*  /index.html  200
```

When you build the project, Create React App will place the `public` folder contents into the build output.

### [Now](https://zeit.co/now)

Now offers a zero-configuration single-command deployment. You can use `now` to deploy your app for free.

1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.

2. Build your app by running `npm run build`.

3. Move into the build directory by running `cd build`.

4. Run `now --name your-project-name` from within the build directory. You will see a **now.sh** URL in your output like this:

    ```
    > Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)
    ```

    Paste that URL into your browser when the build is complete, and you will see your deployed app.

Details are available in [this article.](https://zeit.co/blog/unlimited-static)

### [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/)

See this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services S3 and CloudFront.

### [Surge](https://surge.sh/)

Install the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account.

When asked about the project path, make sure to specify the `build` folder, for example:

```sh
       project path: /path/to/project/build
```

Note that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).

## Advanced Configuration

You can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).

Variable | Development | Production | Usage
:--- | :---: | :---: | :---
BROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to `npm start` will also be passed to this script, and the url where your app is served will be the last argument. Your script's file name must have the `.js` extension.
HOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.
PORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.
HTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.
PUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.
CI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.
REACT_EDITOR | :white_check_mark: | :x: | When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can [send a pull request to detect your editor of choice](https://github.com/facebookincubator/create-react-app/issues/2636). Setting this environment variable overrides the automatic detection. If you do it, make sure your systems [PATH](https://en.wikipedia.org/wiki/PATH_(variable)) environment variable points to your editor’s bin folder. You can also set it to `none` to disable it completely.
CHOKIDAR_USEPOLLING | :white_check_mark: | :x: | When set to `true`, the watcher runs in polling mode, as necessary inside a VM. Use this option if `npm start` isn't detecting changes.
GENERATE_SOURCEMAP | :x: | :white_check_mark: | When set to `false`, source maps are not generated for a production build. This solves OOM issues on some smaller machines.
NODE_PATH | :white_check_mark: |  :white_check_mark: | Same as [`NODE_PATH` in Node.js](https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders), but only relative folders are allowed. Can be handy for emulating a monorepo setup by setting `NODE_PATH=src`.

## Troubleshooting

### `npm start` doesn’t detect changes

When you save a file while `npm start` is running, the browser should refresh with the updated code.<br>
If this doesn’t happen, try one of the following workarounds:

* If your project is in a Dropbox folder, try moving it out.
* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.
* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Adjusting Your Text Editor”](https://webpack.js.org/guides/development/#adjusting-your-text-editor).
* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).
* On Linux and macOS, you might need to [tweak system settings](https://github.com/webpack/docs/wiki/troubleshooting#not-enough-watchers) to allow more watchers.
* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.

If none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).

### `npm test` hangs on macOS Sierra

If you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).

We recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:

* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)
* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)
* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)

It is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:

```
watchman shutdown-server
brew update
brew reinstall watchman
```

You can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.

If this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.

There are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.

### `npm run build` exits too early

It is reported that `npm run build` can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message:

>  The build failed because the process exited too early. This probably means the system ran out of memory or someone called `kill -9` on the process.

If you are completely sure that you didn't terminate the process, consider [adding some swap space](https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04) to the machine you’re building on, or build the project locally.

### `npm run build` fails on Heroku

This may be a problem with case sensitive filenames.
Please refer to [this section](#resolving-heroku-deployment-errors).

### Moment.js locales are missing

If you use a [Moment.js](https://momentjs.com/), you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of [all the locales provided by Moment.js](https://momentjs.com/#multiple-locale-support).

To add a specific Moment.js locale to your bundle, you need to import it explicitly.<br>
For example:

```js
import moment from 'moment';
import 'moment/locale/fr';
```

If import multiple locales this way, you can later switch between them by calling `moment.locale()` with the locale name:

```js
import moment from 'moment';
import 'moment/locale/fr';
import 'moment/locale/es';

// ...

moment.locale('fr');
```

This will only work for locales that have been explicitly imported before.

### `npm run build` fails to minify

Some third-party packages don't compile their code to ES5 before publishing to npm. This often causes problems in the ecosystem because neither browsers (except for most modern versions) nor some tools currently support all ES6 features. We recommend to publish code on npm as ES5 at least for a few more years.

<br>
To resolve this:

1. Open an issue on the dependency's issue tracker and ask that the package be published pre-compiled.
  * Note: Create React App can consume both CommonJS and ES modules. For Node.js compatibility, it is recommended that the main entry point is CommonJS. However, they can optionally provide an ES module entry point with the `module` field in `package.json`. Note that **even if a library provides an ES Modules version, it should still precompile other ES6 features to ES5 if it intends to support older browsers**.

2. Fork the package and publish a corrected version yourself. 

3. If the dependency is small enough, copy it to your `src/` folder and treat it as application code.

In the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds.

## Alternatives to Ejecting

[Ejecting](#npm-run-eject) lets you customize anything, but from that point on you have to maintain the configuration and scripts yourself. This can be daunting if you have many similar projects. In such cases instead of ejecting we recommend to *fork* `react-scripts` and any other packages you need. [This article](https://auth0.com/blog/how-to-configure-create-react-app/) dives into how to do it in depth. You can find more discussion in [this issue](https://github.com/facebookincubator/create-react-app/issues/682).

## Something Missing?

If you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)
"
115,danielbmathews/doctor_who,Python,
116,LouiseLeal/DoctorWhoRpg2.0,C++,
117,Smytt/Whoniverse---Doctor-Who-RPG-Game,PHP,".checkout
=========

A Symfony project created on December 6, 2017, 3:03 pm.
# RPG2
"
118,ANPez/WhoApi,Go,"# WhoApi
A Doctor Who's API for testing pourposes
"
119,hannahcgunderman/INSC590-OSF-DoctorWho,,"# INSC590-OSF-DoctorWho

This Reproducible README.txt was generated on 20200410 by Hannah Gunderman, Rhiannon Williams, and Kyle Welch

This project is also detailed on Open Science Framework, viewable at this View-Only URL: https://osf.io/yb5h3/?view_only=78f9771b625e41f8bdd911782f467182. 

----------------------------------------
GENERAL INFORMATION
----------------------------------------

1. Title of Dataset:  Using Focus Groups to Assess Doctor Who's Impact on Empathy and Geopolitical Awareness

2. Author Information

Author Contact Information  
    Name: Hannah Gunderman  
    Institution: Carnegie Mellon University  
    Address: 5000 Forbes Avenue, Pittsburgh, Pennsylvania, USA, 15213  
    Email: hgunderm@andrew.cmu.edu  
    Phone Number: 865-973-9543  


Author Contact Information  
    Name: Rhiannon Williams  
    Institution: University of Tennessee-Knoxville  
    Address: 1345 Circle Park Drive, Knoxville, Tennessee, USA, 37916  
    Email: rwill167@vols.utk.edu  

Author Contact Information   
    Name: Kyle Welch  
    Institution: University of Tennessee-Knoxville  
    Address: 1345 Circle Park Drive, Knoxville, Tennessee, USA, 37916  
    Email: kwelch17@vols.utk.edu  

---------------------------------------
DATA & FILE OVERVIEW
---------------------------------------

Directory of Files:

   A. Filename:  2017_Likert_DW_focusgroups_Dislikers.csv
   
      Short description:  This CSV file contains the data provided by participants in the Dislikers focus group taking a Likert scale pre- and post- viewing of the Doctor Who episode. 


   B. Filename:  2017_Likert_DW_focusgroups_Nonviewers.csv   
   
      Short description:  This CSV file contains the data provided by participants in the Nonviewers focus group taking a Likert scale pre- and post- viewing of the Doctor Who episode.     


        
   C. Filename:  2017_Likert_DW_focusgroups_Whovians.csv  
   
      Short description: This CSV file contains the data provided by participants in the Whovians focus group taking a Likert scale pre- and post- viewing of the Doctor Who episode. 


Additional Notes on File Relationships, Context, or Content:  The data contained in these three CSVs are *simulated* values from the actual data taken during these focus groups. The three focus groups were divided across three specific populations: Whovians 
(those who consider themselves strong fans of the show), Non-Viewers (those who had never previously seen the show), and Dislikers (those who have seen the show, and disliked it). The data were collected under IRB approval from the University of 
Tennessee-Knoxville. Because the IRB approval did not include data sharing, the data held in the linked GitHub repository are simulated to visually display the kind of data collected; however, the simulated data bears no resemblance to the original data in terms 
of numerical values, and includes no identifying information.

File Naming Convention: yearofdatacollection_datacollectioninstrument_theme_datacollectionmethod_groupname.csv  


----------------------------------------------------------------------------------------------------------
DATA DESCRIPTION FOR: 2017_Likert_DW_focusgroups_Dislikers.csv
----------------------------------------------------------------------------------------------------------

1. Number of variables: 4


2. Number of cases/rows: 67


3. Missing data codes: The dataset has no missing data, but in the case of missing codes, the dataset would use ""999"" to denote missing data. 

4. Variable List

    A. Name: User  
	
       Description: Denotes the numeric ID representing each individual participant in the focus group. Allowable values are whole numbers only, 1-6.   

    B. Name: Question  
	
       Description: Denotes the question on the Likert scale the participant has answered. Allowable values are alphanumeric, Q1 - Q11, and correspond to the questions listed in the file ""likert_questions_DW.png"" in the GitHub repo.  
					
	C. Name: Pre
	
       Description: Denotes the Likert option chosen by the focus group participant for each question prior to viewing the Doctor Who episode. Allowable values are whole numbers only, 1-5. 
					
	 D. Name: Post
	 
       Description: Denotes the Likert option chosen by the focus group participant for each question after viewing the Doctor Who episode. Allowable values are whole numbers only, 1-5. 
					
--------------------------------------------------------------------------------------------------------------
DATA DESCRIPTION FOR: 2017_Likert_DW_focusgroups_Nonviewers.csv 
--------------------------------------------------------------------------------------------------------------

1. Number of variables: 4


2. Number of cases/rows: 67


3. Missing data codes: The dataset has no missing data, but in the case of missing codes, the dataset would use ""999"" to denote missing data. 


4. Variable List

    A. Name: User
	
       Description: Denotes the numeric ID representing each individual participant in the focus group. Allowable values are whole numbers only, 1-6. 

    B. Name: Question
	
       Description: Denotes the question on the Likert scale the participant has answered. Allowable values are alphanumeric, Q1 - Q11, and correspond to the questions listed in the file ""likert_questions_DW.png"" in the GitHub repo. 
					
	C. Name: Pre
	
       Description: Denotes the Likert option chosen by the focus group participant for each question prior to viewing the Doctor Who episode. Allowable values are whole numbers only, 1-5. 
					
	D. Name: Post
	
       Description: Denotes the Likert option chosen by the focus group participant for each question after viewing the Doctor Who episode. Allowable values are whole numbers only, 1-5. 
					
------------------------------------------------------------------------------------------------------------
DATA DESCRIPTION FOR: 2017_Likert_DW_focusgroups_Whovians.csv  
------------------------------------------------------------------------------------------------------------

1. Number of variables: 4 


2. Number of cases/rows: 67


3. Missing data codes: The dataset has no missing data, but in the case of missing codes, the dataset would use ""999"" to denote missing data. 


4. Variable List

    A. Name: User
	
       Description: Denotes the numeric ID representing each individual participant in the focus group. Allowable values are whole numbers only, 1-6. 

    B. Name: Question
	
       Description: Denotes the question on the Likert scale the participant has answered. Allowable values are alphanumeric, Q1 - Q11, and correspond to the questions listed in the file ""likert_questions_DW.png"" in the GitHub repo. 
					
	C. Name: Pre
	
       Description: Denotes the Likert option chosen by the focus group participant for each question prior to viewing the Doctor Who episode. Allowable values are whole numbers only, 1-5. 
					
	D. Name: Post
	
       Description: Denotes the Likert option chosen by the focus group participant for each question after viewing the Doctor Who episode. Allowable values are whole numbers only, 1-5. 

-------------------------------------------------------
METHODOLOGICAL INFORMATION
-------------------------------------------------------

1. Software-specific information:

Name: Microsoft Excel
Version: 2016 
System Requirements: Windows or macOS
Open Source? (Y/N):  N

Additional Notes: The data were initially entered into Microsoft Excel and can be input into Excel. However, for stability and access, the files have been saved in CSV format and can be viewed and analyzed across all operating systems, including Linux. 


2. Equipment-specific information:

Manufacturer: Dell 
Model: Inspiron 3847

Additional Notes: The data were entered, cleaned, and formatted on this Dell computer. 


3. Date of data collection: 20170601 - 20170801

--------------------------------------------------
NOTES ON REPRODUCIBILITY 
--------------------------------------------------

While it would be virtually impossible to recreate these data exactly as shown in the datasets, using the methodology listed in the ""DW_focusgroups_manuscript.pdf"" file found in the GitHub repository will allow this research to be reproduced with values dependent on those taking part in the focus groups. 

"
120,SolarDrew/Doctor-Who,Python,Hello World
121,emgrasmeder/whoapp,Python,"A little ditty designed to scoop some statistical insights out of Doctor Who scripts. 

This package requires:
scrapy "
122,akpersad/Angular_Quiz,JavaScript,"# Angular Quiz

## Description

Add a short description of your app.

## Screenshots

Add some spiffy screenshots of your app here.

## Background

Why did you want to make this app? What was your development process
like?

## Features

Bullet point some of the key features of your app here.

## Usage

How do users use your app?

## Development/Contribution

Explain how people can contribute to your app. How should they write tests?
Any things in particular you'd like to see in pull requests?

## Future

What features are you currently working on? Only mention things that you
actually are implementing. No pie-in-the-sky-never-gonna-happen stuff.

## Author

Link to your blog, twitter, etc!

## License

Angular Quiz is MIT Licensed. See LICENSE for details."
123,fwallacephd/whoviangirl,CSS,"<<<<<<< HEAD
Notes about Doctor Who fan page.

This pages is a fan site for the television show Doctor Who.

I created it using HTML, CSS, and Bootstrap.

This site was built as part of an open source project for beginners.

To read the blog post about this project go here:
https://codeburst.io/open-source-doctor-who-a666e2ab2d06

The repository for the open source project can be found here:
https://github.com/fwallacephd/doctor-who
=======
Notes about Doctor Who Fan Page

This website was built to be an open source project for beginners to practice
HTML, CSS, Bootstrap and issues related to design. 

If you want to see what the final poduct should look like, go here:
https://fwallacephd.github.io/whoviangirl/ 

The Medium blog post that explains this project can be found here:

If you have questions or need help with this project, please send me an email at: whoviangirl09@gmail.com

Enjoy! Remember to have fun with this!
- Faith
>>>>>>> a0d8451ef0c07e294f65791c000b3eef666b58fa
"
124,aserrao12/alexberen.github.io,JavaScript,
125,moonejon/trivia-game,HTML,"# trivia-game
## Doctor Who Trivia
"
126,zemogle/doctorwho_skill,Python,"# doctorwho_skill
Doctor Who memory skill
"
127,AlkanetSmorgas/Arma-3-Weeping-Angels-Mod,,"# Arma-3-Weeping-Angels-Mod
Doctor Who: Weeping Angels
"
128,osborfg024/doctorwho,HTML,
129,brygphilomena/Gallifreyan-Circles,JavaScript,
130,TheRealKaneras/DWM,Java,"# DWM
Doctor Who Mod
Check changelog.txt to see a list of current features, as it is updated throughout development.
"
131,Nmaher01/Doctor-Who,HTML,
132,jaclynbarrera/doctor-who,CSS,
133,NotArpit/Doctor-Who,Jupyter Notebook,
134,madeleineschwartz01/doctor-who,CSS,
135,ColineMorel/Doctor-Who,,
136,KaylaRichardson/Doctor-Who,,
137,Sellig20/Doctor_Who,Ruby,"# README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...
"
138,amskjold/doctor-who,CSS,
139,asantos08/Doctor-Who,HTML,
140,frabcus/kill-the-moon,Python,"""Kill the Moon"" electricity use
===============================

WARNING: Contains spoilers for this Doctor Who episode.


Introduction
------------

On 4th October 2014, the Doctor Who episode ""Kill the Moon"" featured a gimmick
which may or may not have caused large numbers of people to turn their lights
on or off at the same time.

This repository contains code, data and notes for an initial pass at
seeing if there was any such effect by looking at UK electricity demand.

[My comment](http://feelinglistless.blogspot.co.uk/2014/10/kill-moon.html#comment-1621665672)
on Stuart Burns' review of the episode kicked me off investigating this:

> Ha! So I was on the Doctors side with Clara's anger. We as humanity do and are
> having to take decisions as big as not killing the moon whether we like it or
> not. Clara represented our current global non-strategic take on this for me -
> whining wish that there was a God or similar to help us do hard things. (Rather
> than allowing global poverty, no space exploration and yes climate change.)
> 
> I hated the Base under siege part, dull and unformed. And the gravity thing was
> so nonsense I couldn't suspend disbelief.
> 
> I absolutely *loved* the lights on and off bit. Genius. We were watching in the
> dark on the sofa. I wanted to save the creature, my partner didn't. That and it
> being comfy on the sofa, meant we chose not to get up and turn the light on.
> 
> So in a way, I personally failed nearly as much as Clara nearly failed.
> 
> I don't know if on Saturday night you could see the viewing public deciding
> from the international space station. And my vote was spread out a day later by
> iPlayer. But whatever the flaws, is was so interactive in such a clever way.
> Fun and simple for kids and adults - did families have an argument and fight
> over the light switch? Yet with a real hard moral and practical choice behind
> it.
> 
> Cheesey yes, and for me completely novel and fun. The more I think about it,
> the more I respect the Doctor for making me choose.  


Graph and notes
---------------

In this graph, the purpley pink at the top is the ""Kill the Moon"" broadcast.
Other colours are previous episodes in the same season. Note that programmes
started at varying times (see later in this README).

Comparisons with previous episodes are to see if irregular jumps in electricity
are common at that time on a Saturday.

The dotted line is the time at which Courtney said ""night night"" as the last
lights on earth visible to Clara went out - that is to say at the very end of
the voting when we might expect highest/lowest electricity.

![Kill the Moon electricity graph](https://raw.githubusercontent.com/frabcus/kill-the-moon/master/out.png)


Analysis
--------

There was an increase of 560 MW between the two data points at 20:51:24 and
20:57:52. This is a little bit too early - Clara first says ""turn your lights
off"" at 33:15 minutes in, which is to say at 21:02:25. That said, clocks and
timings could easily be off - I don't have an error bar!

After the spike, there is then a dropoff back to trend with a similar rate to
previous weeks.

Also, note there is a shorter spike, of similar magnitude, slightly earlier at
20:41:06. That's far too early to be due to Clara. It isn't clear if this is
all some other distortion on the day.

Considering the first spike again... Suppose everyone is turning off a 40W bulb
(that's Fermi estimate near enough - living room lights probably have more
lumens on average than a conventional bulb of that wattage, but lots of people
will be using efficient lights now), 560 MW would be 14,000,000 households.

14 million households is more than the 4.82 million viewers. Maybe everyone
rushed to put their Kettle on? Or living room lights have a lot of bulbs
these days?


Conclusion
----------

All told - visually, the graph is very compelling that electricity use during
""Kill the Moon"" was different from previous weeks. 

There's no real way to be sure it was because of Doctor Who - correlation
doesn't indicate causation, the jump seems too large, and there are many other
reasons to be suspicious.

Nevertheless, I like to think that by 14 million households, somewhere in space
and time, a small island of humans saved a space creature.


Broadcast times
---------------

Broadcast time: 20:29:10 ([source](http://twidw.doctorwhonews.net/listing.php?bdid=52388)) - also
there were 4.82 million viewers there.

35:00 minutes in ""night night"" all the lights go out (source: iPlayer)

Which is to say at: 21:04:10

Previous Doctor Who episode start times:

* 2014-10-04 20:29:10
* 2014-09-27 20:30:00
* 2014-09-20 19:30:00
* 2014-09-13 19:30:00
* 2014-09-06 19:30:00
* 2014-08-30 19:30:00
* 2014-08-23 19:50:00


Electricity data source
-----------------------

Downloaded from the [GridWatch database](http://www.gridwatch.templar.co.uk/download.php).

Thanks to [Owen Boswarva](https://twitter.com/owenboswarva/status/519403407434866688) for
telling me about this source, and plotting the first graph.


Technology
----------

I used this as an excuse to play with ggplot in Python. It's very good, but not
as mature as say Pandas and Matplotlib (which it depends upon). In particular,
not enough documentation. And a bug that means it isn't showing the legend
at all.




"
141,bhester4/weddingDW,JavaScript,
142,aseitz94/TriviaGame,HTML,"# TriviaGame
Doctor Who Basic Trivia Game using my current knowledge of Javascript and jQuery. Game will be basic multiple choice with limited amount of 
time. The game ends when the timer runs out. End result will include the number of questions the player answered correctly, incorrectly
and missed. This is the basic quiz and will possibly be advanced depending on how well the first part goes.

"
143,dariusk/doctorwhat,JavaScript,"# doctorwhat (&nbsp;)

The best project ever.

## External licenses
_This uses Ryan Schuft's [inflection.js](https://code.google.com/p/inflection-js/) which gracefully pluralizes nouns (among other things). inflection.js is covered by the license and copyright at the top of its file._

## License
Copyright (c) 2013 Darius Kazemi  
Licensed under the MIT license.
"
144,monicaduconge/doctor-who,CSS,
145,kr4ckhe4d/doctor-who,Objective-C,
146,TDRC/doctor-who,,"doctor-who
==========
"
147,trentgillin/Doctor_Who,R,
148,smith86n/Doctor-who,,
149,watermellon2018/doctor-who,HTML,
150,AnthonyCAmiano/doctor-who,CSS,
151,clintmad/doctor-who,HTML,
152,yyd007/Doctor-who,Jupyter Notebook,"# Doctor-who
Exploratory data analysis for Doctor Who using IMDB reviews and scripts

Questions explored:
- How does the rating vary from season to season?
- Where do the stories take place in Doctor WHO? What are some of the popular stages?
- What are the common words characters use in the show?
- Who speak the most? Who are the main characters based on evidence from the data?
- Which characters are the most positive based on their scripts? Which are not
- Which doctors (9 to 12) are more positive or negative?


Data source and learned from: https://www.kaggle.com/jeanmidev/doctor-who/

"
153,PatrickJHenry/Doctor-Who,,
154,KatieFujihara/doctor-who,JavaScript,"# Doctor Who

An application that helps you find doctor's near you!

### March 22, 2018

## Description
You can search doctor's by name or by specialty and location. This is using the BetterHealth API.

## Specifications/User Expectations
* Takes in value of symptom and location
* Takes in name of doctor
* Outputs doctors that match your requirements stated
* Shows phone, email, bio, website, and whether they are accepting new patients.


### Setup/Installation Requirements
* Clone GitHub Repository
* Open in desktop
* run npm Install
* run npm run start to see what it looks like in a browser
* input information into the input boxes

### Known Bugs
This application has trouble when no address is specified. Also, didn't have time to put the last error message in place.

### Support and Contact Details
Please email Katie Fujihara (katiefujihara@gmail.com)with any questions, comments, or concerns.

### Technologies Used
Javascript, Webpack, Jasmine, Karma, Better Health API

### License
*MIT License

Copyright (c) [2018] [Katie Fujihara]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*

Copyright (c) 2018 Katie Fujihara
"
155,katiehyche/doctor-who,CSS,
156,vamsin07/Doctor-Who,JavaScript,
157,AnnaD1992/doctor-who,Jupyter Notebook,"# doctor-who
Working with pandas
"
158,giselleblanco/Doctor-Who,,
159,AnnCa44/Doctor-Who,Java,
160,Lindsay-Gulla/Doctor-Who,HTML,
161,ChristineMOBrien/doctor-who,,
162,BrittneyMesa/Doctor-Who,HTML,
163,dabdulmyanov-zz/Doctor-Who,,
164,LivClemente/doctor-who,CSS,
165,juliamschwartz/doctor-who,CSS,
166,Cjay1214/doctor-who,,
167,b21986176/Doctor_Who,HTML,
168,colebmoore/Doctor-Who,HTML,
169,christinabahnatka/doctor-who,CSS,"doctor-who
==========

This is my first Web Design project.
"
170,Amandag328/Doctor-Who,,
171,Hiba-alkurd/Doctor-Who,TSQL,"""# Doctor-Who"" 
"
172,ConstanceLuo/Doctor-Who,,"# Doctor-Who
A website to welcome Doctor Who come back
"
173,mehmetcelikhan/Doctor-Who,Java,
174,kevin-amatulli/Doctor-Who,,
175,hetaJ/Doctor_who,,"# Generated files
This repository contains generated files and a checksum.

**Do not edit the files in this repository outside of an instance of ServiceNow.**

If you find yourself unable to import your repository due to the presence of files edited outside an instance of ServiceNow, merge commits that mix files from different revisions, or other data that does not match the checksum, you may recover using either of the following techniques:
* Remove the problem commits:
  1. Clone your repository to a personal computer with the git command line tools installed and open a git command prompt in the repository root
  2. Run `git log` and take note of the SHA1s of the problem commits
  3. Build revert commits using `git revert SHA1` repeatedly, working backward in time, for each commit that introduced changes not generated by a ServiceNow instance
  4. Run `git push`

* Overwrite the problem code snapshot with a known good one:
  1. Clone your repository to a personal computer with the git command line tools installed and open a git command prompt in the repository root,
  2. Locate a known good code snapshot and record its SHA1. For this step, `git log` can be useful.
  2. Run `git reset --hard SHA1` to a commit that was generated by a ServiceNow instance
  3. Run `git reset HEAD{1}`
  4. Run `git add -A`
  5. Run `git commit`
  6. Run `git push`
"
176,aharker619/Doctor-who,Jupyter Notebook,"# Doctor-who
## Project folder for CAPP30122 course for predicting ED wait times

Contributors: [Alyssa Harker](https://github.com/aharker619), [Amir Kazi](https://github.com/amirkazi) and [Tianchu Shu](https://github.com/tianchu-shu)



# Instructions for running project:

Install libraries if needed: django, googlemaps

To operate django web application:
1. Run server in django project. Within the project folder dw_site, run the command >python3 manage.py runserver
2. Open a browser and open http://127.0.0.1:8000/waittimes/
3. This will direct you to http://127.0.0.1:8000/waittimes/user_info which contains a form. Input your address, zipcode, and pain scale from 1 to 10. You must fill in the address and zipcode widget boxes. Press submit. There is also a link for an informational page on Urgent Care facilities.
4. If your zipcode was valid and found in our zipcode database you will load a results page. If your zipcode was not valid (ex. for non-valid zipcode = 00000) you will return a Validation Error with the message 'Please enter a valid zipcode'.
5. The results page will list up to five Emergency Departments that are within 800 km from your zipcode. These hospitals are sorted by total time which is the sum of the driving time (from Google Maps API) and the average wait time reported for the hospital. If there is no average wait time reported we use the median average wait time for all wait time data we have through the NHAMCS dataset. If you have less than five hospitals there are either less than 5 hospitals in that radius or some hospitals were unable to gather driving directions through Google Maps API. (Note: if your address is not found using Google Maps geocode you will return Emergency Departments from only your zipcode)
6. If your area is experiencing extreme weather or has weather alerts an alert box will be at the top of your results page. This box will also contain a link to a new page describing the alerts. 
7. The alerts page lists the alerts for the zipcode. The alerts will first check WeatherUnderground API for National Weather Service alerts. If there are no alerts for your zipcode we will then check for other severe weather conditions through OpenWeatherMap API. This checks for severe or extreme weather descriptions as well as extreme wind chills and heat indicies. The alert from OpenWeatherMap will consist of the weather description, a wind chill warning with the calculated value, and/or a heat index warning with the calculated value. 


# Code Structure:
- raw_data: 
    - This folder contains python code and csv files for data that were used to either create sqlite databases within django or our predicted wait time regression.
    - nhamcs data: Alyssa
        - Python Function:
            - nhamcs.py
        - Input Data:
            - nhamcsed*.csv is yearly data downloaded from the nhamcs database online, where * is the year
        - Output CSVs:
            - nhamcs_all_data.csv is all data from all years combined into one csv file. (stored in dw_site/waittimes) 
    - average wait time hospital data: Amir
        - Python Function:
            - Timely_Effective_Hospital_Data.py
        - Input Data:
            - Timely_and_Effective_Care_-_Hospital.csv is data downloaded from medicare.gov
        - Output CSV:
            - time.csv
    - general hospital data: Tianchu
        - Python Function:
            - hospital_info_datafilter.py
        - Input Data:
            - Hospital_General_Information.csv is data downloaded from medicare.gov
        - Output CSV:
            - HGI.csv
    - zipcode data: Alyssa
        - Python Function:
            - clean_zips.py
        - Input Data:
            - zipcodes.csv
            - 2015_Gaz_zcta_national.txt
        - Output CSV:
            - combined_zips.csv (stored in dw_site folder for loading data)
    - combine hospital information:Tianchu, Alyssa
        - Sqlite Function:
            - Create tables: create_tb.sql (Tianchu)
            - Query: combine_hosp.sql (Alyssa)
        - Input Data:
            - for create_tb.sql: time.csv, HGI.csv, combined_zips.csv, msa.csv, and states.csv
        - Output CSV:
            - ED.csv (stored in dw_site folder for loading data)
    - urgent care data: Alyssa
        - Python Function:
            - urgent_care.py
        - Input Data:
            - Urgent_Care_Facilities.csv
        - Output CSV:
            - urgent_care_data.csv (stored in dw_site folder for loading data)

- dw_site:
    - This folder contains the django project with the single application folder waittimes. Non-django generated files are be described below.
    - Python Function: Alyssa
        - load_data.py was used to load the data into the sqlite databases for django models
    - csv files to load data into databases, described above
- waittimes:
    - Non-django generated files are described below.
    - Python Functions:
        - closest_hosp.py: Alyssa
            - used to query for the 5 closest hospitals and closest urgent care as well as sort the hospitals with closest total time first
        - forms.py: Alyssa
            - holds form model for user input
        - get_distance_duration.py: Amir
            - used to get GoogleMaps API driving distances between user address and hospital
        - get_weather_alerts.py: Amir
            - used to get weather alerts from WeatherUnderground and/or OpenWeatherMaps API
        - regression.py: Tianchu
            - python functions for running regression
        - prediction.py: Tianchu
            - python functions for interfacing user input data with regression models and formatting results
        - finalized_model.sav: file for saving model for pickle
        - nhamcs_all_data.csv: for regression.py
    - templates: Alyssa
        - folder holds django templates as html files, namespace separated
            - user_info.html: user input page to begin application
            - resutls.html: list of hospitals and urgent care nearest to user
            - uc_fyi.html: Information about urgent care centers
            - weather.html: list of weather alerts for user's zipcode
- additional modeling files: Alyssa and Tianchu
    - nhamcs_model.py: (Alyssa) basic/beginning modeling functions Alyssa 
    - NHAMCS_analysis.ipynb: (Alyssa and Tianchu) initial exploration of data(regression & data viz)

# Code Ownership Documentation
- ""Direct copy"": Generated by installed package (Django or other) and few edits made OR taken directly from specified source                                    
- ""Modified"": Generated by installed package (Django or other) and meaningful edits made OR heavily utilized template(s) provided by specified source
- ""Original"": Original code or heavily modified given structure    


"
177,Jess-Nguy/Doctor-Who,C#,"# Doctor-Who
A viewing source of all the Doctor whos and their companion.  This was a school assignment that I am proud of.
"
178,CaitlinKempinski/doctor-who,CSS,
179,tanysaur/TriviaGame,JavaScript,"# Trivia Game
Doctor Who edition

This is a classic trivia game that  uses JavaScript for the logic, and jQuery to manipulate HTML.

Used: HTML, CSS, JavaScript, jQuery
"
180,arielperalta/Doctor-Who,HTML,
181,rasponicc/doctor-who,HTML,"# doctor-who
"
182,skyfox93/Doctor-Who,JavaScript,"# Doctor-Who
"
183,RyanMoeller/doctor-who,CSS,
184,manza33/doctor_who,Java,
185,liaoliveras/doctor-who,CSS,
186,taldridge01/Doctor-Who,HTML,
187,mariettasnia/doctor-who,,
188,Pratyuxh/doctor-who,Java,
189,Mara-K/Who_Project_Markup,,
190,thomas-rex-mitchell/Doctor-Who,,"��#   D o c t o r - W h o  
 #   D o c t o r - W h o  
 #   D o c t o r - W h o  
 #   D o c t o r - W h o  
 "
191,efficacy/doctor-who-mf,JavaScript,"# doctor-who-mf

[![NPM](https://nodei.co/npm/doctor-who-mf.png?downloads=true)](https://nodei.co/npm/doctor-who-mf/)

A Doctor Who [quote-mf](https://www.npmjs.com/package/quote-mf) module.

## Installation
```bash
npm install quote-mf doctor-who-mf
```

## Usage
```js
var quote = require('quote-mf').quote
var doctor = require('doctor-who-mf')

var quotation = quote(doctor, ['Tenth Doctor', 'shutdown'])
console.log('%s: %s', quotation.who, quotation.text)
```

## Output
```
Tenth Doctor: I don�t want to go!
```"
192,kalvarez01/Doctor-Who,HTML,
193,davorg/whonews.tv,CSS,"# whonews.tv
A web site about Doctor Who
"
194,Splodge97/DoctorWhoClubPenguinTresureHunt,HTML,"# DoctorWhoClubPenguinTresureHunt
Doctor Who Themed Treasure Hunt Across Club Penguin
"
195,javglex/FlappyWho,C#,"# FlappyWho
Doctor who themed flappy bird clone

I made this game in order to see how quickly I could send a project out. It took me about a week to create all the assets, write the required scripts, and publish it to the Google Play store. The soundtrack was created by my brother Adalberto Gonzalez
"
196,katyanna/who-quotes,Python,
197,macey26/dr-who-tardis-game,HTML,"The DR Who Game

This is a game that I started when learning conditional statements in Javascript. I wanted to reinforce what I had learned, so I came up with the idea of creating a game that would ask a series of questions about The 12 Doctors of Doctor who, to guess their favorite Dr. The Javascript may seem simple and could also been done with functions, loops or a range of other ways to complete this, but because I am new to Javascript I decided to stick to if/else statements. I also wanted to create the TARDIS using only HTML and CSS, so I could familiarise myself with CSS. 

This is a work in progess can't wast to see how it turns out.
"
198,GiaLucia/doctor-who-css,,
199,KaylaRichardson/doctor-who-css,,
200,JamesOConnor1993/doctor-who-css,,
201,Nommington/Doctor-Who-Memory,JavaScript,"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).

Below you will find some information on how to perform common tasks.<br>
You can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).

## Table of Contents

- [Updating to New Releases](#updating-to-new-releases)
- [Sending Feedback](#sending-feedback)
- [Folder Structure](#folder-structure)
- [Available Scripts](#available-scripts)
  - [npm start](#npm-start)
  - [npm test](#npm-test)
  - [npm run build](#npm-run-build)
  - [npm run eject](#npm-run-eject)
- [Supported Browsers](#supported-browsers)
- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)
- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)
- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)
- [Debugging in the Editor](#debugging-in-the-editor)
- [Formatting Code Automatically](#formatting-code-automatically)
- [Changing the Page `<title>`](#changing-the-page-title)
- [Installing a Dependency](#installing-a-dependency)
- [Importing a Component](#importing-a-component)
- [Code Splitting](#code-splitting)
- [Adding a Stylesheet](#adding-a-stylesheet)
- [Post-Processing CSS](#post-processing-css)
- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)
- [Adding Images, Fonts, and Files](#adding-images-fonts-and-files)
- [Using the `public` Folder](#using-the-public-folder)
  - [Changing the HTML](#changing-the-html)
  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)
  - [When to Use the `public` Folder](#when-to-use-the-public-folder)
- [Using Global Variables](#using-global-variables)
- [Adding Bootstrap](#adding-bootstrap)
  - [Using a Custom Theme](#using-a-custom-theme)
- [Adding Flow](#adding-flow)
- [Adding a Router](#adding-a-router)
- [Adding Custom Environment Variables](#adding-custom-environment-variables)
  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)
  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)
  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)
- [Can I Use Decorators?](#can-i-use-decorators)
- [Fetching Data with AJAX Requests](#fetching-data-with-ajax-requests)
- [Integrating with an API Backend](#integrating-with-an-api-backend)
  - [Node](#node)
  - [Ruby on Rails](#ruby-on-rails)
- [Proxying API Requests in Development](#proxying-api-requests-in-development)
  - [""Invalid Host Header"" Errors After Configuring Proxy](#invalid-host-header-errors-after-configuring-proxy)
  - [Configuring the Proxy Manually](#configuring-the-proxy-manually)
  - [Configuring a WebSocket Proxy](#configuring-a-websocket-proxy)
- [Using HTTPS in Development](#using-https-in-development)
- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)
- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)
- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)
- [Running Tests](#running-tests)
  - [Filename Conventions](#filename-conventions)
  - [Command Line Interface](#command-line-interface)
  - [Version Control Integration](#version-control-integration)
  - [Writing Tests](#writing-tests)
  - [Testing Components](#testing-components)
  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)
  - [Initializing Test Environment](#initializing-test-environment)
  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)
  - [Coverage Reporting](#coverage-reporting)
  - [Continuous Integration](#continuous-integration)
  - [Disabling jsdom](#disabling-jsdom)
  - [Snapshot Testing](#snapshot-testing)
  - [Editor Integration](#editor-integration)
- [Debugging Tests](#debugging-tests)
  - [Debugging Tests in Chrome](#debugging-tests-in-chrome)
  - [Debugging Tests in Visual Studio Code](#debugging-tests-in-visual-studio-code)
- [Developing Components in Isolation](#developing-components-in-isolation)
  - [Getting Started with Storybook](#getting-started-with-storybook)
  - [Getting Started with Styleguidist](#getting-started-with-styleguidist)
- [Publishing Components to npm](#publishing-components-to-npm)
- [Making a Progressive Web App](#making-a-progressive-web-app)
  - [Opting Out of Caching](#opting-out-of-caching)
  - [Offline-First Considerations](#offline-first-considerations)
  - [Progressive Web App Metadata](#progressive-web-app-metadata)
- [Analyzing the Bundle Size](#analyzing-the-bundle-size)
- [Deployment](#deployment)
  - [Static Server](#static-server)
  - [Other Solutions](#other-solutions)
  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)
  - [Building for Relative Paths](#building-for-relative-paths)
  - [Azure](#azure)
  - [Firebase](#firebase)
  - [GitHub Pages](#github-pages)
  - [Heroku](#heroku)
  - [Netlify](#netlify)
  - [Now](#now)
  - [S3 and CloudFront](#s3-and-cloudfront)
  - [Surge](#surge)
- [Advanced Configuration](#advanced-configuration)
- [Troubleshooting](#troubleshooting)
  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)
  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)
  - [`npm run build` exits too early](#npm-run-build-exits-too-early)
  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)
  - [`npm run build` fails to minify](#npm-run-build-fails-to-minify)
  - [Moment.js locales are missing](#momentjs-locales-are-missing)
- [Alternatives to Ejecting](#alternatives-to-ejecting)
- [Something Missing?](#something-missing)

## Updating to New Releases

Create React App is divided into two packages:

* `create-react-app` is a global command-line utility that you use to create new projects.
* `react-scripts` is a development dependency in the generated projects (including this one).

You almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.

When you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.

To update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.

In most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.

We commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.

## Sending Feedback

We are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).

## Folder Structure

After creation, your project should look like this:

```
my-app/
  README.md
  node_modules/
  package.json
  public/
    index.html
    favicon.ico
  src/
    App.css
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
```

For the project to build, **these files must exist with exact filenames**:

* `public/index.html` is the page template;
* `src/index.js` is the JavaScript entry point.

You can delete or rename the other files.

You may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>
You need to **put any JS and CSS files inside `src`**, otherwise Webpack won’t see them.

Only files inside `public` can be used from `public/index.html`.<br>
Read instructions below for using assets from JavaScript and HTML.

You can, however, create more top-level directories.<br>
They will not be included in the production build so you can use them for things like documentation.

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br>
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br>
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br>
See the section about [running tests](#running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br>
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br>
Your app is ready to be deployed!

See the section about [deployment](#deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Supported Browsers

By default, the generated project uses the latest version of React.

You can refer [to the React documentation](https://reactjs.org/docs/react-dom.html#browser-support) for more information about supported browsers.

## Supported Language Features and Polyfills

This project supports a superset of the latest JavaScript standard.<br>
In addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:

* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).
* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).
* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).
* [Dynamic import()](https://github.com/tc39/proposal-dynamic-import) (stage 3 proposal)
* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (part of stage 3 proposal).
* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.

Learn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).

While we recommend using experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.

Note that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:

* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).
* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).
* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).

If you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.

Also note that using some newer syntax features like `for...of` or `[...nonArrayValue]` causes Babel to emit code that depends on ES6 runtime features and might not work without a polyfill. When in doubt, use [Babel REPL](https://babeljs.io/repl/) to see what any specific syntax compiles down to.

## Syntax Highlighting in the Editor

To configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.

## Displaying Lint Output in the Editor

>Note: this feature is available with `react-scripts@0.2.0` and higher.<br>
>It also only works with npm 3 or higher.

Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.

They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.

You would need to install an ESLint plugin for your editor first. Then, add a file called `.eslintrc` to the project root:

```js
{
  ""extends"": ""react-app""
}
```

Now your editor should report the linting warnings.

Note that even if you edit your `.eslintrc` file further, these changes will **only affect the editor integration**. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes.

If you want to enforce a coding style for your project, consider using [Prettier](https://github.com/jlongster/prettier) instead of ESLint style rules.

## Debugging in the Editor

**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) and [WebStorm](https://www.jetbrains.com/webstorm/).**

Visual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.

### Visual Studio Code

You would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.

Then add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.

```json
{
  ""version"": ""0.2.0"",
  ""configurations"": [{
    ""name"": ""Chrome"",
    ""type"": ""chrome"",
    ""request"": ""launch"",
    ""url"": ""http://localhost:3000"",
    ""webRoot"": ""${workspaceRoot}/src"",
    ""sourceMapPathOverrides"": {
      ""webpack:///src/*"": ""${webRoot}/*""
    }
  }]
}
```
>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).

Start your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.

Having problems with VS Code Debugging? Please see their [troubleshooting guide](https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md#troubleshooting).

### WebStorm

You would need to have [WebStorm](https://www.jetbrains.com/webstorm/) and [JetBrains IDE Support](https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji) Chrome extension installed.

In the WebStorm menu `Run` select `Edit Configurations...`. Then click `+` and select `JavaScript Debug`. Paste `http://localhost:3000` into the URL field and save the configuration.

>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).

Start your app by running `npm start`, then press `^D` on macOS or `F9` on Windows and Linux or click the green debug icon to start debugging in WebStorm.

The same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine. 

## Formatting Code Automatically

Prettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the [Prettier's GitHub page](https://github.com/prettier/prettier) for more information, and look at this [page to see it in action](https://prettier.github.io/prettier/).

To format our code whenever we make a commit in git, we need to install the following dependencies:

```sh
npm install --save husky lint-staged prettier
```

Alternatively you may use `yarn`:

```sh
yarn add husky lint-staged prettier
```

* `husky` makes it easy to use githooks as if they are npm scripts.
* `lint-staged` allows us to run scripts on staged files in git. See this [blog post about lint-staged to learn more about it](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8).
* `prettier` is the JavaScript formatter we will run before commits.

Now we can make sure every file is formatted correctly by adding a few lines to the `package.json` in the project root.

Add the following line to `scripts` section:

```diff
  ""scripts"": {
+   ""precommit"": ""lint-staged"",
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
```

Next we add a 'lint-staged' field to the `package.json`, for example:

```diff
  ""dependencies"": {
    // ...
  },
+ ""lint-staged"": {
+   ""src/**/*.{js,jsx,json,css}"": [
+     ""prettier --single-quote --write"",
+     ""git add""
+   ]
+ },
  ""scripts"": {
```

Now, whenever you make a commit, Prettier will format the changed files automatically. You can also run `./node_modules/.bin/prettier --single-quote --write ""src/**/*.{js,jsx,json,css}""` to format your entire project for the first time.

Next you might want to integrate Prettier in your favorite editor. Read the section on [Editor Integration](https://prettier.io/docs/en/editors.html) on the Prettier GitHub page.

## Changing the Page `<title>`

You can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.

Note that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.

If you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.

If you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).

## Installing a Dependency

The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:

```sh
npm install --save react-router
```

Alternatively you may use `yarn`:

```sh
yarn add react-router
```

This works for any library, not just `react-router`.

## Importing a Component

This project setup supports ES6 modules thanks to Babel.<br>
While you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.

For example:

### `Button.js`

```js
import React, { Component } from 'react';

class Button extends Component {
  render() {
    // ...
  }
}

export default Button; // Don’t forget to use export default!
```

### `DangerButton.js`


```js
import React, { Component } from 'react';
import Button from './Button'; // Import a component from another file

class DangerButton extends Component {
  render() {
    return <Button color=""red"" />;
  }
}

export default DangerButton;
```

Be aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.

We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.

Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.

Learn more about ES6 modules:

* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)
* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)
* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)

## Code Splitting

Instead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand.

This project setup supports code splitting via [dynamic `import()`](http://2ality.com/2017/01/import-operator.html#loading-code-on-demand). Its [proposal](https://github.com/tc39/proposal-dynamic-import) is in stage 3. The `import()` function-like form takes the module name as an argument and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which always resolves to the namespace object of the module.

Here is an example:

### `moduleA.js`

```js
const moduleA = 'Hello';

export { moduleA };
```
### `App.js`

```js
import React, { Component } from 'react';

class App extends Component {
  handleClick = () => {
    import('./moduleA')
      .then(({ moduleA }) => {
        // Use moduleA
      })
      .catch(err => {
        // Handle failure
      });
  };

  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Load</button>
      </div>
    );
  }
}

export default App;
```

This will make `moduleA.js` and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button.

You can also use it with `async` / `await` syntax if you prefer it.

### With React Router

If you are using React Router check out [this tutorial](http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html) on how to use code splitting with it. You can find the companion GitHub repository [here](https://github.com/AnomalyInnovations/serverless-stack-demo-client/tree/code-splitting-in-create-react-app).

Also check out the [Code Splitting](https://reactjs.org/docs/code-splitting.html) section in React documentation.

## Adding a Stylesheet

This project setup uses [Webpack](https://webpack.js.org/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:

### `Button.css`

```css
.Button {
  padding: 20px;
}
```

### `Button.js`

```js
import React, { Component } from 'react';
import './Button.css'; // Tell Webpack that Button.js uses these styles

class Button extends Component {
  render() {
    // You can use them as regular CSS styles
    return <div className=""Button"" />;
  }
}
```

**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.

In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.

If you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.

## Post-Processing CSS

This project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.

For example, this:

```css
.App {
  display: flex;
  flex-direction: row;
  align-items: center;
}
```

becomes this:

```css
.App {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}
```

If you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).

## Adding a CSS Preprocessor (Sass, Less etc.)

Generally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).

Following this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.

First, let’s install the command-line interface for Sass:

```sh
npm install --save node-sass-chokidar
```

Alternatively you may use `yarn`:

```sh
yarn add node-sass-chokidar
```

Then in `package.json`, add the following lines to `scripts`:

```diff
   ""scripts"": {
+    ""build-css"": ""node-sass-chokidar src/ -o src/"",
+    ""watch-css"": ""npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive"",
     ""start"": ""react-scripts start"",
     ""build"": ""react-scripts build"",
     ""test"": ""react-scripts test --env=jsdom"",
```

>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.

Now you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.

To share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import ""./shared.scss"";` with variable definitions.

To enable importing files without using relative paths, you can add the  `--include-path` option to the command in `package.json`.

```
""build-css"": ""node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/"",
""watch-css"": ""npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive"",
```

This will allow you to do imports like

```scss
@import 'styles/_colors.scss'; // assuming a styles directory under src/
@import 'nprogress/nprogress'; // importing a css file from the nprogress node module
```

At this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.

As a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:

```sh
npm install --save npm-run-all
```

Alternatively you may use `yarn`:

```sh
yarn add npm-run-all
```

Then we can change `start` and `build` scripts to include the CSS preprocessor commands:

```diff
   ""scripts"": {
     ""build-css"": ""node-sass-chokidar src/ -o src/"",
     ""watch-css"": ""npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive"",
-    ""start"": ""react-scripts start"",
-    ""build"": ""react-scripts build"",
+    ""start-js"": ""react-scripts start"",
+    ""start"": ""npm-run-all -p watch-css start-js"",
+    ""build-js"": ""react-scripts build"",
+    ""build"": ""npm-run-all build-css build-js"",
     ""test"": ""react-scripts test --env=jsdom"",
     ""eject"": ""react-scripts eject""
   }
```

Now running `npm start` and `npm run build` also builds Sass files.

**Why `node-sass-chokidar`?**

`node-sass` has been reported as having the following issues:

- `node-sass --watch` has been reported to have *performance issues* in certain conditions when used in a virtual machine or with docker.

- Infinite styles compiling [#1939](https://github.com/facebookincubator/create-react-app/issues/1939)

- `node-sass` has been reported as having issues with detecting new files in a directory [#1891](https://github.com/sass/node-sass/issues/1891)

 `node-sass-chokidar` is used here as it addresses these issues.

## Adding Images, Fonts, and Files

With Webpack, using static assets like images and fonts works similarly to CSS.

You can **`import` a file right in a JavaScript module**. This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the `src` attribute of an image or the `href` of a link to a PDF.

To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a [data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to [#1153](https://github.com/facebookincubator/create-react-app/issues/1153).

Here is an example:

```js
import React from 'react';
import logo from './logo.png'; // Tell Webpack this JS file uses this image

console.log(logo); // /logo.84287d09.png

function Header() {
  // Import result is the URL of your image
  return <img src={logo} alt=""Logo"" />;
}

export default Header;
```

This ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.

This works in CSS too:

```css
.Logo {
  background-image: url(./logo.png);
}
```

Webpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.

Please be advised that this is also a custom feature of Webpack.

**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>
An alternative way of handling static assets is described in the next section.

## Using the `public` Folder

>Note: this feature is available with `react-scripts@0.5.0` and higher.

### Changing the HTML

The `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).
The `<script>` tag with the compiled code will be added to it automatically during the build process.

### Adding Assets Outside of the Module System

You can also add other assets to the `public` folder.

Note that we normally encourage you to `import` assets in JavaScript files instead.
For example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-fonts-and-files).
This mechanism provides a number of benefits:

* Scripts and stylesheets get minified and bundled together to avoid extra network requests.
* Missing files cause compilation errors instead of 404 errors for your users.
* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.

However there is an **escape hatch** that you can use to add an asset outside of the module system.

If you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.

Inside `index.html`, you can use it like this:

```html
<link rel=""shortcut icon"" href=""%PUBLIC_URL%/favicon.ico"">
```

Only files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.

When you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.

In JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:

```js
render() {
  // Note: this is an escape hatch and should be used sparingly!
  // Normally we recommend using `import` for getting asset URLs
  // as described in “Adding Images and Fonts” above this section.
  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;
}
```

Keep in mind the downsides of this approach:

* None of the files in `public` folder get post-processed or minified.
* Missing files will not be called at compilation time, and will cause 404 errors for your users.
* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.

### When to Use the `public` Folder

Normally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-fonts-and-files) from JavaScript.
The `public` folder is useful as a workaround for a number of less common cases:

* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).
* You have thousands of images and need to dynamically reference their paths.
* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.
* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.

Note that if you add a `<script>` that declares global variables, you also need to read the next section on using them.

## Using Global Variables

When you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.

You can avoid this by reading the global variable explicitly from the `window` object, for example:

```js
const $ = window.$;
```

This makes it obvious you are using a global variable intentionally rather than because of a typo.

Alternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.

## Adding Bootstrap

You don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:

Install React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:

```sh
npm install --save react-bootstrap bootstrap@3
```

Alternatively you may use `yarn`:

```sh
yarn add react-bootstrap bootstrap@3
```

Import Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:

```js
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap/dist/css/bootstrap-theme.css';
// Put any other imports below so that CSS from your
// components takes precedence over default styles.
```

Import required React Bootstrap components within ```src/App.js``` file or your custom component files:

```js
import { Navbar, Jumbotron, Button } from 'react-bootstrap';
```

Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.

### Using a Custom Theme

Sometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>
We suggest the following approach:

* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.
* Add the necessary build steps to tweak the theme, and publish your package on npm.
* Install your own theme npm package as a dependency of your app.

Here is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.

## Adding Flow

Flow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.

Recent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.

To add Flow to a Create React App project, follow these steps:

1. Run `npm install --save flow-bin` (or `yarn add flow-bin`).
2. Add `""flow"": ""flow""` to the `scripts` section of your `package.json`.
3. Run `npm run flow init` (or `yarn flow init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.
4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).

Now you can run `npm run flow` (or `yarn flow`) to check the files for type errors.
You can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.
In the future we plan to integrate it into Create React App even more closely.

To learn more about Flow, check out [its documentation](https://flowtype.org/).

## Adding a Router

Create React App doesn't prescribe a specific routing solution, but [React Router](https://reacttraining.com/react-router/) is the most popular one.

To add it, run:

```sh
npm install --save react-router-dom
```

Alternatively you may use `yarn`:

```sh
yarn add react-router-dom
```

To try it, delete all the code in `src/App.js` and replace it with any of the examples on its website. The [Basic Example](https://reacttraining.com/react-router/web/example/basic) is a good place to get started.

Note that [you may need to configure your production server to support client-side routing](#serving-apps-with-client-side-routing) before deploying your app.

## Adding Custom Environment Variables

>Note: this feature is available with `react-scripts@0.2.3` and higher.

Your project can consume variables declared in your environment as if they were declared locally in your JS files. By
default you will have `NODE_ENV` defined for you, and any other environment variables starting with
`REACT_APP_`.

**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.

>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.

These environment variables will be defined for you on `process.env`. For example, having an environment
variable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.

There is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.

These environment variables can be useful for displaying information conditionally based on where the project is
deployed or consuming sensitive data that lives outside of version control.

First, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined
in the environment inside a `<form>`:

```jsx
render() {
  return (
    <div>
      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>
      <form>
        <input type=""hidden"" defaultValue={process.env.REACT_APP_SECRET_CODE} />
      </form>
    </div>
  );
}
```

During the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.

When you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:

```html
<div>
  <small>You are running this application in <b>development</b> mode.</small>
  <form>
    <input type=""hidden"" value=""abcdef"" />
  </form>
</div>
```

The above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this
value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in
a `.env` file. Both of these ways are described in the next few sections.

Having access to the `NODE_ENV` is also useful for performing actions conditionally:

```js
if (process.env.NODE_ENV !== 'production') {
  analytics.disable();
}
```

When you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.

### Referencing Environment Variables in the HTML

>Note: this feature is available with `react-scripts@0.9.0` and higher.

You can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:

```html
<title>%REACT_APP_WEBSITE_NAME%</title>
```

Note that the caveats from the above section apply:

* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.
* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).

### Adding Temporary Environment Variables In Your Shell

Defining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the
life of the shell session.

#### Windows (cmd.exe)

```cmd
set ""REACT_APP_SECRET_CODE=abcdef"" && npm start
```

(Note: Quotes around the variable assignment are required to avoid a trailing whitespace.)

#### Windows (Powershell)

```Powershell
($env:REACT_APP_SECRET_CODE = ""abcdef"") -and (npm start)
```

#### Linux, macOS (Bash)

```bash
REACT_APP_SECRET_CODE=abcdef npm start
```

### Adding Development Environment Variables In `.env`

>Note: this feature is available with `react-scripts@0.5.0` and higher.

To define permanent environment variables, create a file called `.env` in the root of your project:

```
REACT_APP_SECRET_CODE=abcdef
```
>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid [accidentally exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.

`.env` files **should be** checked into source control (with the exclusion of `.env*.local`).

#### What other `.env` files can be used?

>Note: this feature is **available with `react-scripts@1.0.0` and higher**.

* `.env`: Default.
* `.env.local`: Local overrides. **This file is loaded for all environments except test.**
* `.env.development`, `.env.test`, `.env.production`: Environment-specific settings.
* `.env.development.local`, `.env.test.local`, `.env.production.local`: Local overrides of environment-specific settings.

Files on the left have more priority than files on the right:

* `npm start`: `.env.development.local`, `.env.development`, `.env.local`, `.env`
* `npm run build`: `.env.production.local`, `.env.production`, `.env.local`, `.env`
* `npm test`: `.env.test.local`, `.env.test`, `.env` (note `.env.local` is missing)

These variables will act as the defaults if the machine does not explicitly set them.<br>
Please refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.

>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need
these defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).

#### Expanding Environment Variables In `.env`

>Note: this feature is available with `react-scripts@1.1.0` and higher.

Expand variables already on your machine for use in your `.env` file (using [dotenv-expand](https://github.com/motdotla/dotenv-expand)).

For example, to get the environment variable `npm_package_version`:

```
REACT_APP_VERSION=$npm_package_version
# also works:
# REACT_APP_VERSION=${npm_package_version}
```

Or expand variables local to the current `.env` file:

```
DOMAIN=www.example.com
REACT_APP_FOO=$DOMAIN/foo
REACT_APP_BAR=$DOMAIN/bar
```

## Can I Use Decorators?

Many popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>
Create React App doesn’t support decorator syntax at the moment because:

* It is an experimental proposal and is subject to change.
* The current specification version is not officially supported by Babel.
* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.

However in many cases you can rewrite decorator-based code without decorators just as fine.<br>
Please refer to these two threads for reference:

* [#214](https://github.com/facebookincubator/create-react-app/issues/214)
* [#411](https://github.com/facebookincubator/create-react-app/issues/411)

Create React App will add decorator support when the specification advances to a stable stage.

## Fetching Data with AJAX Requests

React doesn't prescribe a specific approach to data fetching, but people commonly use either a library like [axios](https://github.com/axios/axios) or the [`fetch()` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) provided by the browser. Conveniently, Create React App includes a polyfill for `fetch()` so you can use it without worrying about the browser support.

The global `fetch` function allows to easily makes AJAX requests. It takes in a URL as an input and returns a `Promise` that resolves to a `Response` object. You can find more information about `fetch` [here](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).

This project also includes a [Promise polyfill](https://github.com/then/promise) which provides a full implementation of Promises/A+. A Promise represents the eventual result of an asynchronous operation, you can find more information about Promises [here](https://www.promisejs.org/) and [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). Both axios and `fetch()` use Promises under the hood. You can also use the [`async / await`](https://davidwalsh.name/async-await) syntax to reduce the callback nesting.

You can learn more about making AJAX requests from React components in [the FAQ entry on the React website](https://reactjs.org/docs/faq-ajax.html).

## Integrating with an API Backend

These tutorials will help you to integrate your app with an API backend running on another port,
using `fetch()` to access it.

### Node
Check out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).
You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).

### Ruby on Rails

Check out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).
You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).

## Proxying API Requests in Development

>Note: this feature is available with `react-scripts@0.2.3` and higher.

People often serve the front-end React app from the same host and port as their backend implementation.<br>
For example, a production setup might look like this after the app is deployed:

```
/             - static server returns index.html with React app
/todos        - static server returns index.html with React app
/api/todos    - server handles any /api/* requests using the backend implementation
```

Such setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.

To tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:

```js
  ""proxy"": ""http://localhost:4000"",
```

This way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will **only** attempt to send requests without `text/html` in its `Accept` header to the proxy.

Conveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:

```
Fetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
```

Keep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.

The `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>
If the `proxy` option is **not** flexible enough for you, alternatively you can:

* [Configure the proxy yourself](#configuring-the-proxy-manually)
* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).
* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.

### ""Invalid Host Header"" Errors After Configuring Proxy

When you enable the `proxy` option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in [this article](https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a) and [this issue](https://github.com/webpack/webpack-dev-server/issues/887).

This shouldn’t affect you when developing on `localhost`, but if you develop remotely like [described here](https://github.com/facebookincubator/create-react-app/issues/2271), you will see this error in the browser after enabling the `proxy` option:

>Invalid Host header

To work around it, you can specify your public development host in a file called `.env.development` in the root of your project:

```
HOST=mypublicdevhost.com
```

If you restart the development server now and load the app from the specified host, it should work.

If you are still having issues or if you’re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to `.env.development.local`. **Note that this is dangerous and exposes your machine to remote code execution from malicious websites:**

```
# NOTE: THIS IS DANGEROUS!
# It exposes your machine to attacks from the websites you visit.
DANGEROUSLY_DISABLE_HOST_CHECK=true
```

We don’t recommend this approach.

### Configuring the Proxy Manually

>Note: this feature is available with `react-scripts@1.0.0` and higher.

If the `proxy` option is **not** flexible enough for you, you can specify an object in the following form (in `package.json`).<br>
You may also specify any configuration value [`http-proxy-middleware`](https://github.com/chimurai/http-proxy-middleware#options) or [`http-proxy`](https://github.com/nodejitsu/node-http-proxy#options) supports.
```js
{
  // ...
  ""proxy"": {
    ""/api"": {
      ""target"": ""<url>"",
      ""ws"": true
      // ...
    }
  }
  // ...
}
```

All requests matching this path will be proxies, no exceptions. This includes requests for `text/html`, which the standard `proxy` option does not proxy.

If you need to specify multiple proxies, you may do so by specifying additional entries.
Matches are regular expressions, so that you can use a regexp to match multiple paths.
```js
{
  // ...
  ""proxy"": {
    // Matches any request starting with /api
    ""/api"": {
      ""target"": ""<url_1>"",
      ""ws"": true
      // ...
    },
    // Matches any request starting with /foo
    ""/foo"": {
      ""target"": ""<url_2>"",
      ""ssl"": true,
      ""pathRewrite"": {
        ""^/foo"": ""/foo/beta""
      }
      // ...
    },
    // Matches /bar/abc.html but not /bar/sub/def.html
    ""/bar/[^/]*[.]html"": {
      ""target"": ""<url_3>"",
      // ...
    },
    // Matches /baz/abc.html and /baz/sub/def.html
    ""/baz/.*/.*[.]html"": {
      ""target"": ""<url_4>""
      // ...
    }
  }
  // ...
}
```

### Configuring a WebSocket Proxy

When setting up a WebSocket proxy, there are a some extra considerations to be aware of.

If you’re using a WebSocket engine like [Socket.io](https://socket.io/), you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don't expect Socket.io to work with [the websocket.org echo test](http://websocket.org/echo.html).

There’s some good documentation available for [setting up a Socket.io server](https://socket.io/docs/).

Standard WebSockets **will** work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like [ws](https://github.com/websockets/ws) for the server, with [native WebSockets in the browser](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).

Either way, you can proxy WebSocket requests manually in `package.json`:

```js
{
  // ...
  ""proxy"": {
    ""/socket"": {
      // Your compatible WebSocket server
      ""target"": ""ws://<socket_url>"",
      // Tell http-proxy-middleware that this is a WebSocket proxy.
      // Also allows you to proxy WebSocket requests without an additional HTTP request
      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade
      ""ws"": true
      // ...
    }
  }
  // ...
}
```

## Using HTTPS in Development

>Note: this feature is available with `react-scripts@0.4.0` and higher.

You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the ""proxy"" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.

To do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:

#### Windows (cmd.exe)

```cmd
set HTTPS=true&&npm start
```

#### Windows (Powershell)

```Powershell
($env:HTTPS = $true) -and (npm start)
```

(Note: the lack of whitespace is intentional.)

#### Linux, macOS (Bash)

```bash
HTTPS=true npm start
```

Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.

## Generating Dynamic `<meta>` Tags on the Server

Since Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:

```html
<!doctype html>
<html lang=""en"">
  <head>
    <meta property=""og:title"" content=""__OG_TITLE__"">
    <meta property=""og:description"" content=""__OG_DESCRIPTION__"">
```

Then, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!

If you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.

## Pre-Rendering into Static HTML Files

If you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) or [react-snap](https://github.com/stereobooster/react-snap) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.

There are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.

The primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.

You can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).

## Injecting Data from the Server into the Page

Similarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:

```js
<!doctype html>
<html lang=""en"">
  <head>
    <script>
      window.SERVER_DATA = __SERVER_DATA__;
    </script>
```

Then, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**

## Running Tests

>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>
>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)

Create React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.

Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.

While Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.

We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.

### Filename Conventions

Jest will look for test files with any of the following popular naming conventions:

* Files with `.js` suffix in `__tests__` folders.
* Files with `.test.js` suffix.
* Files with `.spec.js` suffix.

The `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.

We recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.

### Command Line Interface

When you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.

The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:

![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)

### Version Control Integration

By default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.

Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.

Jest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.

### Writing Tests

To create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.

Jest provides a built-in `expect()` global function for making assertions. A basic test could look like this:

```js
import sum from './sum';

it('sums numbers', () => {
  expect(sum(1, 2)).toEqual(3);
  expect(sum(2, 2)).toEqual(4);
});
```

All `expect()` matchers supported by Jest are [extensively documented here](https://facebook.github.io/jest/docs/en/expect.html#content).<br>
You can also use [`jest.fn()` and `expect(fn).toBeCalled()`](https://facebook.github.io/jest/docs/en/expect.html#tohavebeencalled) to create “spies” or mock functions.

### Testing Components

There is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.

Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:

```js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

it('renders without crashing', () => {
  const div = document.createElement('div');
  ReactDOM.render(<App />, div);
});
```

This test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot of value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.

When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.

If you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). To install it, run:

```sh
npm install --save enzyme enzyme-adapter-react-16 react-test-renderer
```

Alternatively you may use `yarn`:

```sh
yarn add enzyme enzyme-adapter-react-16 react-test-renderer
```

As of Enzyme 3, you will need to install Enzyme along with an Adapter corresponding to the version of React you are using. (The examples above use the adapter for React 16.)

The adapter will also need to be configured in your [global setup file](#initializing-test-environment):

#### `src/setupTests.js`
```js
import { configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

configure({ adapter: new Adapter() });
```

>Note: Keep in mind that if you decide to ""eject"" before creating `src/setupTests.js`, the resulting `package.json` file won't contain any reference to it. [Read here](#initializing-test-environment) to learn how to add this after ejecting.

Now you can write a smoke test with it:

```js
import React from 'react';
import { shallow } from 'enzyme';
import App from './App';

it('renders without crashing', () => {
  shallow(<App />);
});
```

Unlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.

You can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.

Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:

```js
import React from 'react';
import { shallow } from 'enzyme';
import App from './App';

it('renders welcome message', () => {
  const wrapper = shallow(<App />);
  const welcome = <h2>Welcome to React</h2>;
  // expect(wrapper.contains(welcome)).to.equal(true);
  expect(wrapper.contains(welcome)).toEqual(true);
});
```

All Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/en/expect.html).<br>
Nevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.

Additionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written more simply with jest-enzyme.

```js
expect(wrapper).toContainReact(welcome)
```

To enable this, install `jest-enzyme`:

```sh
npm install --save jest-enzyme
```

Alternatively you may use `yarn`:

```sh
yarn add jest-enzyme
```

Import it in [`src/setupTests.js`](#initializing-test-environment) to make its matchers available in every test:

```js
import 'jest-enzyme';
```

### Using Third Party Assertion Libraries

We recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).

However, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:

```js
import sinon from 'sinon';
import { expect } from 'chai';
```

and then use them in your tests like you normally do.

### Initializing Test Environment

>Note: this feature is available with `react-scripts@0.4.0` and higher.

If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.

For example:

#### `src/setupTests.js`
```js
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock
```

>Note: Keep in mind that if you decide to ""eject"" before creating `src/setupTests.js`, the resulting `package.json` file won't contain any reference to it, so you should manually create the property `setupTestFrameworkScriptFile` in the configuration for Jest, something like the following:

>```js
>""jest"": {
>   // ...
>   ""setupTestFrameworkScriptFile"": ""<rootDir>/src/setupTests.js""
>  }
>  ```

### Focusing and Excluding Tests

You can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>
Similarly, `fit()` lets you focus on a specific test without running any other tests.

### Coverage Reporting

Jest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>
Run `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:

![coverage report](http://i.imgur.com/5bFhnTS.png)

Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.

#### Configuration

The default Jest coverage configuration can be overriden by adding any of the following supported keys to a Jest config in your package.json.

Supported overrides:
 - [`collectCoverageFrom`](https://facebook.github.io/jest/docs/en/configuration.html#collectcoveragefrom-array)
 - [`coverageReporters`](https://facebook.github.io/jest/docs/en/configuration.html#coveragereporters-array-string)
 - [`coverageThreshold`](https://facebook.github.io/jest/docs/en/configuration.html#coveragethreshold-object)
 - [`snapshotSerializers`](https://facebook.github.io/jest/docs/en/configuration.html#snapshotserializers-array-string)

Example package.json:

```json
{
  ""name"": ""your-package"",
  ""jest"": {
    ""collectCoverageFrom"" : [
      ""src/**/*.{js,jsx}"",
      ""!<rootDir>/node_modules/"",
      ""!<rootDir>/path/to/dir/""
    ],
    ""coverageThreshold"": {
      ""global"": {
        ""branches"": 90,
        ""functions"": 90,
        ""lines"": 90,
        ""statements"": 90
      }
    },
    ""coverageReporters"": [""text""],
    ""snapshotSerializers"": [""my-serializer-module""]
  }
}
```

### Continuous Integration

By default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.

When creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.

Popular CI servers already set the environment variable `CI` by default but you can do this yourself too:

### On CI servers
#### Travis CI

1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.
1. Add a `.travis.yml` file to your git repository.
```
language: node_js
node_js:
  - 6
cache:
  directories:
    - node_modules
script:
  - npm run build
  - npm test
```
1. Trigger your first build with a git push.
1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.

#### CircleCI

Follow [this article](https://medium.com/@knowbody/circleci-and-zeits-now-sh-c9b7eebcd3c1) to set up CircleCI with a Create React App project.

### On your own environment
##### Windows (cmd.exe)

```cmd
set CI=true&&npm test
```

```cmd
set CI=true&&npm run build
```

(Note: the lack of whitespace is intentional.)

##### Windows (Powershell)

```Powershell
($env:CI = $true) -and (npm test)
```

```Powershell
($env:CI = $true) -and (npm run build)
```

##### Linux, macOS (Bash)

```bash
CI=true npm test
```

```bash
CI=true npm run build
```

The test command will force Jest to run tests once instead of launching the watcher.

>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.

The build command will check for linter warnings and fail if any are found.

### Disabling jsdom

By default, the `package.json` of the generated project looks like this:

```js
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
    ""test"": ""react-scripts test --env=jsdom""
```

If you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster:

```diff
  ""scripts"": {
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
-   ""test"": ""react-scripts test --env=jsdom""
+   ""test"": ""react-scripts test""
```

To help you make up your mind, here is a list of APIs that **need jsdom**:

* Any browser globals like `window` and `document`
* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)
* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)
* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)

In contrast, **jsdom is not needed** for the following APIs:

* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)
* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)

Finally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).

### Snapshot Testing

Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)

### Editor Integration

If you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.

![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)

## Debugging Tests

There are various ways to setup a debugger for your Jest tests. We cover debugging in Chrome and [Visual Studio Code](https://code.visualstudio.com/).

>Note: debugging tests requires Node 8 or higher.

### Debugging Tests in Chrome

Add the following to the `scripts` section in your project's `package.json`
```json
""scripts"": {
    ""test:debug"": ""react-scripts --inspect-brk test --runInBand --env=jsdom""
  }
```
Place `debugger;` statements in any test and run:
```bash
$ npm run test:debug
```

This will start running your Jest tests, but pause before executing to allow a debugger to attach to the process.

Open the following in Chrome
```
about:inspect
```

After opening that link, the Chrome Developer Tools will be displayed. Select `inspect` on your process and a breakpoint will be set at the first line of the react script (this is done simply to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a ""play"" button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the debugger statement, execution will pause and you can examine the current scope and call stack.

>Note: the --runInBand cli option makes sure Jest runs test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time.

### Debugging Tests in Visual Studio Code

Debugging Jest tests is supported out of the box for [Visual Studio Code](https://code.visualstudio.com).

Use the following [`launch.json`](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) configuration file:
```
{
  ""version"": ""0.2.0"",
  ""configurations"": [
    {
      ""name"": ""Debug CRA Tests"",
      ""type"": ""node"",
      ""request"": ""launch"",
      ""runtimeExecutable"": ""${workspaceRoot}/node_modules/.bin/react-scripts"",      
      ""args"": [
        ""test"",
        ""--runInBand"",
        ""--no-cache"",
        ""--env=jsdom""
      ],
      ""cwd"": ""${workspaceRoot}"",
      ""protocol"": ""inspector"",
      ""console"": ""integratedTerminal"",
      ""internalConsoleOptions"": ""neverOpen""
    }
  ]
}
```

## Developing Components in Isolation

Usually, in an app, you have a lot of UI components, and each of them has many different states.
For an example, a simple button component could have following states:

* In a regular state, with a text label.
* In the disabled mode.
* In a loading state.

Usually, it’s hard to see these states without running a sample app or some examples.

Create React App doesn’t include any tools for this by default, but you can easily add [Storybook for React](https://storybook.js.org) ([source](https://github.com/storybooks/storybook)) or [React Styleguidist](https://react-styleguidist.js.org/) ([source](https://github.com/styleguidist/react-styleguidist)) to your project. **These are third-party tools that let you develop components and see all their states in isolation from your app**.

![Storybook for React Demo](http://i.imgur.com/7CIAWpB.gif)

You can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.

### Getting Started with Storybook

Storybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.

First, install the following npm package globally:

```sh
npm install -g @storybook/cli
```

Then, run the following command inside your app’s directory:

```sh
getstorybook
```

After that, follow the instructions on the screen.

Learn more about React Storybook:

* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)
* [GitHub Repo](https://github.com/storybooks/storybook)
* [Documentation](https://storybook.js.org/basics/introduction/)
* [Snapshot Testing UI](https://github.com/storybooks/storybook/tree/master/addons/storyshots) with Storybook + addon/storyshot

### Getting Started with Styleguidist

Styleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground.

First, install Styleguidist:

```sh
npm install --save react-styleguidist
```

Alternatively you may use `yarn`:

```sh
yarn add react-styleguidist
```

Then, add these scripts to your `package.json`:

```diff
   ""scripts"": {
+    ""styleguide"": ""styleguidist server"",
+    ""styleguide:build"": ""styleguidist build"",
     ""start"": ""react-scripts start"",
```

Then, run the following command inside your app’s directory:

```sh
npm run styleguide
```

After that, follow the instructions on the screen.

Learn more about React Styleguidist:

* [GitHub Repo](https://github.com/styleguidist/react-styleguidist)
* [Documentation](https://react-styleguidist.js.org/docs/getting-started.html)

## Publishing Components to npm

Create React App doesn't provide any built-in functionality to publish a component to npm. If you're ready to extract a component from your project so other people can use it, we recommend moving it to a separate directory outside of your project and then using a tool like [nwb](https://github.com/insin/nwb#react-components-and-libraries) to prepare it for publishing.

## Making a Progressive Web App

By default, the production build is a fully functional, offline-first
[Progressive Web App](https://developers.google.com/web/progressive-web-apps/).

Progressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:

 * All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.
 * Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.
 * On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web **push notifications**. This eliminates the need for the app store.

The [`sw-precache-webpack-plugin`](https://github.com/goldhand/sw-precache-webpack-plugin)
is integrated into production configuration,
and it will take care of generating a service worker file that will automatically
precache all of your local assets and keep them up to date as you deploy updates.
The service worker will use a [cache-first strategy](https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network)
for handling all requests for local assets, including the initial HTML, ensuring
that your web app is reliably fast, even on a slow or unreliable network.

### Opting Out of Caching

If you would prefer not to enable service workers prior to your initial
production deployment, then remove the call to `registerServiceWorker()`
from [`src/index.js`](src/index.js).

If you had previously enabled service workers in your production deployment and
have decided that you would like to disable them for all your existing users,
you can swap out the call to `registerServiceWorker()` in
[`src/index.js`](src/index.js) first by modifying the service worker import:
```javascript
import { unregister } from './registerServiceWorker';
```
and then call `unregister()` instead.
After the user visits a page that has `unregister()`,
the service worker will be uninstalled. Note that depending on how `/service-worker.js` is served,
it may take up to 24 hours for the cache to be invalidated.

### Offline-First Considerations

1. Service workers [require HTTPS](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers#you_need_https),
although to facilitate local testing, that policy
[does not apply to `localhost`](http://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http/34161385#34161385).
If your production web server does not support HTTPS, then the service worker
registration will fail, but the rest of your web app will remain functional.

1. Service workers are [not currently supported](https://jakearchibald.github.io/isserviceworkerready/)
in all web browsers. Service worker registration [won't be attempted](src/registerServiceWorker.js)
on browsers that lack support.

1. The service worker is only enabled in the [production environment](#deployment),
e.g. the output of `npm run build`. It's recommended that you do not enable an
offline-first service worker in a development environment, as it can lead to
frustration when previously cached assets are used and do not include the latest
changes you've made locally.

1. If you *need* to test your offline-first service worker locally, build
the application (using `npm run build`) and run a simple http server from your
build directory. After running the build script, `create-react-app` will give
instructions for one way to test your production build locally and the [deployment instructions](#deployment) have
instructions for using other methods. *Be sure to always use an
incognito window to avoid complications with your browser cache.*

1. If possible, configure your production environment to serve the generated
`service-worker.js` [with HTTP caching disabled](http://stackoverflow.com/questions/38843970/service-worker-javascript-update-frequency-every-24-hours).
If that's not possible—[GitHub Pages](#github-pages), for instance, does not
allow you to change the default 10 minute HTTP cache lifetime—then be aware
that if you visit your production site, and then revisit again before
`service-worker.js` has expired from your HTTP cache, you'll continue to get
the previously cached assets from the service worker. If you have an immediate
need to view your updated production deployment, performing a shift-refresh
will temporarily disable the service worker and retrieve all assets from the
network.

1. Users aren't always familiar with offline-first web apps. It can be useful to
[let the user know](https://developers.google.com/web/fundamentals/instant-and-offline/offline-ux#inform_the_user_when_the_app_is_ready_for_offline_consumption)
when the service worker has finished populating your caches (showing a ""This web
app works offline!"" message) and also let them know when the service worker has
fetched the latest updates that will be available the next time they load the
page (showing a ""New content is available; please refresh."" message). Showing
this messages is currently left as an exercise to the developer, but as a
starting point, you can make use of the logic included in [`src/registerServiceWorker.js`](src/registerServiceWorker.js), which
demonstrates which service worker lifecycle events to listen for to detect each
scenario, and which as a default, just logs appropriate messages to the
JavaScript console.

1. By default, the generated service worker file will not intercept or cache any
cross-origin traffic, like HTTP [API requests](#integrating-with-an-api-backend),
images, or embeds loaded from a different domain. If you would like to use a
runtime caching strategy for those requests, you can [`eject`](#npm-run-eject)
and then configure the
[`runtimeCaching`](https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject)
option in the `SWPrecacheWebpackPlugin` section of
[`webpack.config.prod.js`](../config/webpack.config.prod.js).

### Progressive Web App Metadata

The default configuration includes a web app manifest located at
[`public/manifest.json`](public/manifest.json), that you can customize with
details specific to your web application.

When a user adds a web app to their homescreen using Chrome or Firefox on
Android, the metadata in [`manifest.json`](public/manifest.json) determines what
icons, names, and branding colors to use when the web app is displayed.
[The Web App Manifest guide](https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/)
provides more context about what each field means, and how your customizations
will affect your users' experience.

## Analyzing the Bundle Size

[Source map explorer](https://www.npmjs.com/package/source-map-explorer) analyzes
JavaScript bundles using the source maps. This helps you understand where code
bloat is coming from.

To add Source map explorer to a Create React App project, follow these steps:

```sh
npm install --save source-map-explorer
```

Alternatively you may use `yarn`:

```sh
yarn add source-map-explorer
```

Then in `package.json`, add the following line to `scripts`:

```diff
   ""scripts"": {
+    ""analyze"": ""source-map-explorer build/static/js/main.*"",
     ""start"": ""react-scripts start"",
     ""build"": ""react-scripts build"",
     ""test"": ""react-scripts test --env=jsdom"",
```

Then to analyze the bundle run the production build then run the analyze
script.

```
npm run build
npm run analyze
```

## Deployment

`npm run build` creates a `build` directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.

### Static Server

For environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:

```sh
npm install -g serve
serve -s build
```

The last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.

Run this command to get a full list of the options available:

```sh
serve -h
```

### Other Solutions

You don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.

Here’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):

```javascript
const express = require('express');
const path = require('path');
const app = express();

app.use(express.static(path.join(__dirname, 'build')));

app.get('/', function (req, res) {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

app.listen(9000);
```

The choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.

The `build` folder with static assets is the only output produced by Create React App.

However this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.

### Serving Apps with Client-Side Routing

If you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.

This is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:

```diff
 app.use(express.static(path.join(__dirname, 'build')));

-app.get('/', function (req, res) {
+app.get('/*', function (req, res) {
   res.sendFile(path.join(__dirname, 'build', 'index.html'));
 });
```

If you’re using [Apache HTTP Server](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:

```
    Options -MultiViews
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.html [QSA,L]
```

It will get copied to the `build` folder when you run `npm run build`. 

If you’re using [Apache Tomcat](http://tomcat.apache.org/), you need to follow [this Stack Overflow answer](https://stackoverflow.com/a/41249464/4878474).

Now requests to `/todos/42` will be handled correctly both in development and in production.

On a production build, and in a browser that supports [service workers](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers),
the service worker will automatically handle all navigation requests, like for
`/todos/42`, by serving the cached copy of your `index.html`. This
service worker navigation routing can be configured or disabled by
[`eject`ing](#npm-run-eject) and then modifying the
[`navigateFallback`](https://github.com/GoogleChrome/sw-precache#navigatefallback-string)
and [`navigateFallbackWhitelist`](https://github.com/GoogleChrome/sw-precache#navigatefallbackwhitelist-arrayregexp)
options of the `SWPreachePlugin` [configuration](../config/webpack.config.prod.js).

When users install your app to the homescreen of their device the default configuration will make a shortcut to `/index.html`. This may not work for client-side routers which expect the app to be served from `/`. Edit the web app manifest at [`public/manifest.json`](public/manifest.json) and change `start_url` to match the required URL scheme, for example:

```js
  ""start_url"": ""."",
```

### Building for Relative Paths

By default, Create React App produces a build assuming your app is hosted at the server root.<br>
To override this, specify the `homepage` in your `package.json`, for example:

```js
  ""homepage"": ""http://mywebsite.com/relativepath"",
```

This will let Create React App correctly infer the root path to use in the generated HTML file.

**Note**: If you are using `react-router@^4`, you can root `<Link>`s using the `basename` prop on any `<Router>`.<br>
More information [here](https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string).<br>
<br>
For example:
```js
<BrowserRouter basename=""/calendar""/>
<Link to=""/today""/> // renders <a href=""/calendar/today"">
```

#### Serving the Same Build from Different Paths

>Note: this feature is available with `react-scripts@0.9.0` and higher.

If you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:

```js
  ""homepage"": ""."",
```

This will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.

### [Azure](https://azure.microsoft.com/)

See [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to Microsoft Azure.

See [this](https://medium.com/@strid/host-create-react-app-on-azure-986bc40d5bf2#.pycfnafbg) blog post or [this](https://github.com/ulrikaugustsson/azure-appservice-static) repo for a way to use automatic deployment to Azure App Service.

### [Firebase](https://firebase.google.com/)

Install the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.

Then run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.

```sh
    === Project Setup

    First, let's associate this project directory with a Firebase project.
    You can create multiple project aliases by running firebase use --add,
    but for now we'll just set up a default project.

    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)

    === Database Setup

    Firebase Realtime Database Rules allow you to define how your data should be
    structured and when your data can be read from and written to.

    ? What file should be used for Database Rules? database.rules.json
    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.
    Future modifications to database.rules.json will update Database Rules when you run
    firebase deploy.

    === Hosting Setup

    Your public directory is the folder (relative to your project directory) that
    will contain Hosting assets to uploaded with firebase deploy. If you
    have a build process for your assets, use your build's output directory.

    ? What do you want to use as your public directory? build
    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes
    ✔  Wrote build/index.html

    i  Writing configuration info to firebase.json...
    i  Writing project information to .firebaserc...

    ✔  Firebase initialization complete!
```

IMPORTANT: you need to set proper HTTP caching headers for `service-worker.js` file in `firebase.json` file or you will not be able to see changes after first deployment ([issue #2440](https://github.com/facebookincubator/create-react-app/issues/2440)). It should be added inside `""hosting""` key like next:

```
{
  ""hosting"": {
    ...
    ""headers"": [
      {""source"": ""/service-worker.js"", ""headers"": [{""key"": ""Cache-Control"", ""value"": ""no-cache""}]}
    ]
    ...
```

Now, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.

```sh
    === Deploying to 'example-app-fd690'...

    i  deploying database, hosting
    ✔  database: rules ready to deploy.
    i  hosting: preparing build directory for upload...
    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully
    ✔  hosting: 8 files uploaded successfully
    i  starting release process (may take several minutes)...

    ✔  Deploy complete!

    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview
    Hosting URL: https://example-app-fd690.firebaseapp.com
```

For more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).

### [GitHub Pages](https://pages.github.com/)

>Note: this feature is available with `react-scripts@0.2.0` and higher.

#### Step 1: Add `homepage` to `package.json`

**The step below is important!**<br>
**If you skip it, your app will not deploy correctly.**

Open your `package.json` and add a `homepage` field for your project:

```json
  ""homepage"": ""https://myusername.github.io/my-app"",
```

or for a GitHub user page:

```json
  ""homepage"": ""https://myusername.github.io"",
```

Create React App uses the `homepage` field to determine the root URL in the built HTML file.

#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`

Now, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.

To publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:

```sh
npm install --save gh-pages
```

Alternatively you may use `yarn`:

```sh
yarn add gh-pages
```

Add the following scripts in your `package.json`:

```diff
  ""scripts"": {
+   ""predeploy"": ""npm run build"",
+   ""deploy"": ""gh-pages -d build"",
    ""start"": ""react-scripts start"",
    ""build"": ""react-scripts build"",
```

The `predeploy` script will run automatically before `deploy` is run.

If you are deploying to a GitHub user page instead of a project page you'll need to make two
additional modifications:

1. First, change your repository's source branch to be any branch other than **master**.
1. Additionally, tweak your `package.json` scripts to push deployments to **master**:
```diff
  ""scripts"": {
    ""predeploy"": ""npm run build"",
-   ""deploy"": ""gh-pages -d build"",
+   ""deploy"": ""gh-pages -b master -d build"",
```

#### Step 3: Deploy the site by running `npm run deploy`

Then run:

```sh
npm run deploy
```

#### Step 4: Ensure your project’s settings use `gh-pages`

Finally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:

<img src=""http://i.imgur.com/HUjEr9l.png"" width=""500"" alt=""gh-pages branch setting"">

#### Step 5: Optionally, configure the domain

You can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.

#### Notes on client-side routing

GitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:

* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://reacttraining.com/react-router/web/api/Router) about different history implementations in React Router.
* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).

#### Troubleshooting

##### ""/dev/tty: No such a device or address""

If, when deploying, you get `/dev/tty: No such a device or address` or a similar error, try the follwing:

1. Create a new [Personal Access Token](https://github.com/settings/tokens)
2. `git remote set-url origin https://<user>:<token>@github.com/<user>/<repo>` .
3. Try `npm run deploy again`

### [Heroku](https://www.heroku.com/)

Use the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>
You can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).

#### Resolving Heroku Deployment Errors

Sometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.

##### ""Module not found: Error: Cannot resolve 'file' or 'directory'""

If you get something like this:

```
remote: Failed to create a production build. Reason:
remote: Module not found: Error: Cannot resolve 'file' or 'directory'
MyDirectory in /tmp/build_1234/src
```

It means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.

This is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.

##### ""Could not find a required file.""

If you exclude or ignore necessary files from the package you will see a error similar this one:

```
remote: Could not find a required file.
remote:   Name: `index.html`
remote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public
remote:
remote: npm ERR! Linux 3.13.0-105-generic
remote: npm ERR! argv ""/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node"" ""/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm"" ""run"" ""build""
```

In this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.

### [Netlify](https://www.netlify.com/)

**To do a manual deploy to Netlify’s CDN:**

```sh
npm install netlify-cli -g
netlify deploy
```

Choose `build` as the path to deploy.

**To setup continuous delivery:**

With this setup Netlify will build and deploy when you push to git or open a pull request:

1. [Start a new netlify project](https://app.netlify.com/signup)
2. Pick your Git hosting service and select your repository
3. Set `yarn build` as the build command and `build` as the publish directory
4. Click `Deploy site`

**Support for client-side routing:**

To support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:

```
/*  /index.html  200
```

When you build the project, Create React App will place the `public` folder contents into the build output.

### [Now](https://zeit.co/now)

Now offers a zero-configuration single-command deployment. You can use `now` to deploy your app for free.

1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.

2. Build your app by running `npm run build`.

3. Move into the build directory by running `cd build`.

4. Run `now --name your-project-name` from within the build directory. You will see a **now.sh** URL in your output like this:

    ```
    > Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)
    ```

    Paste that URL into your browser when the build is complete, and you will see your deployed app.

Details are available in [this article.](https://zeit.co/blog/unlimited-static)

### [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/)

See this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services S3 and CloudFront.

### [Surge](https://surge.sh/)

Install the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account.

When asked about the project path, make sure to specify the `build` folder, for example:

```sh
       project path: /path/to/project/build
```

Note that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).

## Advanced Configuration

You can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).

Variable | Development | Production | Usage
:--- | :---: | :---: | :---
BROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to `npm start` will also be passed to this script, and the url where your app is served will be the last argument. Your script's file name must have the `.js` extension.
HOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.
PORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.
HTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.
PUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.
CI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.
REACT_EDITOR | :white_check_mark: | :x: | When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can [send a pull request to detect your editor of choice](https://github.com/facebookincubator/create-react-app/issues/2636). Setting this environment variable overrides the automatic detection. If you do it, make sure your systems [PATH](https://en.wikipedia.org/wiki/PATH_(variable)) environment variable points to your editor’s bin folder. You can also set it to `none` to disable it completely.
CHOKIDAR_USEPOLLING | :white_check_mark: | :x: | When set to `true`, the watcher runs in polling mode, as necessary inside a VM. Use this option if `npm start` isn't detecting changes.
GENERATE_SOURCEMAP | :x: | :white_check_mark: | When set to `false`, source maps are not generated for a production build. This solves OOM issues on some smaller machines.
NODE_PATH | :white_check_mark: |  :white_check_mark: | Same as [`NODE_PATH` in Node.js](https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders), but only relative folders are allowed. Can be handy for emulating a monorepo setup by setting `NODE_PATH=src`.

## Troubleshooting

### `npm start` doesn’t detect changes

When you save a file while `npm start` is running, the browser should refresh with the updated code.<br>
If this doesn’t happen, try one of the following workarounds:

* If your project is in a Dropbox folder, try moving it out.
* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.
* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Adjusting Your Text Editor”](https://webpack.js.org/guides/development/#adjusting-your-text-editor).
* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).
* On Linux and macOS, you might need to [tweak system settings](https://github.com/webpack/docs/wiki/troubleshooting#not-enough-watchers) to allow more watchers.
* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.

If none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).

### `npm test` hangs on macOS Sierra

If you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).

We recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:

* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)
* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)
* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)

It is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:

```
watchman shutdown-server
brew update
brew reinstall watchman
```

You can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.

If this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.

There are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.

### `npm run build` exits too early

It is reported that `npm run build` can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message:

>  The build failed because the process exited too early. This probably means the system ran out of memory or someone called `kill -9` on the process.

If you are completely sure that you didn't terminate the process, consider [adding some swap space](https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04) to the machine you’re building on, or build the project locally.

### `npm run build` fails on Heroku

This may be a problem with case sensitive filenames.
Please refer to [this section](#resolving-heroku-deployment-errors).

### Moment.js locales are missing

If you use a [Moment.js](https://momentjs.com/), you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of [all the locales provided by Moment.js](https://momentjs.com/#multiple-locale-support).

To add a specific Moment.js locale to your bundle, you need to import it explicitly.<br>
For example:

```js
import moment from 'moment';
import 'moment/locale/fr';
```

If import multiple locales this way, you can later switch between them by calling `moment.locale()` with the locale name:

```js
import moment from 'moment';
import 'moment/locale/fr';
import 'moment/locale/es';

// ...

moment.locale('fr');
```

This will only work for locales that have been explicitly imported before.

### `npm run build` fails to minify

Some third-party packages don't compile their code to ES5 before publishing to npm. This often causes problems in the ecosystem because neither browsers (except for most modern versions) nor some tools currently support all ES6 features. We recommend to publish code on npm as ES5 at least for a few more years.

<br>
To resolve this:

1. Open an issue on the dependency's issue tracker and ask that the package be published pre-compiled.
  * Note: Create React App can consume both CommonJS and ES modules. For Node.js compatibility, it is recommended that the main entry point is CommonJS. However, they can optionally provide an ES module entry point with the `module` field in `package.json`. Note that **even if a library provides an ES Modules version, it should still precompile other ES6 features to ES5 if it intends to support older browsers**.

2. Fork the package and publish a corrected version yourself. 

3. If the dependency is small enough, copy it to your `src/` folder and treat it as application code.

In the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds.

## Alternatives to Ejecting

[Ejecting](#npm-run-eject) lets you customize anything, but from that point on you have to maintain the configuration and scripts yourself. This can be daunting if you have many similar projects. In such cases instead of ejecting we recommend to *fork* `react-scripts` and any other packages you need. [This article](https://auth0.com/blog/how-to-configure-create-react-app/) dives into how to do it in depth. You can find more discussion in [this issue](https://github.com/facebookincubator/create-react-app/issues/682).

## Something Missing?

If you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)
"
202,teddiemucha/doctor-who-css,,
203,IctorM/doctor-who-stat-tracker,Java,"# doctor-who-stat-tracker
Track stats for Doctor Who RPG.
"
204,dethtron5000/dr_who_grabber,HTML,
205,alysekassa/Doctor-Who-Version-2,,
206,souldreamer/whos-your-doc,JavaScript,"# whos-your-doc
Find the best doctor for you
"
207,GiaLucia/doctor-who-css-1,,
208,isylumn/Alt-Doc-Who,,
209,PatrickJHenry/doctor-who-css,,
210,great-os/doctor.who.reference,,"# doctor.who.reference
An open source reference to Doctor Who

#Wiki To This

[神秘博士导引](https://github.com/greatbody/doctor.who.reference/wiki)

[Guide To D.W.](https://github.com/greatbody/doctor.who.reference/wiki)
"
211,talitastravassos/doctor-who-tribute,HTML,"# Freecodecamp project: A Doctor Who tribute page.

Link: https://talitastravassos.github.io/doctor-who-tribute/
"
212,giselleblanco/doctor-who-css,,
213,bachzz/Doctor-Who-Intro,HTML,"1. Open ""cover.html""
2. Main page has 2 styles: click button ""Allons-y!"" or ""Geronimo"" to view
"
214,KaylaRichardson/Doctor-Who-Version-2,,
215,wholmesian/Doctor-Who-NLP,,
216,CardinisCode/Doctor-Who-Directory,Python,"# Doctor Who Directory
 Directory of all the seasons and episodes from the 9th Doctor
"
217,matthewesp/Doctor-Who-Quote-Generator,JavaScript,"# Doctor-Who-XYZ

This is a project showcasing what can be done with React.

This project can be found on doctorwhoxyz.herokuapp.com or doctorwho.xyz

The project is really simple. So far this project utlizes react, however I will be implementing an express server that can have get and post request allowing us to access data via mongodb.

There will be a form allowing users to add their favorite videos, quotes, and other micellanous data needed, along with a user/login backend. 

1/30/20
"
218,nicolepeltier/doctor-who-css,,
219,Amandag328/doctor-who-css,,
220,robdude456/s,,"s
=

Doctor who garrys mod texturise
"
221,giselleblanco/Doctor-Who-Version-2,,
222,wrstone/fonts-doctorwho,,"<h1>fonts-doctorwho</h1>
<h2>Doctor Who TrueType Font Collection</h2>

<pre>
Assiduous SmallCaps.ttf
Assiduous.ttf
Dalek.ttf
Doctor Who 2006.ttf
DrWHO42.ttf
Exterminate Preview.ttf
Matt Smith Doctor Who Regular.ttf
ThetaSigma Release2.ttf
Torchwood.ttf
Exterminate Preview.ttf
</pre>
"
223,JamesOConnor1993/Doctor-Who-Version-2,,
224,chiragmb96/dotnet-Doctor-who,C#,
225,ragad/Doctor-Who-master,HTML,
226,kevin-amatulli/doctor-who-css,,
227,kuramoriz/pygame_doctor_who_game,Python,
228,lynmuldrow/Doctor-Who-Countdown-,JavaScript,"# Doctor Who Countdown
A static javascript/html/jquery/css/bootstrap countdown with video. 

Just a little test site I made to practice integrating countdown.js, which can be seen live here: http://whocountdown.bitballoon.com/
"
229,A1L33N/doctor_who_meme,CSS,
230,nicolepeltier/Doctor-Who-Version-2,,
231,LinkXXI/Doctor-Who-Wallpaper-Changer,C#,"##Doctor-Who-Wallpaper-Changer

============================



C# program that changes wallpaper every hour to represent the doctor that relates to the hour.



###How to use

----------



The program does not run by it's self and requires a windows task to be created in order to change the wallpaper on time.


To do this, Download the zip file in the [dist](dist/) folder of the repository. Extract the folder somewhere on your computer and note where it was extracted.

open the Control Panel and select *Adminstrative Tools* then *Task Scheduler*.

On the right, under the Actions menu double click the *Create Task* item.

Enter a name for the task and set the radio button in the security options group to *Run whether user is logged on or not*.

Go to the Triggers tab. Select *New...* and set the task as follows...

- Daily
- Start date (default)
- Time (set to next hour so it runs from then. NOTE: Add a minute or two to make sure it runs within the hour, else it won't change correctly.)
- Repeat task every 1 hour
- Indefinetly

Select *Ok* and move to the Actions tab.

Select *New...* and browse to the exe location from the zip file. If you want to include the War Doctor in the wallpaper (always dim) add the argument `-WarDoctor` to the arguments box.

Select *Ok* and then select *Ok* on the create task window and your task should be created!!


#####To Do:
Create propper documentation with visual aids.
Add command line flag for wallpaper style (stretch, fill, e.t.c.)
"
232,manuel-dileo/doctor-who-dataset,Python,"# Doctor Who dataset
Collection of datasets about information and interactions between Doctor Who characters from 1963 to April 2021.  
Visualization of the constructed interaction graph between the characters in Gephi:
![doctorwho-simplegraph-gephi](img/doctorwho-simplegraph-gephi.png)
- Nodes are the larger the higher their degree centrality value.  
- Edges are the thicker the higher their weight.  
- Nodes and Edges are colored according to the community partition provided by the Louvain algorithm.  
## Usage
You can simply clone this repository and use CSVs in the dataset folder as you like.  
If you want to easily load the doctor who interactions graph/multigraph as ``networkx`` object, you can use the ``doctorwho_dataset.py`` utilities. The utilities are described through docstrings in the py file itself. An example of using these utilities is provided in the jupyter notebook ``DEMO.ipynb``.  

Please link this repo in your references.
## Datasets available
The Doctor Who simple graph is an undirected weighted graph where nodes are characters with information about their roles in the series and exist an edge between node i and node j with weight w iff i and j appear in the same episode w times.  

The Doctor Who multigraph is an undirected multigraph where nodes are characters with information about their roles in the series and exist an edge between node i and node j iff i and j appear in the same episode and the edge is marked with the title of the episode.  

The edgelist of doctor who simple graph is available in csv in datasets folder. The edgelist of doctor who multigraph is available in csv in datasets/multigraph/ folder. The informations associated to nodes(characters), that is roles in the show, are available in datasets/roles/ folder. Two subdatasets relating to the classic and new era of Doctor Who are also available for each type of dataset mentioned.  
## Source and preprocessing information
Characters, roles, interactions, episodes were obtained by scraping from the [Doctor Who Wiki](https://tardis.fandom.com/wiki/Doctor_Who_Wiki). The process by which I extracted the information can be summarized in the following steps:
- Starting from the page containing the [list of all the episodes](https://tardis.fandom.com/wiki/List_of_Doctor_Who_television_stories), the crawler visited the page dedicated to each story.  
- For each episode I have extrapolated from the \<aside\> on the right side of the page the values of 'Doctor', 'Companion(s)', 'Featuring', 'Main enemy' rows, that are the main characters in the episode, storing \(name,their role\), and creating a link between each characters labeled with the name of the episode.  

Most of the specials and mini-episodes are included in the dataset. I decided to exclude The\_Curse\_of\_Fatal\_Death and Scream\_of\_the\_Shalka due to issues related to the continuity of the Doctor's story.  

Regarding the preprocessing, I did a cleanup of some garbage rows, I eliminated duplicate links, I rewrote the pairs (character, role) as pairs (character, list\_of\_roles).  
## Replicate the data gathering process
I also made public the scripts and code with which I scraped and preprocessed the data. If you want to replicate the data gathering process, you can use ``scraping.py`` to obtain the data from the wiki and ``preprocessing.py`` to clean the datasets. This two py file are available in code\_to\_replicate folder. Please note that some cleaning operations were done manually. I am referring to operations of merge and delete of rows of the edgelist due to bad split on commas. The bad episodes are as follows:
- The Two Doctors\(exchange columns 2,3,4\).  
- Aliens The Good The Bad The Ugly\(delete some rows\).  
- Religion Myths and Legend\(delete some rows\).  
- Elio Ello Utopia\(delete some rows\).  
- The_Doctor_the_Widow_and_the_Wardrobe_(TV_story)\(merge columns 3,4\).  
- Prequel The_Doctor_the_Widow_and_the_Wardrobe_(TV_story)\(delete\).  
- She_Said_He_Said:_A_Prequel_(webcast)\(merge columns 3,4\).  

If you want more information drop a mail to dileomanuel0 at gmail dot com :)
"
233,MrsG-ood/Doctor-Who-Tribute-Page,HTML,"# Doctor-Who-Tribute-Page
 First web page build
"
234,ChristineMOBrien/doctor-who-website-thusfar,CSS,
235,staygolder/Doctor-Who-Version-2,,
236,versesopm/Doctor-Who-Game,Python,
237,JavaOfDoom/doctor-who-tribute-page,HTML,
238,llamaCode/Doctor-Who-Sketch,Processing,
239,Isauregastinne/doctor-who-css,,
240,jordanjrh/doctor_who_quiz,Ruby,"# README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...
"
241,meisterelijah/Doctor-Who-Shooter,Python,"# Doctor Who enemies forgotten

# Action report:

### The doctor has faced many enemies throughout his years. And he has lost just as many companions, but the time has come. The doctor needs your help! The Cybermen and the Daliks have joined forces and he needs your help to stop them. Will you climb aborad or run from what is to come? Rememeber, its bigger on the inside.

## How to Play!
1. Press the space Bar to begin
### How to move
2. use the arrrow keys to move your ship around the screen
### How to shoot
3. Use space bar to shoot
### What's the goal?
4. kill all the enemys to win the game
### Wanna play again? it's simple really.
5. Press R to restart your game.
Enjoy!

## Totally acurrate GAME PLAY!
![alt text](https://raw.githubusercontent.com/meisterelijah/Doctor-Who-Shooter/master/assests/website/title.PNG)

![alt text](https://raw.githubusercontent.com/meisterelijah/Doctor-Who-Shooter/master/assests/website/gameplay.PNG)

[I'm an inline-style link](https://github.com/meisterelijah/Doctor-Who-Shooter/releases/tag/1.0.0)
"
242,melansob/Doctor-Who-DB,JavaScript,"# web-cyoa-airtable
Move CYOA to web-based database
"
243,ColineMorel/doctor-who-css,,
244,Akarrou/doctor_who_ex2,Java,
245,jgcreiglow/doctor-who-clicky-game,JavaScript,"# doctor-who-clicky-game
### https://shielded-brook-73907.herokuapp.com/
"
246,sdrothco/doctor-who-quiz,CSS,
247,Tamer-Assaliya/EFCoreDoctorWho,C#,# EFCoreDoctorWho
248,lisette1104/Doctor-Who-Project-,CSS,
249,angewzhao/doctor-who-dialogue-tracker,Python,"# doctor-who-dialogue-tracker

## Calculates which incarnation of the Doctor (Doctor Who) is most likley to have spoken the quote
This webscrapes all of the doctors' dialogue in Doctor Who. Given a quote, this calculates which incarnation of the doctor is most likely and least likely to have spoken that quote. 

Calculating the probabilities:
The quote is represented as a multinomial random variable. 

The probability to calculate is this: P(Doctor | quote). Using Baye's theorem, this becomes [P(quote | Doctor)P(Doctor)]/P(quote). Assume that P(Doctor)  = 1/13, since there are 13 doctors, not including the War Doctor. Additionally, the goal is not to find the exact probability but to find who is most likely to have said the quote. 

Therefore, say if one is comparing doctors 10 and 11, and one hopes that Doctor 10 said, ""I don't want to go"", [P(quote | Doctor)P(Doctor 10)]/P(quote) > [P(quote | Doctor)P(Doctor 11)]/P(quote). This simplifies to {[P(quote | Doctor)P(Doctor 10)]/P(quote)} / {[P(quote | Doctor)P(Doctor 11)]/P(quote)} > 1.

This simplifies to: P(quote | Doctor 10) / P(quote | Doctor 11) > 1. 

Here, we use Doctor 10 as a specific example. 

P(quote | Doctor 10) = [ n! / ( n1! * n2! * ... nk! ) ] * ( p1n1 * p2n2 * . . . * pknk), where n  = number of trials (or words in quote), n1 to nK = (number of times a unique word appeared), and p1 to pk = the probability that Doctor 10 said that word. 

p1 to pk are taken to be the frequencies of the words that Doctor 10 may or may not have said. These frequencies will be treated as probabilities since this uses a frequentist definition of probability. These are calculated by webscraping all of the words Doctor 10 has said in the Doctor Who TV series and calculating the counts of the words divided by the number of total words Doctor 10 said. If a word in the quote appears that Doctor 10 has never said before, like ""mangosteen"", then the frequency will be given as 1*10e-8. 

P(quote | Doctor 10) / P(quote | Doctor 11) > 1 now becomes Doctor 10's [ n! / ( n1! * n2! * ... nk! ) ] * ( p1n1 * p2n2 * . . . * pknk) > Doctor 11's [ n! / ( n1! * n2! * ... nk! ) ] * ( p1n1 * p2n2 * . . . * pknk) > 1. 

This simplifies to: Doctor 10's ( p1n1 * p2n2 * . . . * pknk) / Doctor 11's ( p1n1 * p2n2 * . . . * pknk) > 1. This [ n! / ( n1! * n2! * ... nk! ) is redundant because this concerns the quote given.

But since these probabilies are tiny, take the log to avoid floating point underflow. 

So the final equation calculated becomes: log(Doctor 10's ( p1n1 * p2n2 * . . . * pknk) / Doctor 11's ( p1n1 * p2n2 * . . . * pknk) > 1) = log(Doctor 10's ( p1n1 * p2n2 * . . . * pknk) - log(Doctor 11's ( p1n1 * p2n2 * . . . * pknk) > 0) = log(Doctor 10's ( p1n1 * p2n2 * . . . * pknk) > log(Doctor 11's ( p1n1 * p2n2 * . . . * pknk)).

This finally simplifies into: Doctor 10's(n1*log(p1) + ...nk * log(pk)) > Doctor 11's(n1*log(p1) + ...nk * log(pk)).

Order the resulting probabilities, and you get most likely to least likely. This method also explains why there is no specific probability given for each Doctor, but can accurately rank each of the doctors. 
"
250,bradleygamboa/Doctor-Who-Hangman,JavaScript,"# doctor-who-hangman
"
251,ByteAbyss/Doctor_Who_Collection_Management,Python,"# Docotor Who Collection Management


Web Scraping utility & front end to manage status of epsiodes from the Doctor Who serials.

As a base it leverages this URL: 
http://www.thedoctorwhosite.co.uk/doctorwho/episodes/


This URL is used for the initial building of the database. 

The data structure includes: 

Title nvarchar(75),  --  Name of Story 
Series_Run nvarchar(25),  -- 1963 or 2005 iteration
Season nvarchar(25),  -- Series #
Story_Aired nvarchar(25), -- Sequential Number for original
Season_URL nvarchar(500), -- Link to page.
Episodes nvarchar(25), -- # in Serial/Episodes
Doctor_Incarnation nvarchar(25),  -- Doctor #
Actor nvarchar(75),  -- Actor Playing Doctor
Companions nvarchar(255),  -- Character Names
Monster nvarchar(75),  -- ""Dalek"" et cettera
Setting nvarchar(75),  -- Where .. ie : ""Scaro"" 
Synopsis nvarchar(500),  -- Short Description
Collected nvarchar(10),  -- Default = No 
PRIMARY KEY (Title, Series_Run)  -- Control Point 

Upon launch it will build the databse so it may take a couple of minutes depending on your internet connection to build out. 

After the initial launch it will use that initial build to record your collection status based on your use & updates in the interface.  This is a very basic flow w/ limited capabilities. I built as a first test project to learn about web scraping and how to structure code. So any and all feedback is welcome. 

To launch from the command line run the __main__.py in the parent folder. 

This project was built to test some base python skills. Overall the project has some 
rough edges. Any and all feed back is welcome. 

Enjoy. 

Thank You 
"
252,JuliBilto/Doctor-Who---Session-02,,
253,JiatengSun/Doctor-Who-test-project,HTML,"# DW
this is a repository for DW with Paolo
"
254,JavaOfDoom/doctor-who-survey-page,HTML,
255,JuanmaCG/WebDoctorWho,CSS,# WebDoctorWho
256,Lyr071/doctor-who-stories,,"doctor-who-stories
==================

Traduction d'histoires à propos du Docteur

Voici les fichiers traduits qui serviront de base pour mon site : http://drwhostories.free.fr

Traductions de http://pearsecom.co.uk"
257,cBridges851/Doctor-Who-Procedural-Program,C#,
258,melansob/Doctor-Who-Story,JavaScript,"# web-cyoa
HTML+CSS_JS Adventure Game
"
259,melansob/RPG-Doctor-Who-Story,,# RPG-Doctor-Who-Story
260,mkrill/Spring-02-Doctor-who,Java,
261,AntonioAlegriaH/doctor-who-episodes-dataset,,"# doctor-who-episodes-dataset
The main goal is to create an r package with the complete script transcription of [Doctor Who](https://en.wikipedia.org/wiki/Doctor_Who) tv series.

This dataset has been downloaded from <https://www.kaggle.com/jeanmidev/doctor-who>, made by Jean-Michel D., and compose by:
 
* [Chakoteya website](http://www.chakoteya.net/DoctorWho/): Compiling ALL the scripts from the different episodes of Doctor Who (all-scripts.csv) and some general information on the episode (all-detailsepisodes.csv)
* [IMDB](https://www.imdb.com/title/tt0436992/?ref_=ttep_ep_tt) rating of the episode of the modern Who (post 2005) in the imdb_details.csv
* General information on the episode form the [doctor who guide website](https://guide.doctorwhonews.net/info.php?detail=ratings&type=date)"
262,Yalonso522/Doctor-Who-Version-2,,
263,clholgat/Asteroids,C++,
264,averyethomas/film-sync-doctor-who,CSS,
265,nmetzger1/doctor-who-scraper,JavaScript,# doctor-who-scraper
266,codingdesigner/doctor-who-streaming,HTML,"# Streaming Classic Doctor Who

| Doctor                     | Season | Story                           |       Service       |  
| :------------------------- | :----: | :------------------------------ | :-----------------: |  
| William Hartnell           |  1963  | An Unearthly Child              |         Hulu        |  
| William Hartnell           |  1964  | The Daleks                      |         Hulu        |  
| William Hartnell           |  1964  | The Edge of Destruction         |         Hulu        |  
| William Hartnell           |  1964  | The Aztecs                      | Netflix/Amazon/Hulu |  
| William Hartnell           |  1964  | The Sensorites                  |         Hulu        |  
| William Hartnell           |  1964  | Planet of Giants                |         Hulu        |  
| William Hartnell           |  1965  | The Rescue                      |         Hulu        |  
| William Hartnell           |  1965  | The Web Planet                  |         Hulu        |  
| William Hartnell           |  1965  | The Space Museum                |         Hulu        |  
| William Hartnell           |  1965  | The Chase                       |         Hulu        |  
| William Hartnell           |  1965  | The Time Meddler                |         Hulu        |  
| <hr>                                                                                     ||||  
| Patrick Troughton          |  1967  | The Tomb of the Cybermen        |        Amazon       |  
| Patrick Troughton          |  1968  | The Enemy of the World          |         Hulu        |  
| Patrick Troughton          |  1968  | The Web of Fear                 |         Hulu        |  
| Patrick Troughton          |  1968  | The Dominator                   |         Hulu        |  
| Patrick Troughton          |  1968  | The Mind Robber                 | Netflix/Amazon/Hulu |  
| Patrick Troughton          |  1969  | The Krotons                     |         Hulu        |  
| <hr>                                                                                     ||||  
| Jon Pertwee                |  1970  | Spearhead from Space            | Netflix/Amazon/Hulu |  
| Jon Pertwee                |  1970  | Doctor Who and the Silurians    |         Hulu        |  
| Jon Pertwee                |  1970  | Inferno                         |         Hulu        |  
| Jon Pertwee                |  1971  | Terror of the Autons            |         Hulu        |  
| Jon Pertwee                |  1971  | The Mind of Evil                |         Hulu        |  
| Jon Pertwee                |  1971  | The Claws of Axos               |         Hulu        |  
| Jon Pertwee                |  1971  | Colony in Space                 |         Hulu        |  
| Jon Pertwee                |  1971  | The Daemons                     |         Hulu        |  
| Jon Pertwee                |  1972  | The Curse of Peladon            |         Hulu        |  
| Jon Pertwee                |  1972  | The Sea Devils                  |         Hulu        |  
| Jon Pertwee                |  1972  | The Mutants                     |         Hulu        |  
| Hartnell/Troughton/Pertwee |  1972  | The Three Doctors               | Netflix/Amazon/Hulu |  
| Jon Pertwee                |  1973  | The Carnival of Monsters        | Netflix/Amazon/Hulu |  
| Jon Pertwee                |  1973  | Frontier in Space               |         Hulu        |  
| Jon Pertwee                |  1973  | Planet of the Daleks            |         Hulu        |  
| Jon Pertwee                |  1973  | The Green Death                 |     Netflix/Hulu    |  
| Jon Pertwee                |  1974  | The Time Warrior                |         Hulu        |  
| Jon Pertwee                |  1974  | Death to the Daleks             |         Hulu        |  
| Jon Pertwee                |  1974  | The Monster of Peladon          |         Hulu        |  
| Jon Pertwee                |  1974  | Planet of the Spiders           |         Hulu        |  
| <hr>                                                                                     ||||  
| Tom Baker                  |  1975  | Robot                           |         Hulu        |  
| Tom Baker                  |  1975  | The Ark in Space                | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1975  | The Sontaran Experiment         |         Hulu        |  
| Tom Baker                  |  1975  | Genesis of the Daleks           |         Hulu        |  
| Tom Baker                  |  1975  | Planet of Evil                  |         Hulu        |  
| Tom Baker                  |  1975  | Pyramids of Mars                | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1977  | The Robots of Death             |        Amazon       |  
| Tom Baker                  |  1975  | The Android Invasion            |         Hulu        |  
| Tom Baker                  |  1976  | The Masque of Mandragora        |         Hulu        |  
| Tom Baker                  |  1976  | The Deadly Assassin             |         Hulu        |  
| Tom Baker                  |  1977  | The Talons of Weng-Chiang       |     Amazon/Hulu     |  
| Tom Baker                  |  1977  | Horror of Fang Rock             | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1977  | The Invisible Enemy             |         Hulu        |  
| Tom Baker                  |  1977  | The Sunmakers                   |         Hulu        |  
| Tom Baker                  |  1978  | Underworld                      |         Hulu        |  
| Tom Baker                  |  1978  | The Invasion of Time            |         Hulu        |  
| Tom Baker                  |  1978  | The Ribos Operation             | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1978  | The Pirate Planet               | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1978  | The Stones of Blood             |         Hulu        |  
| Tom Baker                  |  1978  | The Androids of Tara            |     Netflix/Hulu    |  
| Tom Baker                  |  1979  | The Power of Kroll              | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1978  | The Armageddon Factor           |        Amazon       |  
| Tom Baker                  |  1979  | Destiny of the Daleks           |         Hulu        |  
| Tom Baker                  |  1979  | City of Death                   | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1979  | The Creature from the Pit       |         Hulu        |  
| Tom Baker                  |  1979  | Nightmare of Eden               |         Hulu        |  
| Tom Baker                  |  1980  | The Horns of Nimon              |         Hulu        |  
| Tom Baker                  |  1980  | The Leisure Hive                | Netflix/Amazon/Hulu |  
| Tom Baker                  |  1980  | Meglos                          |         Hulu        |  
| Tom Baker                  |  1980  | Full Circle                     |         Hulu        |  
| Tom Baker                  |  1980  | State of Decay                  |         Hulu        |  
| Tom Baker                  |  1981  | Warriors’ Gate                  |         Hulu        |  
| Tom Baker                  |  1981  | The Keeper of Traken            |         Hulu        |  
| Tom Baker                  |  1981  | Logopolis                       |         Hulu        |  
| <hr>                                                                                     ||||  
| Peter Davison              |  1982  | Castrovalva                     |         Hulu        |  
| Peter Davison              |  1982  | The Visitation                  | Netflix/Amazon/Hulu |  
| Peter Davison              |  1982  | Black Orchid                    |         Hulu        |  
| Peter Davison              |  1983  | Snakedance                      |         Hulu        |  
| Peter Davison              |  1983  | Terminus                        |         Hulu        |  
| Peter Davison              |  1983  | Enlightenment                   |         Hulu        |  
| Peter Davison              |  1984  | Warriors of the Deep            |         Hulu        |  
| Peter Davison              |  1984  | The Awakening                   |         Hulu        |  
| Peter Davison              |  1984  | Frontios                        |         Hulu        |  
| Peter Davison              |  1984  | Resurrection of the Daleks      |         Hulu        |  
| Peter Davison              |  1984  | The Caves of Androzani          | Netflix/Amazon/Hulu |  
| <hr>                                                                                     ||||  
| Colin Baker                |  1984  | The Twin Dilemma                |         Hulu        |  
| Colin Baker                |  1985  | Attack of the Cybermen          |         Hulu        |  
| Colin Baker                |  1985  | Vengeance on Varos              |        Amazon       |  
| Colin Baker                |  1985  | The Mark of the Rani            |         Hulu        |  
| Colin Baker                |  1985  | The Two Doctors                 |         Hulu        |  
| Colin Baker                |  1985  | Timelash                        |         Hulu        |  
| <hr>                                                                                     ||||  
| Sylvester McCoy            |  1987  | Time and the Rani               |         Hulu        |  
| Sylvester McCoy            |  1987  | Delta and the Bannermen         |         Hulu        |  
| Sylvester McCoy            |  1987  | Dragonfire                      |         Hulu        |  
| Sylvester McCoy            |  1988  | Remembrance of the Daleks       |         Hulu        |  
| Sylvester McCoy            |  1988  | The Happiness Patrol            |         Hulu        |  
| Sylvester McCoy            |  1988  | Silver Nemesis                  |         Hulu        |  
| Sylvester McCoy            |  1988  | The Greatest Show in the Galaxy |         Hulu        |  
| Sylvester McCoy            |  1989  | Battlefield                     |         Hulu        |  
| Sylvester McCoy            |  1989  | The Curse of Fenric             | Netflix/Amazon/Hulu |  
| Sylvester McCoy            |  1989  | Survival                        |         Hulu        |  
| <hr>                                                                                     ||||  
| Paul McGann                |  1996  | Doctor Who (Movie)              |                     |    










"
267,pingzing/doctor-who-soundboard,C#,
268,samyuktasreekanth-cit/Doctor-Who-Project,Vue,"# vuejs-playlist

> A Vue.js project

## Build Setup

``` bash
# install dependencies
npm install

# serve with hot reload at localhost:8080
npm run dev

# build for production with minification
npm run build
```

For detailed explanation on how things work, consult the [docs for vue-loader](http://vuejs.github.io/vue-loader).
"
269,kalgynirae/doctor-whosical-songs,,
270,Shamrez181/Doctor-Who-Interactive-Comic,,
271,JHill89/Assignment-4,HTML,
272,elliewiekamp/doctor-who-css,,
273,BridgetVioletAvila/Doctor-Who-master,HTML,
274,ads04r/doctor-who-rdf,,
275,kevin-amatulli/Doctor-Who-Version-2,,
276,adamwalter/doctor-who-randomizer,JavaScript,
277,Mars-75/Fan_Game_Doctor_Who,,"# Fan_Game_Doctor_Who
I am definitely a mad man with a box.
"
278,harofax/Attack_of_the_Daleks,Python,
279,Cambasra/Doctor-who.web,CSS,
280,DChang87/Paint-Project,Python,"# Paint-Project
Doctor Who themed Paint Project

This is my version of Paint, written in Python.
It has the basic functions with the brushes, spray paint, pencil, lines, shapes, eraser, etc.
It also has different background, music, sticker selections.
"
281,Yejin423/Doctor-Who-Web,HTML,# Doctor-Who-Web
282,STGRobotics/K9,,"# K9
3D printed full size Doctor Who K9<br/>
3D Print CAD files from https//www.strobotics.com/K9<br/>
Files are provided as-is for non-commercial use only.<br/>
All CAD and code is licensed under GPL3: https://www.gnu.org/licenses/gpl-3.0.en.html
"
283,UserCake/Gallifrey,Java,
284,Graphmatic/tardis,CSS,"#The Doctor Who's Tardis Spaceship with CSS Flexbox#

##ressources utilisées:##

    - https://www.alsacreations.com/tuto/lire/1493-css3-flexbox-layout-module.html
    - https://developer.mozilla.org/fr/docs/Web/CSS/Disposition_des_bo%C3%AEtes_flexibles_CSS/Utilisation_des_flexbox_en_CSS
    - https://css-tricks.com/snippets/css/a-guide-to-flexbox/
    - http://flexboxfroggy.com/



"
